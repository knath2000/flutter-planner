#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# Define Flutter version and directory
FLUTTER_VERSION="3.29.2"
FLUTTER_DIR="$HOME/flutter-$FLUTTER_VERSION"

# Download and setup Flutter SDK if not already cached by Vercel
if [ ! -d "$FLUTTER_DIR/bin" ]; then
  echo "Downloading Flutter SDK $FLUTTER_VERSION..."
  # Use curl with -L to follow redirects, -o to specify output file
  curl -L -o flutter_linux.tar.xz "https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${FLUTTER_VERSION}-stable.tar.xz"

  echo "Extracting Flutter SDK..."
  mkdir -p "$HOME"
  tar xf flutter_linux.tar.xz -C "$HOME"
  # Rename the extracted directory to include the version
  mv "$HOME/flutter" "$FLUTTER_DIR"
  rm flutter_linux.tar.xz
  echo "Flutter SDK extracted to $FLUTTER_DIR"
else
  echo "Using cached Flutter SDK $FLUTTER_VERSION from $FLUTTER_DIR"
fi

# Add Flutter to PATH
export PATH="$FLUTTER_DIR/bin:$PATH"

# Add exception for Flutter SDK directory ownership for Git
git config --global --add safe.directory "$FLUTTER_DIR"

# Verify Flutter installation
echo "Verifying Flutter installation..."
flutter --version

# --- Firebase Config Handling ---
# Vercel automatically provides environment variables prefixed with NEXT_PUBLIC_
# We need to map these to the format expected by firebase_options.dart generation
# Ensure these environment variables are set in your Vercel project settings:
# FIREBASE_API_KEY, FIREBASE_AUTH_DOMAIN, FIREBASE_PROJECT_ID, FIREBASE_STORAGE_BUCKET,
# FIREBASE_MESSAGING_SENDER_ID, FIREBASE_APP_ID, FIREBASE_MEASUREMENT_ID (optional)

# Check if required Firebase environment variables are set
if [ -z "$FIREBASE_API_KEY" ] || [ -z "$FIREBASE_PROJECT_ID" ]; then
  echo "Error: FIREBASE_API_KEY and FIREBASE_PROJECT_ID environment variables must be set in Vercel."
  exit 1
fi

echo "Configuring Firebase..."
# Use flutterfire configure --yes --project=... --out=... etc.
# OR manually create lib/firebase_options.dart based on env vars
# Using flutterfire is generally preferred if flutterfire_cli is available/installable

# Example using flutterfire (requires flutterfire_cli to be installed globally or via npm)
# Ensure flutterfire_cli is installed: dart pub global activate flutterfire_cli OR npm i -g firebase-tools
# Note: Vercel build environment might not have dart pub global activate easily available.
# Consider adding flutterfire_cli activation to this script or using npm install.

# Alternative: Manually create firebase_options.dart (Less ideal but works without flutterfire_cli)
echo "Manually creating lib/firebase_options.dart..."
mkdir -p lib
cat << EOF > lib/firebase_options.dart
// File generated by Vercel build script. Do not edit.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    // Add options for other platforms if needed, using environment variables
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        // return android; // Define android options using env vars if needed
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for android - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.iOS:
         // return ios; // Define ios options using env vars if needed
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
         // return macos; // Define macos options using env vars if needed
         throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: '$FIREBASE_API_KEY',
    authDomain: '$FIREBASE_AUTH_DOMAIN',
    projectId: '$FIREBASE_PROJECT_ID',
    storageBucket: '$FIREBASE_STORAGE_BUCKET',
    messagingSenderId: '$FIREBASE_MESSAGING_SENDER_ID',
    appId: '$FIREBASE_APP_ID',
    measurementId: '$FIREBASE_MEASUREMENT_ID', // Optional
  );

  // Define options for other platforms similarly if needed
  // static const FirebaseOptions android = FirebaseOptions(...);
  // static const FirebaseOptions ios = FirebaseOptions(...);
  // static const FirebaseOptions macos = FirebaseOptions(...);
}
EOF
echo "lib/firebase_options.dart created."


# Build Flutter web app for release
echo "Building Flutter web app..."
flutter build web --release --no-tree-shake-icons --web-renderer html

# Prepare Vercel output directory structure
# https://vercel.com/docs/build-output-api/v3#vercel-primitives/static-files
echo "Preparing Vercel output directory..."
OUTPUT_DIR=".vercel/output/static"

# Clean previous output if any
rm -rf .vercel

# Create the output directory
mkdir -p "$OUTPUT_DIR"

# Copy the contents of build/web to the Vercel static output directory
cp -r build/web/* "$OUTPUT_DIR/"

echo "Build output successfully copied to $OUTPUT_DIR"

# Create a basic config.json to indicate Build Output API v3 usage
echo '{ "version": 3 }' > .vercel/output/config.json
echo "Created .vercel/output/config.json"

# (Optional) Further overrides can be added to config.json if needed
# echo '{ "version": 3 }' > .vercel/output/config.json

echo "Build script finished."