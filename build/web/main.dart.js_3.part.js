// Generated by dart2js (NullSafetyMode.sound, trust primitives, omit checks, lax runtime type, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_3", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var B, C,
  A = {ViewportElementMixin: function ViewportElementMixin() {
    }, ScrollViewKeyboardDismissBehavior: function ScrollViewKeyboardDismissBehavior(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    textDirectionToAxisDirection(textDirection) {
      var t1;
      switch (textDirection.index) {
        case 0:
          t1 = C.AxisDirection_3;
          break;
        case 1:
          t1 = C.AxisDirection_1;
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    RevealedOffset_clampOffset(currentOffset, leadingEdgeOffset, trailingEdgeOffset) {
      var _0_0 = leadingEdgeOffset.offset < trailingEdgeOffset.offset ? new B._Record_2(leadingEdgeOffset, trailingEdgeOffset) : new B._Record_2(trailingEdgeOffset, leadingEdgeOffset),
        smaller = _0_0._0,
        larger = _0_0._1;
      if (currentOffset > larger.offset)
        return larger;
      else if (currentOffset < smaller.offset)
        return smaller;
      else
        return null;
    },
    RenderViewportBase_showInViewport(curve, descendant, duration, offset, rect, viewport) {
      var leadingEdgeOffset, trailingEdgeOffset, t1, targetOffset, transform;
      if (descendant == null)
        return rect;
      leadingEdgeOffset = viewport.getOffsetToReveal$3$rect(descendant, 0, rect);
      trailingEdgeOffset = viewport.getOffsetToReveal$3$rect(descendant, 1, rect);
      t1 = offset._pixels;
      t1.toString;
      targetOffset = A.RevealedOffset_clampOffset(t1, leadingEdgeOffset, trailingEdgeOffset);
      if (targetOffset == null) {
        transform = descendant.getTransformTo$1(viewport._object$_parent);
        return B.MatrixUtils_transformRect(transform, rect == null ? descendant.get$paintBounds() : rect);
      }
      offset.moveTo$3$curve$duration(targetOffset.offset, curve, duration);
      return targetOffset.rect;
    },
    getAxisDirectionFromAxisReverseAndDirectionality(context, axis, reverse) {
      var axisDirection;
      switch (axis.index) {
        case 0:
          axisDirection = A.textDirectionToAxisDirection(context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection);
          return axisDirection;
        case 1:
          return C.AxisDirection_2;
      }
    },
    PrimaryScrollController$none(child) {
      return new B.PrimaryScrollController(null, null, D.Set_empty0, child, null);
    },
    PrimaryScrollController_shouldInherit(context, scrollDirection) {
      var platform,
        result = context.findAncestorWidgetOfExactType$1$0(type$.PrimaryScrollController);
      if (result == null)
        return false;
      platform = B.ScrollConfiguration_of(context).getPlatform$1(context);
      if (result.automaticallyInheritForPlatforms.contains$1(0, platform))
        return result.scrollDirection === scrollDirection;
      return false;
    }
  },
  D;
  B = holdersList[0];
  C = holdersList[2];
  A = hunkHelpers.updateHolder(holdersList[11], A);
  D = holdersList[20];
  A.ViewportElementMixin.prototype = {
    onNotification$1(notification) {
      if (type$.ViewportNotificationMixin._is(notification))
        ++notification.ViewportNotificationMixin__depth;
      return false;
    }
  };
  A.ScrollViewKeyboardDismissBehavior.prototype = {
    _enumToString$0() {
      return "ScrollViewKeyboardDismissBehavior." + this._name;
    }
  };
  var typesOffset = hunkHelpers.updateTypes([]);
  (function inheritance() {
    var _inherit = hunkHelpers.inherit;
    _inherit(A.ViewportElementMixin, B.Object);
    _inherit(A.ScrollViewKeyboardDismissBehavior, B._Enum);
  })();
  var type$ = {
    Directionality: B.findType("Directionality"),
    PrimaryScrollController: B.findType("PrimaryScrollController"),
    ViewportNotificationMixin: B.findType("ViewportNotificationMixin")
  };
  (function constants() {
    D.ScrollViewKeyboardDismissBehavior_0 = new A.ScrollViewKeyboardDismissBehavior(0, "manual");
    D.ScrollViewKeyboardDismissBehavior_1 = new A.ScrollViewKeyboardDismissBehavior(1, "onDrag");
    D.Set_empty0 = new B.ConstantStringSet(C.Object_empty, 0, B.findType("ConstantStringSet<TargetPlatform>"));
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_3", e: "endPart", h: h});
})($__dart_deferred_initializers__, "UIsuIB8lUmRwWeFqL+OQ9iMev3w=");
;