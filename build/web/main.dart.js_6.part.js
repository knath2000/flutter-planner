// Generated by dart2js (NullSafetyMode.sound, trust primitives, omit checks, lax runtime type, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_6", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, B, C, E,
  A = {SizeTween: function SizeTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    CupertinoButton$(alignment, borderRadius, child, color, disabledColor, minSize, onPressed, padding, pressedOpacity) {
      return new A.CupertinoButton(child, padding, color, disabledColor, onPressed, minSize, pressedOpacity, borderRadius, alignment, null);
    },
    CupertinoButtonSize: function CupertinoButtonSize(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    _CupertinoButtonStyle: function _CupertinoButtonStyle(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    CupertinoButton: function CupertinoButton(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.child = t0;
      _.padding = t1;
      _.color = t2;
      _.disabledColor = t3;
      _.onPressed = t4;
      _.minSize = t5;
      _.pressedOpacity = t6;
      _.borderRadius = t7;
      _.alignment = t8;
      _.key = t9;
    },
    _CupertinoButtonState: function _CupertinoButtonState(t0, t1, t2) {
      var _ = this;
      _._opacityTween = t0;
      _.___CupertinoButtonState_isFocused_A = _.___CupertinoButtonState__opacityAnimation_A = _.___CupertinoButtonState__animationController_A = $;
      _._buttonHeldDown = false;
      _.___CupertinoButtonState__actionMap_FI = $;
      _.SingleTickerProviderStateMixin__ticker = t1;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t2;
      _._framework$_element = _._widget = null;
    },
    _CupertinoButtonState__animate_closure: function _CupertinoButtonState__animate_closure(t0, t1) {
      this.$this = t0;
      this.wasHeldDown = t1;
    },
    _CupertinoButtonState__onShowFocusHighlight_closure: function _CupertinoButtonState__onShowFocusHighlight_closure(t0, t1) {
      this.$this = t0;
      this.showHighlight = t1;
    },
    __CupertinoButtonState_State_SingleTickerProviderStateMixin: function __CupertinoButtonState_State_SingleTickerProviderStateMixin() {
    },
    _CupertinoDesktopTextSelectionHandleControls: function _CupertinoDesktopTextSelectionHandleControls() {
    },
    CupertinoDesktopTextSelectionControls: function CupertinoDesktopTextSelectionControls() {
    },
    __CupertinoDesktopTextSelectionHandleControls_CupertinoDesktopTextSelectionControls_TextSelectionHandleControls: function __CupertinoDesktopTextSelectionHandleControls_CupertinoDesktopTextSelectionControls_TextSelectionHandleControls() {
    },
    CupertinoDesktopTextSelectionToolbar: function CupertinoDesktopTextSelectionToolbar(t0, t1, t2) {
      this.anchor = t0;
      this.children = t1;
      this.key = t2;
    },
    CupertinoDesktopTextSelectionToolbarButton$text(onPressed, text) {
      return new A.CupertinoDesktopTextSelectionToolbarButton(onPressed, text, null);
    },
    CupertinoDesktopTextSelectionToolbarButton: function CupertinoDesktopTextSelectionToolbarButton(t0, t1, t2) {
      this.onPressed = t0;
      this.text = t1;
      this.key = t2;
    },
    _CupertinoDesktopTextSelectionToolbarButtonState: function _CupertinoDesktopTextSelectionToolbarButtonState() {
      this._isHovered = false;
      this._framework$_element = this._widget = null;
    },
    _CupertinoDesktopTextSelectionToolbarButtonState__onEnter_closure: function _CupertinoDesktopTextSelectionToolbarButtonState__onEnter_closure(t0) {
      this.$this = t0;
    },
    _CupertinoDesktopTextSelectionToolbarButtonState__onExit_closure: function _CupertinoDesktopTextSelectionToolbarButtonState__onExit_closure(t0) {
      this.$this = t0;
    },
    CupertinoTextMagnifier: function CupertinoTextMagnifier(t0, t1, t2) {
      this.controller = t0;
      this.magnifierInfo = t1;
      this.key = t2;
    },
    _CupertinoTextMagnifierState: function _CupertinoTextMagnifierState(t0, t1, t2) {
      var _ = this;
      _._currentAdjustedMagnifierPosition = t0;
      _._verticalFocalPointAdjustment = 0;
      _.___CupertinoTextMagnifierState__ioCurvedAnimation_F = _.___CupertinoTextMagnifierState__ioAnimation_F = _.___CupertinoTextMagnifierState__ioAnimationController_F = $;
      _.SingleTickerProviderStateMixin__ticker = t1;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t2;
      _._framework$_element = _._widget = null;
    },
    _CupertinoTextMagnifierState_initState_closure: function _CupertinoTextMagnifierState_initState_closure(t0) {
      this.$this = t0;
    },
    _CupertinoTextMagnifierState_initState__closure: function _CupertinoTextMagnifierState_initState__closure() {
    },
    _CupertinoTextMagnifierState__determineMagnifierPositionAndFocalPoint_closure: function _CupertinoTextMagnifierState__determineMagnifierPositionAndFocalPoint_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.adjustedMagnifierPosition = t1;
      _.verticalCenterOfCurrentLine = t2;
      _.verticalPositionOfLens = t3;
    },
    CupertinoMagnifier: function CupertinoMagnifier(t0, t1, t2, t3) {
      var _ = this;
      _.borderSide = t0;
      _.inOutAnimation = t1;
      _.additionalFocalPointOffset = t2;
      _.key = t3;
    },
    __CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin: function __CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin() {
    },
    _CupertinoTextSelectionHandlePainter: function _CupertinoTextSelectionHandlePainter(t0, t1) {
      this.color = t0;
      this._repaint = t1;
    },
    CupertinoTextSelectionHandleControls: function CupertinoTextSelectionHandleControls() {
    },
    CupertinoTextSelectionControls: function CupertinoTextSelectionControls() {
    },
    _CupertinoTextSelectionHandleControls_CupertinoTextSelectionControls_TextSelectionHandleControls: function _CupertinoTextSelectionHandleControls_CupertinoTextSelectionControls_TextSelectionHandleControls() {
    },
    CupertinoTextSelectionToolbar$(anchorAbove, anchorBelow, children) {
      return new A.CupertinoTextSelectionToolbar(anchorAbove, anchorBelow, children, null);
    },
    CupertinoTextSelectionToolbar__defaultToolbarBuilder(context, anchorAbove, anchorBelow, child) {
      var t1 = A.CupertinoTheme_brightnessOf(context) === C.Brightness_1 ? B.Color$fromARGB(51, C.Color_vnR.toARGB32$0() >>> 16 & 255, C.Color_vnR.toARGB32$0() >>> 8 & 255, C.Color_vnR.toARGB32$0() & 255) : null;
      return new A._CupertinoTextSelectionToolbarShape(anchorAbove, anchorBelow, t1, new B.ColoredBox(D.CupertinoDynamicColor_YBl.resolveFrom$1(context), child, null), null);
    },
    _RenderCupertinoTextSelectionToolbarShape__addRRectToPath(path, rrect, startAngle) {
      var i, _0_0, _0_1, rectCenterOffset, _0_2, vertex,
        t1 = rrect.left,
        t2 = rrect.top,
        t3 = rrect.right,
        t4 = rrect.bottom,
        rrectCorners = [new B._Record_2(new B.Offset(t3, t4), new B.Radius(-rrect.brRadiusX, -rrect.brRadiusY)), new B._Record_2(new B.Offset(t1, t4), new B.Radius(rrect.blRadiusX, -rrect.blRadiusY)), new B._Record_2(new B.Offset(t1, t2), new B.Radius(rrect.tlRadiusX, rrect.tlRadiusY)), new B._Record_2(new B.Offset(t3, t2), new B.Radius(-rrect.trRadiusX, rrect.trRadiusY))],
        startQuadrantIndex = C.JSNumber_methods.$tdiv(startAngle, 1.5707963267948966);
      for (t1 = 4 + startQuadrantIndex, i = startQuadrantIndex; i < t1; ++i) {
        _0_0 = rrectCorners[C.JSInt_methods.$mod(i, 4)];
        _0_1 = _0_0._0;
        rectCenterOffset = null;
        _0_2 = _0_0._1;
        rectCenterOffset = _0_2;
        vertex = _0_1;
        path.arcTo$4(B.Rect$fromPoints(vertex, new B.Offset(vertex._dx + 2 * rectCenterOffset.x, vertex._dy + 2 * rectCenterOffset.y)), 1.5707963267948966 * i, 1.5707963267948966, false);
      }
      return path;
    },
    _RenderCupertinoTextSelectionToolbarItems_hitTestChild(child, result, position) {
      var t1;
      if (child == null)
        return false;
      t1 = child.parentData;
      t1.toString;
      type$.ToolbarItemsParentData._as(t1);
      if (!t1.shouldPaint)
        return false;
      return result.addWithPaintOffset$3$hitTest$offset$position(new A._RenderCupertinoTextSelectionToolbarItems_hitTestChild_closure(child), t1.offset, position);
    },
    CupertinoTextSelectionToolbar: function CupertinoTextSelectionToolbar(t0, t1, t2, t3) {
      var _ = this;
      _.anchorAbove = t0;
      _.anchorBelow = t1;
      _.children = t2;
      _.key = t3;
    },
    _CupertinoTextSelectionToolbarShape: function _CupertinoTextSelectionToolbarShape(t0, t1, t2, t3, t4) {
      var _ = this;
      _._anchorAbove = t0;
      _._anchorBelow = t1;
      _._shadowColor = t2;
      _.child = t3;
      _.key = t4;
    },
    _RenderCupertinoTextSelectionToolbarShape: function _RenderCupertinoTextSelectionToolbarShape(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._anchorAbove = t0;
      _._anchorBelow = t1;
      _._shadowColor = t2;
      _._clipPathLayer = t3;
      _.RenderObjectWithChildMixin__child = t4;
      _._layoutCacheStorage = t5;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t6;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    _RenderCupertinoTextSelectionToolbarShape_paint_closure: function _RenderCupertinoTextSelectionToolbarShape_paint_closure(t0) {
      this.child = t0;
    },
    _CupertinoTextSelectionToolbarContent: function _CupertinoTextSelectionToolbarContent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.anchorAbove = t0;
      _.anchorBelow = t1;
      _.children = t2;
      _.toolbarBuilder = t3;
      _.key = t4;
    },
    _CupertinoTextSelectionToolbarContentState: function _CupertinoTextSelectionToolbarContentState(t0, t1, t2) {
      var _ = this;
      _.___CupertinoTextSelectionToolbarContentState__controller_A = $;
      _._nextPage = null;
      _._text_selection_toolbar0$_page = 0;
      _._toolbarItemsKey = t0;
      _.TickerProviderStateMixin__tickers = t1;
      _.TickerProviderStateMixin__tickerModeNotifier = t2;
      _._framework$_element = _._widget = null;
    },
    _CupertinoTextSelectionToolbarContentState__statusListener_closure: function _CupertinoTextSelectionToolbarContentState__statusListener_closure(t0) {
      this.$this = t0;
    },
    _CupertinoTextSelectionToolbarContentState_build_closure: function _CupertinoTextSelectionToolbarContentState_build_closure() {
    },
    _LeftCupertinoChevronPainter: function _LeftCupertinoChevronPainter(t0, t1, t2) {
      this.color = t0;
      this.isLeft = t1;
      this._repaint = t2;
    },
    _RightCupertinoChevronPainter: function _RightCupertinoChevronPainter(t0, t1, t2) {
      this.color = t0;
      this.isLeft = t1;
      this._repaint = t2;
    },
    _CupertinoChevronPainter: function _CupertinoChevronPainter() {
    },
    _CupertinoTextSelectionToolbarItems: function _CupertinoTextSelectionToolbarItems(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.backButton = t0;
      _.children = t1;
      _.dividerColor = t2;
      _.dividerWidth = t3;
      _.nextButton = t4;
      _.page = t5;
      _.key = t6;
    },
    _CupertinoTextSelectionToolbarItemsElement: function _CupertinoTextSelectionToolbarItemsElement(t0, t1, t2, t3) {
      var _ = this;
      _.___CupertinoTextSelectionToolbarItemsElement__children_A = $;
      _.slotToChild = t0;
      _._text_selection_toolbar0$_forgottenChildren = t1;
      _._slot = _._notificationTree = _._framework$_parent = _._ancestorRenderObjectElement = _._renderObject = null;
      _.__Element__depth_A = $;
      _._widget = t2;
      _._parentBuildScope = _._framework$_owner = null;
      _._lifecycleState = t3;
      _._dependencies = _._inheritedElements = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._inDirtyList = false;
    },
    _CupertinoTextSelectionToolbarItemsElement_mount_closure: function _CupertinoTextSelectionToolbarItemsElement_mount_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.toolbarItems = t2;
    },
    _RenderCupertinoTextSelectionToolbarItems: function _RenderCupertinoTextSelectionToolbarItems(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.slottedChildren = t0;
      _.___RenderCupertinoTextSelectionToolbarItems_hasPreviousPage_A = _.___RenderCupertinoTextSelectionToolbarItems_hasNextPage_A = $;
      _._text_selection_toolbar0$_page = t1;
      _._dividerColor = t2;
      _._dividerWidth = t3;
      _._nextButton = _._backButton = null;
      _.ContainerRenderObjectMixin__childCount = t4;
      _.ContainerRenderObjectMixin__firstChild = t5;
      _.ContainerRenderObjectMixin__lastChild = t6;
      _._layoutCacheStorage = t7;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t8;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    _RenderCupertinoTextSelectionToolbarItems_performLayout_closure: function _RenderCupertinoTextSelectionToolbarItems_performLayout_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _RenderCupertinoTextSelectionToolbarItems_performLayout_closure0: function _RenderCupertinoTextSelectionToolbarItems_performLayout_closure0(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.subsequentPageButtonsWidth = t2;
      _.toolbarWidth = t3;
    },
    _RenderCupertinoTextSelectionToolbarItems_paint_closure: function _RenderCupertinoTextSelectionToolbarItems_paint_closure(t0, t1, t2) {
      this.$this = t0;
      this.offset = t1;
      this.context = t2;
    },
    _RenderCupertinoTextSelectionToolbarItems_hitTestChild_closure: function _RenderCupertinoTextSelectionToolbarItems_hitTestChild_closure(t0) {
      this.child = t0;
    },
    _RenderCupertinoTextSelectionToolbarItems_redepthChildren_closure: function _RenderCupertinoTextSelectionToolbarItems_redepthChildren_closure(t0) {
      this.$this = t0;
    },
    _RenderCupertinoTextSelectionToolbarItems_visitChildrenForSemantics_closure: function _RenderCupertinoTextSelectionToolbarItems_visitChildrenForSemantics_closure(t0) {
      this.visitor = t0;
    },
    _RenderCupertinoTextSelectionToolbarItems_debugDescribeChildren_closure: function _RenderCupertinoTextSelectionToolbarItems_debugDescribeChildren_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _CupertinoTextSelectionToolbarItemsSlot: function _CupertinoTextSelectionToolbarItemsSlot(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    __CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin: function __CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin() {
    },
    __RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin: function __RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin() {
    },
    __RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin: function __RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin() {
    },
    CupertinoTextSelectionToolbarButton$(child, onPressed) {
      return new A.CupertinoTextSelectionToolbarButton(child, onPressed, null, null, null);
    },
    CupertinoTextSelectionToolbarButton$buttonItem(buttonItem) {
      return new A.CupertinoTextSelectionToolbarButton(null, buttonItem.onPressed, buttonItem, null, null);
    },
    CupertinoTextSelectionToolbarButton_getButtonLabel(context, buttonItem) {
      var _0_0,
        t1 = buttonItem.label;
      if (t1 != null)
        return t1;
      B.Localizations_of(context, D.Type_CupertinoLocalizations_cma, type$.CupertinoLocalizations).toString;
      _0_0 = buttonItem.type;
      $label0$0: {
        if (D.ContextMenuButtonType_0 === _0_0) {
          t1 = "Cut";
          break $label0$0;
        }
        if (D.ContextMenuButtonType_1 === _0_0) {
          t1 = "Copy";
          break $label0$0;
        }
        if (D.ContextMenuButtonType_2 === _0_0) {
          t1 = "Paste";
          break $label0$0;
        }
        if (D.ContextMenuButtonType_3 === _0_0) {
          t1 = "Select All";
          break $label0$0;
        }
        if (D.ContextMenuButtonType_5 === _0_0) {
          t1 = "Look Up";
          break $label0$0;
        }
        if (D.ContextMenuButtonType_6 === _0_0) {
          t1 = "Search Web";
          break $label0$0;
        }
        if (D.ContextMenuButtonType_7 === _0_0) {
          t1 = "Share...";
          break $label0$0;
        }
        if (D.ContextMenuButtonType_8 === _0_0 || D.ContextMenuButtonType_4 === _0_0 || D.ContextMenuButtonType_9 === _0_0) {
          t1 = "";
          break $label0$0;
        }
        t1 = null;
      }
      return t1;
    },
    CupertinoTextSelectionToolbarButton: function CupertinoTextSelectionToolbarButton(t0, t1, t2, t3, t4) {
      var _ = this;
      _.child = t0;
      _.onPressed = t1;
      _.buttonItem = t2;
      _.text = t3;
      _.key = t4;
    },
    _CupertinoTextSelectionToolbarButtonState: function _CupertinoTextSelectionToolbarButtonState() {
      this.isPressed = false;
      this._framework$_element = this._widget = null;
    },
    _CupertinoTextSelectionToolbarButtonState__onTapDown_closure: function _CupertinoTextSelectionToolbarButtonState__onTapDown_closure(t0) {
      this.$this = t0;
    },
    _CupertinoTextSelectionToolbarButtonState__onTapUp_closure: function _CupertinoTextSelectionToolbarButtonState__onTapUp_closure(t0) {
      this.$this = t0;
    },
    _CupertinoTextSelectionToolbarButtonState__onTapCancel_closure: function _CupertinoTextSelectionToolbarButtonState__onTapCancel_closure(t0) {
      this.$this = t0;
    },
    _LiveTextIconPainter: function _LiveTextIconPainter(t0, t1, t2) {
      this.color = t0;
      this._text_selection_toolbar_button$_painter = t1;
      this._repaint = t2;
    },
    _DragState0: function _DragState0(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TapDragDownDetails: function TapDragDownDetails(t0, t1, t2, t3) {
      var _ = this;
      _.globalPosition = t0;
      _.localPosition = t1;
      _.kind = t2;
      _.consecutiveTapCount = t3;
    },
    TapDragUpDetails: function TapDragUpDetails(t0, t1, t2, t3) {
      var _ = this;
      _.globalPosition = t0;
      _.localPosition = t1;
      _.kind = t2;
      _.consecutiveTapCount = t3;
    },
    TapDragStartDetails: function TapDragStartDetails(t0, t1, t2, t3, t4) {
      var _ = this;
      _.sourceTimeStamp = t0;
      _.globalPosition = t1;
      _.localPosition = t2;
      _.kind = t3;
      _.consecutiveTapCount = t4;
    },
    TapDragUpdateDetails: function TapDragUpdateDetails(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.sourceTimeStamp = t0;
      _.delta = t1;
      _.globalPosition = t2;
      _.localPosition = t3;
      _.kind = t4;
      _.offsetFromOrigin = t5;
      _.localOffsetFromOrigin = t6;
      _.consecutiveTapCount = t7;
    },
    TapDragEndDetails: function TapDragEndDetails(t0, t1, t2, t3) {
      var _ = this;
      _.primaryVelocity = t0;
      _.consecutiveTapCount = t1;
      _.globalPosition = t2;
      _.localPosition = t3;
    },
    _TapStatusTrackerMixin: function _TapStatusTrackerMixin() {
    },
    BaseTapAndDragGestureRecognizer: function BaseTapAndDragGestureRecognizer() {
    },
    BaseTapAndDragGestureRecognizer__handleDragUpdateThrottled_closure: function BaseTapAndDragGestureRecognizer__handleDragUpdateThrottled_closure(t0) {
      this.$this = t0;
    },
    BaseTapAndDragGestureRecognizer_addAllowedPointer_closure: function BaseTapAndDragGestureRecognizer_addAllowedPointer_closure(t0, t1) {
      this.$this = t0;
      this.event = t1;
    },
    BaseTapAndDragGestureRecognizer__checkTapDown_closure: function BaseTapAndDragGestureRecognizer__checkTapDown_closure(t0, t1) {
      this.$this = t0;
      this.details = t1;
    },
    BaseTapAndDragGestureRecognizer__checkTapUp_closure: function BaseTapAndDragGestureRecognizer__checkTapUp_closure(t0, t1) {
      this.$this = t0;
      this.upDetails = t1;
    },
    BaseTapAndDragGestureRecognizer__checkDragStart_closure: function BaseTapAndDragGestureRecognizer__checkDragStart_closure(t0, t1) {
      this.$this = t0;
      this.details = t1;
    },
    BaseTapAndDragGestureRecognizer__checkDragUpdate_closure: function BaseTapAndDragGestureRecognizer__checkDragUpdate_closure(t0, t1) {
      this.$this = t0;
      this.details = t1;
    },
    BaseTapAndDragGestureRecognizer__checkDragEnd_closure: function BaseTapAndDragGestureRecognizer__checkDragEnd_closure(t0, t1) {
      this.$this = t0;
      this.endDetails = t1;
    },
    TapAndHorizontalDragGestureRecognizer: function TapAndHorizontalDragGestureRecognizer(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17) {
      var _ = this;
      _.dragStartBehavior = t0;
      _.eagerVictoryOnDrag = true;
      _.onCancel = _.onDragEnd = _.onDragUpdate = _.onDragStart = _.onTapUp = _.onTapDown = null;
      _._tap_and_drag$_wonArenaForPrimaryPointer = _._tap_and_drag$_sentTapDown = _._pastSlopTolerance = false;
      _._deadlineTimer = _._tap_and_drag$_primaryPointer = null;
      _._dragState = t1;
      _._tap_and_drag$_start = null;
      _.__BaseTapAndDragGestureRecognizer__globalDistanceMovedAllAxes_A = _.__BaseTapAndDragGestureRecognizer__globalDistanceMoved_A = _.__BaseTapAndDragGestureRecognizer__currentPosition_A = _.__BaseTapAndDragGestureRecognizer__initialPosition_A = $;
      _._dragUpdateThrottleTimer = _._lastDragUpdateDetails = null;
      _._tap_and_drag$_acceptedActivePointers = t2;
      _._TapStatusTrackerMixin__down = t3;
      _._TapStatusTrackerMixin__up = t4;
      _._TapStatusTrackerMixin__consecutiveTapCount = t5;
      _._TapStatusTrackerMixin__originPosition = t6;
      _._TapStatusTrackerMixin__previousButtons = t7;
      _._TapStatusTrackerMixin__consecutiveTapTimer = t8;
      _._TapStatusTrackerMixin__lastTapOffset = t9;
      _._TapStatusTrackerMixin_onTapTrackStart = t10;
      _._TapStatusTrackerMixin_onTapTrackReset = t11;
      _._recognizer$_entries = t12;
      _._trackedPointers = t13;
      _.debugOwner = t14;
      _.gestureSettings = null;
      _.supportedDevices = t15;
      _.allowedButtonsFilter = t16;
      _._pointerToKind = t17;
    },
    TapAndPanGestureRecognizer: function TapAndPanGestureRecognizer(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17) {
      var _ = this;
      _.dragStartBehavior = t0;
      _.eagerVictoryOnDrag = true;
      _.onCancel = _.onDragEnd = _.onDragUpdate = _.onDragStart = _.onTapUp = _.onTapDown = null;
      _._tap_and_drag$_wonArenaForPrimaryPointer = _._tap_and_drag$_sentTapDown = _._pastSlopTolerance = false;
      _._deadlineTimer = _._tap_and_drag$_primaryPointer = null;
      _._dragState = t1;
      _._tap_and_drag$_start = null;
      _.__BaseTapAndDragGestureRecognizer__globalDistanceMovedAllAxes_A = _.__BaseTapAndDragGestureRecognizer__globalDistanceMoved_A = _.__BaseTapAndDragGestureRecognizer__currentPosition_A = _.__BaseTapAndDragGestureRecognizer__initialPosition_A = $;
      _._dragUpdateThrottleTimer = _._lastDragUpdateDetails = null;
      _._tap_and_drag$_acceptedActivePointers = t2;
      _._TapStatusTrackerMixin__down = t3;
      _._TapStatusTrackerMixin__up = t4;
      _._TapStatusTrackerMixin__consecutiveTapCount = t5;
      _._TapStatusTrackerMixin__originPosition = t6;
      _._TapStatusTrackerMixin__previousButtons = t7;
      _._TapStatusTrackerMixin__consecutiveTapTimer = t8;
      _._TapStatusTrackerMixin__lastTapOffset = t9;
      _._TapStatusTrackerMixin_onTapTrackStart = t10;
      _._TapStatusTrackerMixin_onTapTrackReset = t11;
      _._recognizer$_entries = t12;
      _._trackedPointers = t13;
      _.debugOwner = t14;
      _.gestureSettings = null;
      _.supportedDevices = t15;
      _.allowedButtonsFilter = t16;
      _._pointerToKind = t17;
    },
    _BaseTapAndDragGestureRecognizer_OneSequenceGestureRecognizer__TapStatusTrackerMixin: function _BaseTapAndDragGestureRecognizer_OneSequenceGestureRecognizer__TapStatusTrackerMixin() {
    },
    _TapDragDownDetails_Object_Diagnosticable: function _TapDragDownDetails_Object_Diagnosticable() {
    },
    _TapDragEndDetails_Object_Diagnosticable: function _TapDragEndDetails_Object_Diagnosticable() {
    },
    _TapDragStartDetails_Object_Diagnosticable: function _TapDragStartDetails_Object_Diagnosticable() {
    },
    _TapDragUpDetails_Object_Diagnosticable: function _TapDragUpDetails_Object_Diagnosticable() {
    },
    _TapDragUpdateDetails_Object_Diagnosticable: function _TapDragUpdateDetails_Object_Diagnosticable() {
    },
    AdaptiveTextSelectionToolbar$editableText(editableTextState) {
      return new A.AdaptiveTextSelectionToolbar(editableTextState.get$contextMenuButtonItems(), editableTextState.get$contextMenuAnchors(), null);
    },
    AdaptiveTextSelectionToolbar_getButtonLabel(context, buttonItem) {
      var t1 = buttonItem.label;
      if (t1 != null)
        return t1;
      switch (B.Theme_of(context).platform.index) {
        case 2:
        case 4:
          return A.CupertinoTextSelectionToolbarButton_getButtonLabel(context, buttonItem);
        case 0:
        case 1:
        case 3:
        case 5:
          B.Localizations_of(context, C.Type_MaterialLocalizations_nEU, type$.MaterialLocalizations).toString;
          switch (buttonItem.type.index) {
            case 0:
              t1 = "Cut";
              break;
            case 1:
              t1 = "Copy";
              break;
            case 2:
              t1 = "Paste";
              break;
            case 3:
              t1 = "Select all";
              break;
            case 4:
              t1 = "Delete".toUpperCase();
              break;
            case 5:
              t1 = "Look Up";
              break;
            case 6:
              t1 = "Search Web";
              break;
            case 7:
              t1 = "Share";
              break;
            case 8:
              t1 = "Scan text";
              break;
            case 9:
              t1 = "";
              break;
            default:
              t1 = null;
          }
          return t1;
      }
    },
    AdaptiveTextSelectionToolbar_getAdaptiveButtons(context, buttonItems) {
      var buttons, i, t1, buttonItem, position, t2, _null = null;
      switch (B.Theme_of(context).platform.index) {
        case 2:
          return new B.MappedListIterable(buttonItems, new A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure(), B._arrayInstanceType(buttonItems)._eval$1("MappedListIterable<1,Widget>"));
        case 1:
        case 0:
          buttons = B._setArrayType([], type$.JSArray_Widget);
          for (i = 0; t1 = buttonItems.length, i < t1; ++i) {
            buttonItem = buttonItems[i];
            position = A.TextSelectionToolbarTextButton__getPosition(i, t1);
            t1 = A.TextSelectionToolbarTextButton__getLeftPadding(position);
            t2 = A.TextSelectionToolbarTextButton__getRightPadding(position);
            buttons.push(new A.TextSelectionToolbarTextButton(B.Text$(A.AdaptiveTextSelectionToolbar_getButtonLabel(context, buttonItem), _null, _null, _null, _null, _null, _null), buttonItem.onPressed, new B.EdgeInsets(t1, 0, t2, 0), C.AlignmentDirectional_m1_0, _null));
          }
          return buttons;
        case 3:
        case 5:
          return new B.MappedListIterable(buttonItems, new A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure0(context), B._arrayInstanceType(buttonItems)._eval$1("MappedListIterable<1,Widget>"));
        case 4:
          return new B.MappedListIterable(buttonItems, new A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure1(context), B._arrayInstanceType(buttonItems)._eval$1("MappedListIterable<1,Widget>"));
      }
    },
    AdaptiveTextSelectionToolbar: function AdaptiveTextSelectionToolbar(t0, t1, t2) {
      this.buttonItems = t0;
      this.anchors = t1;
      this.key = t2;
    },
    AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure: function AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure() {
    },
    AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure0: function AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure0(t0) {
      this.context = t0;
    },
    AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure1: function AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure1(t0) {
      this.context = t0;
    },
    _DesktopTextSelectionHandleControls: function _DesktopTextSelectionHandleControls() {
    },
    DesktopTextSelectionControls: function DesktopTextSelectionControls() {
    },
    __DesktopTextSelectionHandleControls_DesktopTextSelectionControls_TextSelectionHandleControls: function __DesktopTextSelectionHandleControls_DesktopTextSelectionControls_TextSelectionHandleControls() {
    },
    DesktopTextSelectionToolbar: function DesktopTextSelectionToolbar(t0, t1, t2) {
      this.anchor = t0;
      this.children = t1;
      this.key = t2;
    },
    DesktopTextSelectionToolbarButton$text(context, onPressed, text) {
      var _null = null;
      return new A.DesktopTextSelectionToolbarButton(onPressed, B.Text$(text, _null, C.TextOverflow_2, _null, D.TextStyle_dPI.copyWith$1$color(B.Theme_of(context).colorScheme.brightness === C.Brightness_0 ? C.Color_wst : C.Color_PW1), _null, _null), _null);
    },
    DesktopTextSelectionToolbarButton: function DesktopTextSelectionToolbarButton(t0, t1, t2) {
      this.onPressed = t0;
      this.child = t1;
      this.key = t2;
    },
    InputBorder: function InputBorder() {
    },
    UnderlineInputBorder: function UnderlineInputBorder(t0, t1) {
      this.borderRadius = t0;
      this.borderSide = t1;
    },
    _RenderDecoration__minWidth(box, height) {
      var t1 = box == null ? null : box._computeIntrinsics$3(C._IntrinsicDimension_0, height, box.get$computeMinIntrinsicWidth());
      return t1 == null ? 0 : t1;
    },
    _RenderDecoration__maxWidth(box, height) {
      var t1 = box == null ? null : box._computeIntrinsics$3(C._IntrinsicDimension_1, height, box.get$computeMaxIntrinsicWidth());
      return t1 == null ? 0 : t1;
    },
    _RenderDecoration__minHeight(box, width) {
      var t1 = box == null ? null : box._computeIntrinsics$3(C._IntrinsicDimension_2, width, box.get$computeMinIntrinsicHeight());
      return t1 == null ? 0 : t1;
    },
    _RenderDecoration__boxSize(box) {
      var t1 = box == null ? null : box.get$size();
      return t1 == null ? C.Size_0_0 : t1;
    },
    _RenderDecoration__getBaseline(box, boxConstraints) {
      var t1 = box.getDistanceToBaseline$2$onlyReal(C.TextBaseline_0, true);
      return t1 == null ? box.get$size()._dy : t1;
    },
    _RenderDecoration__getDryBaseline(box, boxConstraints) {
      var t1 = box.getDryBaseline$2(boxConstraints, C.TextBaseline_0);
      return t1 == null ? box._computeIntrinsics$3(C.C__DryLayout, boxConstraints, box.get$_box$_computeDryLayout())._dy : t1;
    },
    InputDecoration$(alignLabelWithHint, border, constraints, contentPadding, counter, counterStyle, counterText, disabledBorder, enabled, enabledBorder, error, errorBorder, errorMaxLines, errorStyle, errorText, fillColor, filled, floatingLabelAlignment, floatingLabelBehavior, floatingLabelStyle, focusColor, focusedBorder, focusedErrorBorder, helper, helperMaxLines, helperStyle, helperText, hintFadeDuration, hintMaxLines, hintStyle, hintText, hintTextDirection, hoverColor, icon, iconColor, isCollapsed, isDense, label, labelStyle, labelText, maintainHintHeight, prefix, prefixIcon, prefixIconColor, prefixIconConstraints, prefixStyle, prefixText, semanticCounterText, suffix, suffixIcon, suffixIconColor, suffixIconConstraints, suffixStyle, suffixText) {
      return new A.InputDecoration(icon, iconColor, label, labelText, labelStyle, floatingLabelStyle, helper, helperText, helperStyle, helperMaxLines, hintText, hintStyle, hintTextDirection, hintMaxLines, hintFadeDuration, true, error, errorText, errorStyle, errorMaxLines, floatingLabelBehavior, floatingLabelAlignment, isDense, contentPadding, isCollapsed, prefixIcon, prefixIconConstraints, prefix, prefixText, prefixStyle, prefixIconColor, suffixIcon, suffix, suffixText, suffixStyle, suffixIconColor, suffixIconConstraints, counterText, counter, counterStyle, filled, fillColor, focusColor, hoverColor, errorBorder, focusedBorder, focusedErrorBorder, disabledBorder, enabledBorder, border, true, semanticCounterText, alignLabelWithHint, constraints);
    },
    _InputBorderGap: function _InputBorderGap(t0) {
      var _ = this;
      _._input_decorator$_start = null;
      _.ChangeNotifier__count = _._extent = 0;
      _.ChangeNotifier__listeners = t0;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    },
    _InputBorderTween: function _InputBorderTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    _InputBorderPainter: function _InputBorderPainter(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.borderAnimation = t0;
      _.border = t1;
      _.gapAnimation = t2;
      _.gap = t3;
      _.textDirection = t4;
      _.fillColor = t5;
      _.hoverColorTween = t6;
      _.hoverAnimation = t7;
      _._repaint = t8;
    },
    _BorderContainer: function _BorderContainer(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.border = t0;
      _.gap = t1;
      _.gapAnimation = t2;
      _.fillColor = t3;
      _.hoverColor = t4;
      _.isHovering = t5;
      _.key = t6;
    },
    _BorderContainerState: function _BorderContainerState(t0, t1) {
      var _ = this;
      _.___BorderContainerState__hoverColorTween_A = _.___BorderContainerState__hoverAnimation_A = _.___BorderContainerState__border_A = _.___BorderContainerState__borderAnimation_A = _.___BorderContainerState__hoverColorController_A = _.___BorderContainerState__controller_A = $;
      _.TickerProviderStateMixin__tickers = t0;
      _.TickerProviderStateMixin__tickerModeNotifier = t1;
      _._framework$_element = _._widget = null;
    },
    _HelperError: function _HelperError(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.textAlign = t0;
      _.helper = t1;
      _.helperText = t2;
      _.helperStyle = t3;
      _.helperMaxLines = t4;
      _.error = t5;
      _.errorText = t6;
      _.errorStyle = t7;
      _.errorMaxLines = t8;
      _.key = t9;
    },
    _HelperErrorState: function _HelperErrorState(t0, t1) {
      var _ = this;
      _.___HelperErrorState__controller_A = $;
      _._error = _._helper = null;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._framework$_element = _._widget = null;
    },
    _HelperErrorState__handleChange_closure: function _HelperErrorState__handleChange_closure() {
    },
    _DecorationSlot: function _DecorationSlot(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    _Decoration: function _Decoration(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20) {
      var _ = this;
      _.contentPadding = t0;
      _.isCollapsed = t1;
      _.floatingLabelHeight = t2;
      _.floatingLabelProgress = t3;
      _.floatingLabelAlignment = t4;
      _.border = t5;
      _.borderGap = t6;
      _.alignLabelWithHint = t7;
      _.isDense = t8;
      _.visualDensity = t9;
      _.icon = t10;
      _.input = t11;
      _.label = t12;
      _.hint = t13;
      _.prefix = t14;
      _.suffix = t15;
      _.prefixIcon = t16;
      _.suffixIcon = t17;
      _.helperError = t18;
      _.counter = t19;
      _.container = t20;
    },
    _RenderDecorationLayout: function _RenderDecorationLayout(t0, t1, t2, t3, t4) {
      var _ = this;
      _.inputConstraints = t0;
      _.baseline = t1;
      _.containerHeight = t2;
      _.subtextSize = t3;
      _.size = t4;
    },
    _RenderDecoration: function _RenderDecoration(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._input_decorator$_decoration = t0;
      _._input_decorator$_textDirection = t1;
      _._textBaseline = t2;
      _._textAlignVertical = t3;
      _._isFocused = t4;
      _._expands = t5;
      _._material3 = t6;
      _._labelTransform = null;
      _.SlottedContainerRenderObjectMixin__slotToChild = t7;
      _._layoutCacheStorage = t8;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t9;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    _RenderDecoration_performLayout_centerLayout: function _RenderDecoration_performLayout_centerLayout(t0) {
      this.height = t0;
    },
    _RenderDecoration_performLayout_baselineLayout: function _RenderDecoration_performLayout_baselineLayout(t0) {
      this.baseline = t0;
    },
    _RenderDecoration_paint_doPaint: function _RenderDecoration_paint_doPaint(t0, t1) {
      this.context = t0;
      this.offset = t1;
    },
    _RenderDecoration_hitTestChildren_closure: function _RenderDecoration_hitTestChildren_closure(t0) {
      this.child = t0;
    },
    _Decorator: function _Decorator(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.decoration = t0;
      _.textDirection = t1;
      _.textBaseline = t2;
      _.textAlignVertical = t3;
      _.isFocused = t4;
      _.expands = t5;
      _.key = t6;
    },
    InputDecorator: function InputDecorator(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.decoration = t0;
      _.baseStyle = t1;
      _.textAlign = t2;
      _.textAlignVertical = t3;
      _.isFocused = t4;
      _.isHovering = t5;
      _.expands = t6;
      _.isEmpty = t7;
      _.child = t8;
      _.key = t9;
    },
    _InputDecoratorState: function _InputDecoratorState(t0, t1, t2) {
      var _ = this;
      _.___InputDecoratorState__shakingLabelController_F = _.___InputDecoratorState__floatingLabelAnimation_F = _.___InputDecoratorState__floatingLabelController_F = $;
      _._borderGap = t0;
      _.___InputDecoratorState__suffixSemanticsSortOrder_FI = _.___InputDecoratorState__inputSemanticsSortOrder_FI = _.___InputDecoratorState__prefixSemanticsSortOrder_FI = $;
      _._input_decorator$_curvedAnimation = _._effectiveDecoration = null;
      _.TickerProviderStateMixin__tickers = t1;
      _.TickerProviderStateMixin__tickerModeNotifier = t2;
      _._framework$_element = _._widget = null;
    },
    _InputDecoratorState__handleChange_closure: function _InputDecoratorState__handleChange_closure() {
    },
    _InputDecoratorState_build_closure: function _InputDecoratorState_build_closure() {
    },
    InputDecoration: function InputDecoration(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53) {
      var _ = this;
      _.icon = t0;
      _.iconColor = t1;
      _.label = t2;
      _.labelText = t3;
      _.labelStyle = t4;
      _.floatingLabelStyle = t5;
      _.helper = t6;
      _.helperText = t7;
      _.helperStyle = t8;
      _.helperMaxLines = t9;
      _.hintText = t10;
      _.hintStyle = t11;
      _.hintTextDirection = t12;
      _.hintMaxLines = t13;
      _.hintFadeDuration = t14;
      _.maintainHintHeight = t15;
      _.error = t16;
      _.errorText = t17;
      _.errorStyle = t18;
      _.errorMaxLines = t19;
      _.floatingLabelBehavior = t20;
      _.floatingLabelAlignment = t21;
      _.isDense = t22;
      _.contentPadding = t23;
      _.isCollapsed = t24;
      _.prefixIcon = t25;
      _.prefixIconConstraints = t26;
      _.prefix = t27;
      _.prefixText = t28;
      _.prefixStyle = t29;
      _.prefixIconColor = t30;
      _.suffixIcon = t31;
      _.suffix = t32;
      _.suffixText = t33;
      _.suffixStyle = t34;
      _.suffixIconColor = t35;
      _.suffixIconConstraints = t36;
      _.counterText = t37;
      _.counter = t38;
      _.counterStyle = t39;
      _.filled = t40;
      _.fillColor = t41;
      _.focusColor = t42;
      _.hoverColor = t43;
      _.errorBorder = t44;
      _.focusedBorder = t45;
      _.focusedErrorBorder = t46;
      _.disabledBorder = t47;
      _.enabledBorder = t48;
      _.border = t49;
      _.enabled = t50;
      _.semanticCounterText = t51;
      _.alignLabelWithHint = t52;
      _.constraints = t53;
    },
    _InputDecoratorDefaultsM3: function _InputDecoratorDefaultsM3(t0) {
      this.context = t0;
      this.___InputDecoratorDefaultsM3__textTheme_FI = this.___InputDecoratorDefaultsM3__colors_FI = $;
    },
    _InputDecoratorDefaultsM3_hintStyle_closure: function _InputDecoratorDefaultsM3_hintStyle_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM3_fillColor_closure: function _InputDecoratorDefaultsM3_fillColor_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM3_activeIndicatorBorder_closure: function _InputDecoratorDefaultsM3_activeIndicatorBorder_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM3_outlineBorder_closure: function _InputDecoratorDefaultsM3_outlineBorder_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM3_prefixIconColor_closure: function _InputDecoratorDefaultsM3_prefixIconColor_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM3_suffixIconColor_closure: function _InputDecoratorDefaultsM3_suffixIconColor_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM3_labelStyle_closure: function _InputDecoratorDefaultsM3_labelStyle_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM3_floatingLabelStyle_closure: function _InputDecoratorDefaultsM3_floatingLabelStyle_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM3_helperStyle_closure: function _InputDecoratorDefaultsM3_helperStyle_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM3_errorStyle_closure: function _InputDecoratorDefaultsM3_errorStyle_closure(t0) {
      this.$this = t0;
    },
    __BorderContainerState_State_TickerProviderStateMixin: function __BorderContainerState_State_TickerProviderStateMixin() {
    },
    __HelperErrorState_State_SingleTickerProviderStateMixin: function __HelperErrorState_State_SingleTickerProviderStateMixin() {
    },
    __InputDecoratorState_State_TickerProviderStateMixin: function __InputDecoratorState_State_TickerProviderStateMixin() {
    },
    __RenderDecoration_RenderBox_SlottedContainerRenderObjectMixin: function __RenderDecoration_RenderBox_SlottedContainerRenderObjectMixin() {
    },
    TextMagnifier: function TextMagnifier(t0, t1) {
      this.magnifierInfo = t0;
      this.key = t1;
    },
    TextMagnifier_adaptiveMagnifierConfiguration_closure: function TextMagnifier_adaptiveMagnifierConfiguration_closure() {
    },
    _TextMagnifierState: function _TextMagnifierState(t0) {
      var _ = this;
      _._positionShouldBeAnimatedTimer = _._magnifierPosition = null;
      _._extraFocalPointOffset = t0;
      _._framework$_element = _._widget = null;
    },
    _TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure: function _TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure(t0) {
      this.$this = t0;
    },
    _TextMagnifierState__determineMagnifierPositionAndFocalPoint__closure: function _TextMagnifierState__determineMagnifierPositionAndFocalPoint__closure(t0) {
      this.$this = t0;
    },
    _TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure0: function _TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure0(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.finalMagnifierPosition = t2;
      _.focalPointAdjustmentForScreenBoundsAdjustment = t3;
    },
    Magnifier: function Magnifier(t0, t1) {
      this.additionalFocalPointOffset = t0;
      this.key = t1;
    },
    TextButton$(child, onPressed, style) {
      var _null = null;
      return new A.TextButton(onPressed, _null, _null, _null, style, _null, _null, false, _null, true, _null, child, _null);
    },
    _scaledPadding(context) {
      var t1 = B.Theme_of(context).textTheme.labelLarge,
        defaultFontSize = t1 == null ? null : t1.fontSize;
      if (defaultFontSize == null)
        defaultFontSize = 14;
      t1 = B.MediaQuery__maybeOf(context, C._MediaQueryAspect_4);
      t1 = t1 == null ? null : t1.get$textScaler();
      if (t1 == null)
        t1 = C._LinearTextScaler_1;
      return A.ButtonStyleButton_scaledPadding(D.EdgeInsets_12_8_12_8, D.EdgeInsets_8_0_8_0, D.EdgeInsets_4_0_4_0, defaultFontSize * t1.textScaleFactor / 14);
    },
    TextButton: function TextButton(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.onPressed = t0;
      _.onLongPress = t1;
      _.onHover = t2;
      _.onFocusChange = t3;
      _.style = t4;
      _.clipBehavior = t5;
      _.focusNode = t6;
      _.autofocus = t7;
      _.statesController = t8;
      _.isSemanticButton = t9;
      _.tooltip = t10;
      _.child = t11;
      _.key = t12;
    },
    _TextButtonDefaultsM3: function _TextButtonDefaultsM3(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25) {
      var _ = this;
      _.context = t0;
      _.___TextButtonDefaultsM3__colors_FI = $;
      _.textStyle = t1;
      _.backgroundColor = t2;
      _.foregroundColor = t3;
      _.overlayColor = t4;
      _.shadowColor = t5;
      _.surfaceTintColor = t6;
      _.elevation = t7;
      _.padding = t8;
      _.minimumSize = t9;
      _.fixedSize = t10;
      _.maximumSize = t11;
      _.iconColor = t12;
      _.iconSize = t13;
      _.iconAlignment = t14;
      _.side = t15;
      _.shape = t16;
      _.mouseCursor = t17;
      _.visualDensity = t18;
      _.tapTargetSize = t19;
      _.animationDuration = t20;
      _.enableFeedback = t21;
      _.alignment = t22;
      _.splashFactory = t23;
      _.backgroundBuilder = t24;
      _.foregroundBuilder = t25;
    },
    _TextButtonDefaultsM3_foregroundColor_closure: function _TextButtonDefaultsM3_foregroundColor_closure(t0) {
      this.$this = t0;
    },
    _TextButtonDefaultsM3_overlayColor_closure: function _TextButtonDefaultsM3_overlayColor_closure(t0) {
      this.$this = t0;
    },
    _TextButtonDefaultsM3_iconColor_closure: function _TextButtonDefaultsM3_iconColor_closure(t0) {
      this.$this = t0;
    },
    _TextButtonDefaultsM3_mouseCursor_closure: function _TextButtonDefaultsM3_mouseCursor_closure() {
    },
    TextField$(autocorrect, autofillHints, autofocus, buildCounter, canRequestFocus, clipBehavior, contentInsertionConfiguration, contextMenuBuilder, controller, cursorColor, cursorErrorColor, cursorHeight, cursorOpacityAnimates, cursorRadius, cursorWidth, decoration, dragStartBehavior, enableIMEPersonalizedLearning, enableInteractiveSelection, enableSuggestions, enabled, expands, focusNode, groupId, ignorePointers, inputFormatters, keyboardAppearance, keyboardType, magnifierConfiguration, maxLength, maxLengthEnforcement, maxLines, minLines, mouseCursor, obscureText, obscuringCharacter, onAppPrivateCommand, onChanged, onEditingComplete, onSubmitted, onTap, onTapAlwaysCalled, onTapOutside, onTapUpOutside, readOnly, restorationId, scribbleEnabled, scrollController, scrollPadding, scrollPhysics, selectionControls, selectionHeightStyle, selectionWidthStyle, showCursor, smartDashesType, smartQuotesType, spellCheckConfiguration, statesController, strutStyle, style, stylusHandwritingEnabled, textAlign, textAlignVertical, textCapitalization, textDirection, textInputAction, toolbarOptions, undoController) {
      var t1, t2, t3, t4;
      if (smartDashesType == null)
        t1 = obscureText ? D.SmartDashesType_0 : D.SmartDashesType_1;
      else
        t1 = smartDashesType;
      if (smartQuotesType == null)
        t2 = obscureText ? D.SmartQuotesType_0 : D.SmartQuotesType_1;
      else
        t2 = smartQuotesType;
      if (keyboardType == null)
        t3 = maxLines === 1 ? D.TextInputType_0_null_null : C.TextInputType_1_null_null;
      else
        t3 = keyboardType;
      if (enableInteractiveSelection == null)
        t4 = true;
      else
        t4 = enableInteractiveSelection;
      return new A.TextField(magnifierConfiguration, groupId, controller, focusNode, decoration, t3, textInputAction, textCapitalization, style, strutStyle, textAlign, textAlignVertical, textDirection, autofocus, statesController, obscuringCharacter, obscureText, true, t1, t2, true, maxLines, minLines, false, false, toolbarOptions, showCursor, maxLength, maxLengthEnforcement, onChanged, onEditingComplete, onSubmitted, onAppPrivateCommand, inputFormatters, enabled, ignorePointers, cursorWidth, cursorHeight, cursorRadius, cursorOpacityAnimates, cursorColor, cursorErrorColor, selectionHeightStyle, selectionWidthStyle, keyboardAppearance, scrollPadding, t4, selectionControls, dragStartBehavior, onTap, false, onTapOutside, onTapUpOutside, mouseCursor, buildCounter, scrollPhysics, scrollController, autofillHints, clipBehavior, restorationId, true, true, true, contentInsertionConfiguration, contextMenuBuilder, true, undoController, spellCheckConfiguration, null);
    },
    TextField__defaultContextMenuBuilder(context, editableTextState) {
      return A.AdaptiveTextSelectionToolbar$editableText(editableTextState);
    },
    TextField_inferAndroidSpellCheckConfiguration(configuration) {
      return D.SpellCheckConfiguration_asH;
    },
    _m3StateInputStyle(context) {
      return A._WidgetStateTextStyle$(new A._m3StateInputStyle_closure(context));
    },
    _TextFieldSelectionGestureDetectorBuilder: function _TextFieldSelectionGestureDetectorBuilder(t0, t1) {
      var _ = this;
      _._text_field$_state = t0;
      _.delegate = t1;
      _._shouldShowSelectionToolbar = true;
      _._isShiftPressed = false;
      _._dragStartViewportOffset = _._dragStartScrollOffset = 0;
      _._dragStartSelection = null;
      _._longPressStartedWithoutFocus = false;
    },
    TextField: function TextField(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68) {
      var _ = this;
      _.magnifierConfiguration = t0;
      _.groupId = t1;
      _.controller = t2;
      _.focusNode = t3;
      _.decoration = t4;
      _.keyboardType = t5;
      _.textInputAction = t6;
      _.textCapitalization = t7;
      _.style = t8;
      _.strutStyle = t9;
      _.textAlign = t10;
      _.textAlignVertical = t11;
      _.textDirection = t12;
      _.autofocus = t13;
      _.statesController = t14;
      _.obscuringCharacter = t15;
      _.obscureText = t16;
      _.autocorrect = t17;
      _.smartDashesType = t18;
      _.smartQuotesType = t19;
      _.enableSuggestions = t20;
      _.maxLines = t21;
      _.minLines = t22;
      _.expands = t23;
      _.readOnly = t24;
      _.toolbarOptions = t25;
      _.showCursor = t26;
      _.maxLength = t27;
      _.maxLengthEnforcement = t28;
      _.onChanged = t29;
      _.onEditingComplete = t30;
      _.onSubmitted = t31;
      _.onAppPrivateCommand = t32;
      _.inputFormatters = t33;
      _.enabled = t34;
      _.ignorePointers = t35;
      _.cursorWidth = t36;
      _.cursorHeight = t37;
      _.cursorRadius = t38;
      _.cursorOpacityAnimates = t39;
      _.cursorColor = t40;
      _.cursorErrorColor = t41;
      _.selectionHeightStyle = t42;
      _.selectionWidthStyle = t43;
      _.keyboardAppearance = t44;
      _.scrollPadding = t45;
      _.enableInteractiveSelection = t46;
      _.selectionControls = t47;
      _.dragStartBehavior = t48;
      _.onTap = t49;
      _.onTapAlwaysCalled = t50;
      _.onTapOutside = t51;
      _.onTapUpOutside = t52;
      _.mouseCursor = t53;
      _.buildCounter = t54;
      _.scrollPhysics = t55;
      _.scrollController = t56;
      _.autofillHints = t57;
      _.clipBehavior = t58;
      _.restorationId = t59;
      _.scribbleEnabled = t60;
      _.stylusHandwritingEnabled = t61;
      _.enableIMEPersonalizedLearning = t62;
      _.contentInsertionConfiguration = t63;
      _.contextMenuBuilder = t64;
      _.canRequestFocus = t65;
      _.undoController = t66;
      _.spellCheckConfiguration = t67;
      _.key = t68;
    },
    _TextFieldState: function _TextFieldState(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._focusNode = _._text_field$_controller = null;
      _._showSelectionHandles = _._text_field$_isHovering = false;
      _.___TextFieldState_forcePressEnabled_A = _.___TextFieldState__selectionGestureDetectorBuilder_A = $;
      _.editableTextKey = t0;
      _._internalStatesController = null;
      _.RestorationMixin__bucket = t1;
      _.RestorationMixin__properties = t2;
      _.RestorationMixin__debugPropertiesWaitingForReregistration = t3;
      _.RestorationMixin__firstRestorePending = t4;
      _.RestorationMixin__currentParent = t5;
      _._framework$_element = _._widget = null;
    },
    _TextFieldState__handleFocusChanged_closure: function _TextFieldState__handleFocusChanged_closure() {
    },
    _TextFieldState__handleSelectionChanged_closure: function _TextFieldState__handleSelectionChanged_closure(t0, t1) {
      this.$this = t0;
      this.willShowSelectionHandles = t1;
    },
    _TextFieldState__handleHover_closure: function _TextFieldState__handleHover_closure(t0, t1) {
      this.$this = t0;
      this.hovering = t1;
    },
    _TextFieldState__handleStatesControllerChange_closure: function _TextFieldState__handleStatesControllerChange_closure() {
    },
    _TextFieldState_build_closure: function _TextFieldState_build_closure(t0) {
      this.$this = t0;
    },
    _TextFieldState_build_closure0: function _TextFieldState_build_closure0(t0) {
      this.$this = t0;
    },
    _TextFieldState_build_closure1: function _TextFieldState_build_closure1(t0) {
      this.$this = t0;
    },
    _TextFieldState_build_closure2: function _TextFieldState_build_closure2(t0) {
      this.$this = t0;
    },
    _TextFieldState_build_closure3: function _TextFieldState_build_closure3(t0) {
      this.$this = t0;
    },
    _TextFieldState_build_closure4: function _TextFieldState_build_closure4(t0) {
      this.$this = t0;
    },
    _TextFieldState_build_closure5: function _TextFieldState_build_closure5(t0, t1, t2) {
      this.$this = t0;
      this.focusNode = t1;
      this.controller = t2;
    },
    _TextFieldState_build_closure7: function _TextFieldState_build_closure7(t0) {
      this.$this = t0;
    },
    _TextFieldState_build_closure8: function _TextFieldState_build_closure8(t0) {
      this.$this = t0;
    },
    _TextFieldState_build_closure6: function _TextFieldState_build_closure6(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _TextFieldState_build__closure0: function _TextFieldState_build__closure0(t0) {
      this.$this = t0;
    },
    _TextFieldState_build__closure: function _TextFieldState_build__closure(t0) {
      this.$this = t0;
    },
    _m3StateInputStyle_closure: function _m3StateInputStyle_closure(t0) {
      this.context = t0;
    },
    __TextFieldState_State_RestorationMixin_dispose_closure: function __TextFieldState_State_RestorationMixin_dispose_closure() {
    },
    __TextFieldState_State_RestorationMixin: function __TextFieldState_State_RestorationMixin() {
    },
    MaterialTextSelectionHandleControls: function MaterialTextSelectionHandleControls() {
    },
    MaterialTextSelectionControls: function MaterialTextSelectionControls() {
    },
    _TextSelectionHandlePainter: function _TextSelectionHandlePainter(t0, t1) {
      this.color = t0;
      this._repaint = t1;
    },
    _MaterialTextSelectionHandleControls_MaterialTextSelectionControls_TextSelectionHandleControls: function _MaterialTextSelectionHandleControls_MaterialTextSelectionControls_TextSelectionHandleControls() {
    },
    TextSelectionToolbar$(anchorAbove, anchorBelow, children) {
      return new A.TextSelectionToolbar(anchorAbove, anchorBelow, children, null);
    },
    TextSelectionToolbar__defaultToolbarBuilder(context, child) {
      return new A._TextSelectionToolbarContainer(child, null);
    },
    _TextSelectionToolbarContainer__getColor(colorScheme) {
      var t2, _null = null,
        t1 = colorScheme.brightness.index;
      switch (t1) {
        case 1:
          t2 = B.ThemeData_ThemeData(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null).colorScheme.surface === colorScheme.surface;
          break;
        case 0:
          t2 = B.ThemeData_ThemeData(_null, C.Brightness_0, _null, _null, _null, _null, _null, _null, _null, _null).colorScheme.surface === colorScheme.surface;
          break;
        default:
          t2 = _null;
      }
      if (!t2)
        return colorScheme.surface;
      switch (t1) {
        case 1:
          t1 = C.Color_wst;
          break;
        case 0:
          t1 = C.Color_MCJ;
          break;
        default:
          t1 = _null;
      }
      return t1;
    },
    TextSelectionToolbar: function TextSelectionToolbar(t0, t1, t2, t3) {
      var _ = this;
      _.anchorAbove = t0;
      _.anchorBelow = t1;
      _.children = t2;
      _.key = t3;
    },
    _TextSelectionToolbarOverflowable: function _TextSelectionToolbarOverflowable(t0, t1, t2, t3) {
      var _ = this;
      _.children = t0;
      _.isAbove = t1;
      _.toolbarBuilder = t2;
      _.key = t3;
    },
    _TextSelectionToolbarOverflowableState: function _TextSelectionToolbarOverflowableState(t0, t1, t2) {
      var _ = this;
      _._overflowOpen = false;
      _._containerKey = t0;
      _.TickerProviderStateMixin__tickers = t1;
      _.TickerProviderStateMixin__tickerModeNotifier = t2;
      _._framework$_element = _._widget = null;
    },
    _TextSelectionToolbarOverflowableState_build_closure: function _TextSelectionToolbarOverflowableState_build_closure(t0) {
      this.$this = t0;
    },
    _TextSelectionToolbarOverflowableState_build__closure: function _TextSelectionToolbarOverflowableState_build__closure(t0) {
      this.$this = t0;
    },
    _TextSelectionToolbarTrailingEdgeAlign: function _TextSelectionToolbarTrailingEdgeAlign(t0, t1, t2, t3) {
      var _ = this;
      _.overflowOpen = t0;
      _.textDirection = t1;
      _.child = t2;
      _.key = t3;
    },
    _TextSelectionToolbarTrailingEdgeAlignRenderBox: function _TextSelectionToolbarTrailingEdgeAlignRenderBox(t0, t1, t2, t3, t4) {
      var _ = this;
      _._closedWidth = null;
      _._overflowOpen = t0;
      _._text_selection_toolbar$_textDirection = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _._layoutCacheStorage = t3;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t4;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    _TextSelectionToolbarTrailingEdgeAlignRenderBox_hitTestChildren_closure: function _TextSelectionToolbarTrailingEdgeAlignRenderBox_hitTestChildren_closure(t0) {
      this.$this = t0;
    },
    _TextSelectionToolbarItemsLayout: function _TextSelectionToolbarItemsLayout(t0, t1, t2, t3) {
      var _ = this;
      _.isAbove = t0;
      _.overflowOpen = t1;
      _.children = t2;
      _.key = t3;
    },
    _TextSelectionToolbarItemsLayoutElement: function _TextSelectionToolbarItemsLayoutElement(t0, t1, t2) {
      var _ = this;
      _.__MultiChildRenderObjectElement__children_A = $;
      _._forgottenChildren = t0;
      _._slot = _._notificationTree = _._framework$_parent = _._ancestorRenderObjectElement = _._renderObject = null;
      _.__Element__depth_A = $;
      _._widget = t1;
      _._parentBuildScope = _._framework$_owner = null;
      _._lifecycleState = t2;
      _._dependencies = _._inheritedElements = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._inDirtyList = false;
    },
    _RenderTextSelectionToolbarItemsLayout: function _RenderTextSelectionToolbarItemsLayout(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._lastIndexThatFits = -1;
      _._isAbove = t0;
      _._overflowOpen = t1;
      _.ContainerRenderObjectMixin__childCount = t2;
      _.ContainerRenderObjectMixin__firstChild = t3;
      _.ContainerRenderObjectMixin__lastChild = t4;
      _._layoutCacheStorage = t5;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t6;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    _RenderTextSelectionToolbarItemsLayout__layoutChildren_closure: function _RenderTextSelectionToolbarItemsLayout__layoutChildren_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.sizedConstraints = t2;
    },
    _RenderTextSelectionToolbarItemsLayout__placeChildren_closure: function _RenderTextSelectionToolbarItemsLayout__placeChildren_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.navButton = t2;
    },
    _RenderTextSelectionToolbarItemsLayout__resizeChildrenWhenOverflow_closure: function _RenderTextSelectionToolbarItemsLayout__resizeChildrenWhenOverflow_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.navButton = t2;
    },
    _RenderTextSelectionToolbarItemsLayout_paint_closure: function _RenderTextSelectionToolbarItemsLayout_paint_closure(t0, t1) {
      this.context = t0;
      this.offset = t1;
    },
    _RenderTextSelectionToolbarItemsLayout_hitTestChildren_closure: function _RenderTextSelectionToolbarItemsLayout_hitTestChildren_closure(t0) {
      this._box_0 = t0;
    },
    _RenderTextSelectionToolbarItemsLayout_visitChildrenForSemantics_closure: function _RenderTextSelectionToolbarItemsLayout_visitChildrenForSemantics_closure(t0) {
      this.visitor = t0;
    },
    _TextSelectionToolbarContainer: function _TextSelectionToolbarContainer(t0, t1) {
      this.child = t0;
      this.key = t1;
    },
    _TextSelectionToolbarOverflowButton: function _TextSelectionToolbarOverflowButton(t0, t1, t2, t3) {
      var _ = this;
      _.icon = t0;
      _.onPressed = t1;
      _.tooltip = t2;
      _.key = t3;
    },
    __RenderTextSelectionToolbarItemsLayout_RenderBox_ContainerRenderObjectMixin: function __RenderTextSelectionToolbarItemsLayout_RenderBox_ContainerRenderObjectMixin() {
    },
    __TextSelectionToolbarOverflowableState_State_TickerProviderStateMixin: function __TextSelectionToolbarOverflowableState_State_TickerProviderStateMixin() {
    },
    TextSelectionToolbarTextButton__getLeftPadding(position) {
      if (position === D._TextSelectionToolbarItemPosition_0 || position === D._TextSelectionToolbarItemPosition_3)
        return 14.5;
      return 9.5;
    },
    TextSelectionToolbarTextButton__getRightPadding(position) {
      if (position === D._TextSelectionToolbarItemPosition_2 || position === D._TextSelectionToolbarItemPosition_3)
        return 14.5;
      return 9.5;
    },
    TextSelectionToolbarTextButton__getPosition(index, total) {
      if (index === 0)
        return total === 1 ? D._TextSelectionToolbarItemPosition_3 : D._TextSelectionToolbarItemPosition_0;
      if (index === total - 1)
        return D._TextSelectionToolbarItemPosition_2;
      return D._TextSelectionToolbarItemPosition_1;
    },
    TextSelectionToolbarTextButton__getForegroundColor(colorScheme) {
      var t2, _null = null,
        t1 = colorScheme.brightness.index;
      switch (t1) {
        case 1:
          t2 = B.ThemeData_ThemeData(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null).colorScheme.onSurface === colorScheme.onSurface;
          break;
        case 0:
          t2 = B.ThemeData_ThemeData(_null, C.Brightness_0, _null, _null, _null, _null, _null, _null, _null, _null).colorScheme.onSurface === colorScheme.onSurface;
          break;
        default:
          t2 = _null;
      }
      if (!t2)
        return colorScheme.onSurface;
      switch (t1) {
        case 1:
          t1 = C.Color_vnR;
          break;
        case 0:
          t1 = C.Color_wst;
          break;
        default:
          t1 = _null;
      }
      return t1;
    },
    _TextSelectionToolbarItemPosition: function _TextSelectionToolbarItemPosition(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TextSelectionToolbarTextButton: function TextSelectionToolbarTextButton(t0, t1, t2, t3, t4) {
      var _ = this;
      _.child = t0;
      _.onPressed = t1;
      _.padding = t2;
      _.alignment = t3;
      _.key = t4;
    },
    TextAlignVertical: function TextAlignVertical(t0) {
      this.y = t0;
    },
    PlaceholderSpan: function PlaceholderSpan() {
    },
    ShapeDecoration_ShapeDecoration$fromBoxDecoration(source) {
      var t1, shape, t2;
      switch (source.shape.index) {
        case 1:
          t1 = source.border;
          shape = t1 != null ? new B.CircleBorder(0, t1.get$top()) : C.CircleBorder_oSW;
          break;
        case 0:
          t1 = source.borderRadius;
          shape = source.border;
          if (t1 != null) {
            t2 = shape == null ? null : shape.get$top();
            shape = new B.RoundedRectangleBorder(t1, t2 == null ? C.BorderSide_Ah5 : t2);
          } else if (shape == null)
            shape = D.Border_pk4;
          break;
        default:
          shape = null;
      }
      return new A.ShapeDecoration(source.color, source.gradient, source.image, source.boxShadow, shape);
    },
    ShapeDecoration_lerp(a, b, t) {
      var t1, t2, t3, t4, t5, t6, _null = null;
      if (a == b)
        return a;
      t1 = a == null;
      if (!t1 && b != null) {
        if (t === 0)
          return a;
        if (t === 1)
          return b;
      }
      t2 = t1 ? _null : a.color;
      t3 = b == null;
      t2 = B.Color_lerp(t2, t3 ? _null : b.color, t);
      t4 = t1 ? _null : a.gradient;
      t4 = B.Gradient_lerp(t4, t3 ? _null : b.gradient, t);
      t5 = t1 ? _null : a.image;
      t5 = B.DecorationImage_lerp(t5, t3 ? _null : b.image, t);
      t6 = t1 ? _null : a.shadows;
      t6 = B.BoxShadow_lerpList(t6, t3 ? _null : b.shadows, t);
      t1 = t1 ? _null : a.shape;
      t1 = B.ShapeBorder_lerp(t1, t3 ? _null : b.shape, t);
      t1.toString;
      return new A.ShapeDecoration(t2, t4, t5, t6, t1);
    },
    ShapeDecoration: function ShapeDecoration(t0, t1, t2, t3, t4) {
      var _ = this;
      _.color = t0;
      _.gradient = t1;
      _.image = t2;
      _.shadows = t3;
      _.shape = t4;
    },
    _ShapeDecorationPainter: function _ShapeDecorationPainter(t0, t1) {
      var _ = this;
      _._shape_decoration$_decoration = t0;
      _._lastTextDirection = _._lastRect = null;
      _.___ShapeDecorationPainter__outerPath_A = $;
      _._shadowCount = _._interiorPaint = _._innerPath = null;
      _.___ShapeDecorationPainter__shadowPaints_A = _.___ShapeDecorationPainter__shadowPaths_A = _.___ShapeDecorationPainter__shadowBounds_A = $;
      _._imagePainter = null;
      _.onChanged = t1;
    },
    _ShapeDecorationPainter__precache_closure: function _ShapeDecorationPainter__precache_closure() {
    },
    _ShapeDecorationPainter__precache_closure0: function _ShapeDecorationPainter__precache_closure0(t0) {
      this.rect = t0;
    },
    _ShapeDecorationPainter__precache_closure1: function _ShapeDecorationPainter__precache_closure1(t0, t1, t2) {
      this.$this = t0;
      this.rect = t1;
      this.textDirection = t2;
    },
    RenderAnimatedSize$(alignment, clipBehavior, curve, duration, onEnd, reverseDuration, textDirection, vsync) {
      var _null = null,
        t1 = new A.RenderAnimatedSize(new A.SizeTween(_null, _null), D.RenderAnimatedSizeState_0, clipBehavior, vsync, B.LayerHandle$(), alignment, textDirection, _null, new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      t1.set$child(_null);
      t1.RenderAnimatedSize$9$alignment$child$clipBehavior$curve$duration$onEnd$reverseDuration$textDirection$vsync(alignment, _null, clipBehavior, curve, duration, onEnd, reverseDuration, textDirection, vsync);
      return t1;
    },
    RenderAnimatedSizeState: function RenderAnimatedSizeState(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    RenderAnimatedSize: function RenderAnimatedSize(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.__RenderAnimatedSize__animation_F = _.__RenderAnimatedSize__controller_F = $;
      _._sizeTween = t0;
      _.__RenderAnimatedSize__hasVisualOverflow_A = $;
      _._animated_size$_lastValue = null;
      _._animated_size$_state = t1;
      _._animated_size$_clipBehavior = t2;
      _._vsync = t3;
      _._onEnd = null;
      _._animated_size$_clipRectLayer = t4;
      _._resolvedAlignment = null;
      _._shifted_box$_alignment = t5;
      _._shifted_box$_textDirection = t6;
      _.RenderObjectWithChildMixin__child = t7;
      _._layoutCacheStorage = t8;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t9;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    RenderAnimatedSize_closure: function RenderAnimatedSize_closure(t0) {
      this.$this = t0;
    },
    RenderEditable__calculateAdjustedCursorOffset(offset, boundingRects) {
      return new B.Offset(B.clampDouble(offset._dx, boundingRects.left, boundingRects.right), B.clampDouble(offset._dy, boundingRects.top, boundingRects.bottom));
    },
    _RenderEditableCustomPaint$(painter) {
      var t1 = new A._RenderEditableCustomPaint(painter, new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      return t1;
    },
    _TextHighlightPainter$() {
      return new A._TextHighlightPainter($.$get$_renderer().createPaint$0(), C.BoxHeightStyle_0, C.BoxWidthStyle_0, $.$get$ChangeNotifier__emptyListeners());
    },
    TextSelectionPoint: function TextSelectionPoint(t0, t1) {
      this.point = t0;
      this.direction = t1;
    },
    VerticalCaretMovementRun: function VerticalCaretMovementRun(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._currentOffset = t0;
      _._editable$_currentLine = t1;
      _._currentTextPosition = t2;
      _._lineMetrics = t3;
      _._editable = t4;
      _._isValid = true;
      _._positionCache = t5;
    },
    RenderEditable: function RenderEditable(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35) {
      var _ = this;
      _._editable$_painter = _._editable$_foregroundPainter = _._backgroundRenderObject = _._foregroundRenderObject = null;
      _.__RenderEditable__caretPainter_FI = $;
      _._selectionPainter = t0;
      _._autocorrectHighlightPainter = t1;
      _._cachedBuiltInPainters = _._cachedBuiltInForegroundPainters = null;
      _.ignorePointer = t2;
      _._devicePixelRatio = t3;
      _._obscuringCharacter = t4;
      _._obscureText = t5;
      _.textSelectionDelegate = t6;
      _._selectionStartInViewport = t7;
      _._selectionEndInViewport = t8;
      _._editable$_textPainter = t9;
      _._textIntrinsicsCache = _._editable$_cachedCombinedSemanticsInfos = _._cachedAttributedValue = null;
      _._disposeShowCursor = t10;
      _._showCursor = t11;
      _._editable$_hasFocus = t12;
      _._forceLine = t13;
      _._readOnly = t14;
      _._editable$_maxLines = t15;
      _._minLines = t16;
      _._editable$_expands = t17;
      _._selection = t18;
      _._editable$_offset = t19;
      _._cursorWidth = t20;
      _._cursorHeight = t21;
      _._paintCursorOnTop = t22;
      _._editable$_startHandleLayerLink = t23;
      _._editable$_endHandleLayerLink = t24;
      _._floatingCursorOn = false;
      _.__RenderEditable__floatingCursorTextPosition_A = $;
      _._enableInteractiveSelection = t25;
      _._editable$_maxScrollExtent = 0;
      _._editable$_clipBehavior = t26;
      _._cachedLineBreakCount = _._editable$_cachedChildNodes = _._editable$_semanticsInfo = null;
      _.__RenderEditable__longPress_A = _.__RenderEditable__tap_A = $;
      _._editable$_placeholderDimensions = _._lastSecondaryTapDownPosition = _._lastTapDownPosition = null;
      _.__RenderEditable__caretPrototype_A = $;
      _._relativeOrigin = t27;
      _._previousOffset = null;
      _._shouldResetOrigin = true;
      _._resetOriginOnBottom = _._resetOriginOnTop = _._resetOriginOnRight = _._resetOriginOnLeft = false;
      _._resetFloatingCursorAnimationValue = null;
      _._leaderLayerHandler = t28;
      _._editable$_clipRectLayer = t29;
      _.ContainerRenderObjectMixin__childCount = t30;
      _.ContainerRenderObjectMixin__firstChild = t31;
      _.ContainerRenderObjectMixin__lastChild = t32;
      _.RelayoutWhenSystemFontsChangeMixin__hasPendingSystemFontsDidChangeCallBack = t33;
      _._layoutCacheStorage = t34;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t35;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    RenderEditable_getBoxesForSelection_closure: function RenderEditable_getBoxesForSelection_closure(t0) {
      this.$this = t0;
    },
    RenderEditable_describeSemanticsConfiguration_closure: function RenderEditable_describeSemanticsConfiguration_closure() {
    },
    RenderEditable__createShowOnScreenFor_closure: function RenderEditable__createShowOnScreenFor_closure(t0, t1) {
      this.$this = t0;
      this.key = t1;
    },
    RenderEditable_getRectForComposingRange_closure: function RenderEditable_getRectForComposingRange_closure() {
    },
    RenderEditable_computeMinIntrinsicWidth_closure: function RenderEditable_computeMinIntrinsicWidth_closure() {
    },
    RenderEditable_computeMaxIntrinsicWidth_closure: function RenderEditable_computeMaxIntrinsicWidth_closure() {
    },
    _RenderEditableCustomPaint: function _RenderEditableCustomPaint(t0, t1, t2) {
      var _ = this;
      _._editable$_painter = t0;
      _._layoutCacheStorage = t1;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t2;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    RenderEditablePainter: function RenderEditablePainter() {
    },
    _TextHighlightPainter: function _TextHighlightPainter(t0, t1, t2, t3) {
      var _ = this;
      _.highlightPaint = t0;
      _._highlightedRange = _._editable$_highlightColor = null;
      _._selectionHeightStyle = t1;
      _._selectionWidthStyle = t2;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t3;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    },
    _CaretPainter: function _CaretPainter(t0, t1, t2) {
      var _ = this;
      _._shouldPaint = true;
      _.showRegularCaret = false;
      _.caretPaint = t0;
      _.___CaretPainter_floatingCursorPaint_FI = $;
      _._cursorRadius = _._caretColor = null;
      _._cursorOffset = t1;
      _._floatingCursorRect = _._backgroundCursorColor = null;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t2;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    },
    _CompositeRenderEditablePainter: function _CompositeRenderEditablePainter(t0, t1) {
      var _ = this;
      _.painters = t0;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t1;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    },
    _RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin: function _RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin() {
    },
    _RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin: function _RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin() {
    },
    _RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin_RenderInlineChildrenContainerDefaults: function _RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin_RenderInlineChildrenContainerDefaults() {
    },
    FollowerLayer__collectTransformForLayerChain(layers) {
      var index, t1,
        result = new B.Matrix40(new Float64Array(16));
      result.setIdentity$0();
      for (index = layers.length - 1; index > 0; --index) {
        t1 = layers[index];
        if (t1 != null)
          t1.applyTransform$2(layers[index - 1], result);
      }
      return result;
    },
    FollowerLayer__pathsToCommonAncestor(a, b, ancestorsA, ancestorsB) {
      var t1, t2;
      if (a == null || b == null)
        return null;
      if (a === b)
        return a;
      t1 = a._layer$_depth;
      t2 = b._layer$_depth;
      if (t1 < t2) {
        ancestorsB.push(b._layer$_parent);
        return A.FollowerLayer__pathsToCommonAncestor(a, b._layer$_parent, ancestorsA, ancestorsB);
      } else if (t1 > t2) {
        ancestorsA.push(a._layer$_parent);
        return A.FollowerLayer__pathsToCommonAncestor(a._layer$_parent, b, ancestorsA, ancestorsB);
      }
      ancestorsA.push(a._layer$_parent);
      ancestorsB.push(b._layer$_parent);
      return A.FollowerLayer__pathsToCommonAncestor(a._layer$_parent, b._layer$_parent, ancestorsA, ancestorsB);
    },
    LayerLink: function LayerLink() {
      this.leaderSize = this._leader = null;
    },
    FollowerLayer: function FollowerLayer(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.link = t0;
      _.showWhenUnlinked = t1;
      _.unlinkedOffset = t2;
      _.linkedOffset = t3;
      _._invertedTransform = _._layer$_lastTransform = _._lastOffset = null;
      _._inverseDirty = true;
      _._lastChild = _._firstChild = null;
      _._layer$_callbacks = t4;
      _._compositionCallbackCount = 0;
      _._parentHandle = t5;
      _._layer$_refCount = 0;
      _._layer$_parent = null;
      _._needsAddToScene = true;
      _._layer$_owner = _._engineLayer = null;
      _._layer$_depth = 0;
      _._previousSibling = _._nextSibling = null;
    },
    RenderLeaderLayer: function RenderLeaderLayer(t0, t1, t2, t3) {
      var _ = this;
      _._proxy_box$_link = t0;
      _._previousLayoutSize = null;
      _.RenderObjectWithChildMixin__child = t1;
      _._layoutCacheStorage = t2;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t3;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    RenderFollowerLayer: function RenderFollowerLayer(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._proxy_box$_link = t0;
      _._showWhenUnlinked = t1;
      _._proxy_box$_offset = t2;
      _._leaderAnchor = t3;
      _._followerAnchor = t4;
      _.RenderObjectWithChildMixin__child = t5;
      _._layoutCacheStorage = t6;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t7;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    RenderFollowerLayer_hitTestChildren_closure: function RenderFollowerLayer_hitTestChildren_closure(t0) {
      this.$this = t0;
    },
    AutofillConfiguration: function AutofillConfiguration(t0, t1, t2, t3, t4) {
      var _ = this;
      _.enabled = t0;
      _.uniqueIdentifier = t1;
      _.autofillHints = t2;
      _.currentEditingValue = t3;
      _.hintText = t4;
    },
    BrowserContextMenu: function BrowserContextMenu() {
    },
    Clipboard_setData(data) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void);
      var $async$Clipboard_setData = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return B._asyncAwait(C.OptionalMethodChannel_ZFR.invokeMethod$1$2("Clipboard.setData", B.LinkedHashMap_LinkedHashMap$_literal(["text", data.text], type$.String, type$.dynamic), type$.void), $async$Clipboard_setData);
            case 2:
              // returning from await.
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$Clipboard_setData, $async$completer);
    },
    Clipboard_getData(format) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.nullable_ClipboardData),
        $async$returnValue, result;
      var $async$Clipboard_getData = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return B._asyncAwait(C.OptionalMethodChannel_ZFR.invokeMethod$1$2("Clipboard.getData", format, type$.Map_String_dynamic), $async$Clipboard_getData);
            case 3:
              // returning from await.
              result = $async$result;
              if (result == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = new A.ClipboardData(B._asString(result.$index(0, "text")));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$Clipboard_getData, $async$completer);
    },
    ClipboardData: function ClipboardData(t0) {
      this.text = t0;
    },
    ProcessTextAction: function ProcessTextAction(t0, t1) {
      this.id = t0;
      this.label = t1;
    },
    DefaultProcessTextService: function DefaultProcessTextService() {
      this.__DefaultProcessTextService__processTextChannel_A = $;
    },
    DefaultSpellCheckService_mergeResults(oldResults, newResults) {
      var oldSpan, newSpan, t2, t3,
        mergedResults = B._setArrayType([], type$.JSArray_SuggestionSpan),
        t1 = J.getInterceptor$asx(oldResults),
        oldSpanPointer = 0, newSpanPointer = 0;
      while (true) {
        if (!(oldSpanPointer < t1.get$length(oldResults) && newSpanPointer < newResults.length))
          break;
        oldSpan = t1.$index(oldResults, oldSpanPointer);
        newSpan = newResults[newSpanPointer];
        t2 = oldSpan.range.start;
        t3 = newSpan.range.start;
        if (t2 === t3) {
          mergedResults.push(oldSpan);
          ++oldSpanPointer;
          ++newSpanPointer;
        } else if (t2 < t3) {
          mergedResults.push(oldSpan);
          ++oldSpanPointer;
        } else {
          mergedResults.push(newSpan);
          ++newSpanPointer;
        }
      }
      C.JSArray_methods.addAll$1(mergedResults, t1.sublist$1(oldResults, oldSpanPointer));
      C.JSArray_methods.addAll$1(mergedResults, C.JSArray_methods.sublist$1(newResults, newSpanPointer));
      return mergedResults;
    },
    SuggestionSpan: function SuggestionSpan(t0, t1) {
      this.range = t0;
      this.suggestions = t1;
    },
    SpellCheckResults: function SpellCheckResults(t0, t1) {
      this.spellCheckedText = t0;
      this.suggestionSpans = t1;
    },
    DefaultSpellCheckService: function DefaultSpellCheckService() {
      this.lastSavedResults = null;
      this.__DefaultSpellCheckService_spellCheckChannel_A = $;
    },
    MaxLengthEnforcement: function MaxLengthEnforcement(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TextInputFormatter: function TextInputFormatter() {
    },
    _MutableTextRange: function _MutableTextRange(t0, t1) {
      this.base = t0;
      this.extent = t1;
    },
    _TextEditingValueAccumulator: function _TextEditingValueAccumulator(t0, t1, t2, t3) {
      var _ = this;
      _.inputValue = t0;
      _.stringBuffer = t1;
      _.selection = t2;
      _.composingRegion = t3;
    },
    FilteringTextInputFormatter: function FilteringTextInputFormatter(t0, t1, t2) {
      this.filterPattern = t0;
      this.allow = t1;
      this.replacementString = t2;
    },
    FilteringTextInputFormatter__processRegion_adjustIndex: function FilteringTextInputFormatter__processRegion_adjustIndex(t0, t1, t2) {
      this.regionStart = t0;
      this.regionEnd = t1;
      this.replacementString = t2;
    },
    TextInputConfiguration$(allowedMimeTypes, autocorrect, autofillConfiguration, enableDeltaModel, enableIMEPersonalizedLearning, enableInteractiveSelection, enableSuggestions, inputAction, inputType, keyboardAppearance, obscureText, readOnly, smartDashesType, smartQuotesType, textCapitalization, viewId) {
      return new A.TextInputConfiguration(viewId, inputType, readOnly, obscureText, true, autofillConfiguration, smartDashesType, smartQuotesType, true, enableInteractiveSelection, inputAction, textCapitalization, keyboardAppearance, true, allowedMimeTypes, false);
    },
    TextInputConnection$_(_client) {
      var t1 = B._setArrayType([], type$.JSArray_SelectionRect),
        t2 = $.TextInputConnection__nextId;
      $.TextInputConnection__nextId = t2 + 1;
      return new A.TextInputConnection(t1, t2, _client);
    },
    SmartDashesType: function SmartDashesType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    SmartQuotesType: function SmartQuotesType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TextCapitalization0: function TextCapitalization0(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TextInputConfiguration: function TextInputConfiguration(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15) {
      var _ = this;
      _.viewId = t0;
      _.inputType = t1;
      _.readOnly = t2;
      _.obscureText = t3;
      _.autocorrect = t4;
      _.autofillConfiguration = t5;
      _.smartDashesType = t6;
      _.smartQuotesType = t7;
      _.enableSuggestions = t8;
      _.enableInteractiveSelection = t9;
      _.inputAction = t10;
      _.textCapitalization = t11;
      _.keyboardAppearance = t12;
      _.enableIMEPersonalizedLearning = t13;
      _.allowedMimeTypes = t14;
      _.enableDeltaModel = t15;
    },
    TextSelectionDelegate: function TextSelectionDelegate() {
    },
    TextInputClient: function TextInputClient() {
    },
    SelectionRect: function SelectionRect(t0, t1, t2) {
      this.position = t0;
      this.bounds = t1;
      this.direction = t2;
    },
    TextInputConnection: function TextInputConnection(t0, t1, t2) {
      var _ = this;
      _._cachedCaretRect = _._text_input$_cachedRect = _._cachedTransform = _._cachedSize = null;
      _._cachedSelectionRects = t0;
      _._id = t1;
      _._client = t2;
    },
    UndoDirection: function UndoDirection(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    UndoManager: function UndoManager() {
      this.__UndoManager__channel_A = $;
      this._currentClient = null;
    },
    UndoManagerClient: function UndoManagerClient() {
    },
    Actions_invoke(context, intent, $T) {
      var t1 = {};
      t1.returnValue = null;
      B.Actions__visitActionsAncestors(context, new A.Actions_invoke_closure(t1, intent, context, $T));
      return t1.returnValue;
    },
    Actions_invoke_closure: function Actions_invoke_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.intent = t1;
      _.context = t2;
      _.T = t3;
    },
    FocusableActionDetector: function FocusableActionDetector(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.enabled = t0;
      _.focusNode = t1;
      _.autofocus = t2;
      _.actions = t3;
      _.onShowFocusHighlight = t4;
      _.onFocusChange = t5;
      _.child = t6;
      _.key = t7;
    },
    _FocusableActionDetectorState: function _FocusableActionDetectorState(t0) {
      var _ = this;
      _._focused = _._hovering = _._canShowHighlight = false;
      _._mouseRegionKey = t0;
      _._framework$_element = _._widget = null;
    },
    _FocusableActionDetectorState_initState_closure: function _FocusableActionDetectorState_initState_closure(t0) {
      this.$this = t0;
    },
    _FocusableActionDetectorState__updateHighlightMode_closure: function _FocusableActionDetectorState__updateHighlightMode_closure(t0) {
      this.$this = t0;
    },
    _FocusableActionDetectorState__handleMouseEnter_closure: function _FocusableActionDetectorState__handleMouseEnter_closure(t0) {
      this.$this = t0;
    },
    _FocusableActionDetectorState__handleMouseExit_closure: function _FocusableActionDetectorState__handleMouseExit_closure(t0) {
      this.$this = t0;
    },
    _FocusableActionDetectorState__handleFocusChange_closure: function _FocusableActionDetectorState__handleFocusChange_closure(t0, t1) {
      this.$this = t0;
      this.focused = t1;
    },
    _FocusableActionDetectorState__mayTriggerCallback_shouldShowHoverHighlight: function _FocusableActionDetectorState__mayTriggerCallback_shouldShowHoverHighlight(t0) {
      this.$this = t0;
    },
    _FocusableActionDetectorState__mayTriggerCallback_canRequestFocus: function _FocusableActionDetectorState__mayTriggerCallback_canRequestFocus(t0) {
      this.$this = t0;
    },
    _FocusableActionDetectorState__mayTriggerCallback_shouldShowFocusHighlight: function _FocusableActionDetectorState__mayTriggerCallback_shouldShowFocusHighlight(t0, t1) {
      this.$this = t0;
      this.canRequestFocus = t1;
    },
    _FocusableActionDetectorState_didUpdateWidget_closure: function _FocusableActionDetectorState_didUpdateWidget_closure(t0, t1) {
      this.$this = t0;
      this.oldWidget = t1;
    },
    AnimatedSize$(child, curve, duration) {
      return new A.AnimatedSize(child, curve, duration, null);
    },
    AnimatedSize: function AnimatedSize(t0, t1, t2, t3) {
      var _ = this;
      _.child = t0;
      _.curve = t1;
      _.duration = t2;
      _.key = t3;
    },
    _AnimatedSizeState: function _AnimatedSizeState(t0, t1) {
      var _ = this;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._framework$_element = _._widget = null;
    },
    _AnimatedSize: function _AnimatedSize(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.alignment = t0;
      _.curve = t1;
      _.duration = t2;
      _.reverseDuration = t3;
      _.vsync = t4;
      _.clipBehavior = t5;
      _.onEnd = t6;
      _.child = t7;
      _.key = t8;
    },
    __AnimatedSizeState_State_SingleTickerProviderStateMixin: function __AnimatedSizeState_State_SingleTickerProviderStateMixin() {
    },
    AppLifecycleListener: function AppLifecycleListener(t0, t1, t2) {
      this._app_lifecycle_listener$_lifecycleState = t0;
      this.binding = t1;
      this.onResume = t2;
    },
    _AppLifecycleListener_Object_WidgetsBindingObserver: function _AppLifecycleListener_Object_WidgetsBindingObserver() {
    },
    _AppLifecycleListener_Object_WidgetsBindingObserver_Diagnosticable: function _AppLifecycleListener_Object_WidgetsBindingObserver_Diagnosticable() {
    },
    ClipPath_shape(child, shape) {
      return new B.Builder(new A.ClipPath_shape_closure(shape, C.Clip_2, child), null);
    },
    Transform$rotate(angle, child) {
      return new B.Transform(A.Transform__computeRotation(angle), C.Alignment_0_0, true, null, child, null);
    },
    Transform__computeRotation(radians) {
      var t1, sin, cos;
      if (radians === 0) {
        t1 = new B.Matrix40(new Float64Array(16));
        t1.setIdentity$0();
        return t1;
      }
      sin = Math.sin(radians);
      if (sin === 1)
        return A.Transform__createZRotation(1, 0);
      if (sin === -1)
        return A.Transform__createZRotation(-1, 0);
      cos = Math.cos(radians);
      if (cos === -1)
        return A.Transform__createZRotation(0, -1);
      return A.Transform__createZRotation(sin, cos);
    },
    Transform__createZRotation(sin, cos) {
      var t1 = new Float64Array(16);
      t1[0] = cos;
      t1[1] = sin;
      t1[4] = -sin;
      t1[5] = cos;
      t1[10] = 1;
      t1[15] = 1;
      return new B.Matrix40(t1);
    },
    CompositedTransformFollower$(child, link, offset, showWhenUnlinked) {
      return new A.CompositedTransformFollower(link, false, offset, child, null);
    },
    SizedBox$fromSize(child, size) {
      return new B.SizedBox(size._dx, size._dy, child, null);
    },
    ClipPath_shape_closure: function ClipPath_shape_closure(t0, t1, t2) {
      this.shape = t0;
      this.clipBehavior = t1;
      this.child = t2;
    },
    CompositedTransformTarget: function CompositedTransformTarget(t0, t1, t2) {
      this.link = t0;
      this.child = t1;
      this.key = t2;
    },
    CompositedTransformFollower: function CompositedTransformFollower(t0, t1, t2, t3, t4) {
      var _ = this;
      _.link = t0;
      _.showWhenUnlinked = t1;
      _.offset = t2;
      _.child = t3;
      _.key = t4;
    },
    ContextMenuButtonType: function ContextMenuButtonType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    ContextMenuButtonItem: function ContextMenuButtonItem(t0, t1, t2) {
      this.onPressed = t0;
      this.type = t1;
      this.label = t2;
    },
    ContextMenuController_removeAny() {
      var t1 = $.ContextMenuController__menuOverlayEntry;
      if (t1 != null)
        t1.remove$0(0);
      t1 = $.ContextMenuController__menuOverlayEntry;
      if (t1 != null)
        t1.dispose$0();
      $.ContextMenuController__menuOverlayEntry = null;
      if ($.ContextMenuController__shownInstance != null)
        $.ContextMenuController__shownInstance = null;
    },
    ContextMenuController: function ContextMenuController() {
    },
    ContextMenuController_show_closure: function ContextMenuController_show_closure(t0, t1) {
      this.capturedThemes = t0;
      this.contextMenuBuilder = t1;
    },
    DesktopTextSelectionToolbarLayoutDelegate: function DesktopTextSelectionToolbarLayoutDelegate(t0) {
      this.anchor = t0;
    },
    EditableTextState$() {
      var t4, _0_0, t5, _null = null,
        t1 = $.$get$ChangeNotifier__emptyListeners(),
        t2 = type$.LabeledGlobalKey_State_StatefulWidget,
        t3 = new A.DefaultProcessTextService();
      t3.__DefaultProcessTextService__processTextChannel_A = D.OptionalMethodChannel_8ec;
      t4 = B._setArrayType([], type$.JSArray_ProcessTextAction);
      _0_0 = B.defaultTargetPlatform();
      $label0$0: {
        if (C.TargetPlatform_0 === _0_0 || C.TargetPlatform_2 === _0_0) {
          t5 = true;
          break $label0$0;
        }
        if (C.TargetPlatform_1 === _0_0 || C.TargetPlatform_3 === _0_0 || C.TargetPlatform_4 === _0_0 || C.TargetPlatform_5 === _0_0) {
          t5 = false;
          break $label0$0;
        }
        t5 = _null;
      }
      return new A.EditableTextState(new B.ValueNotifier(true, t1), new B.LabeledGlobalKey(_null, t2), new A._WebClipboardStatusNotifier(D.ClipboardStatus_0, D.ClipboardStatus_1, t1), new B.LabeledGlobalKey(_null, t2), new A.LayerLink(), new A.LayerLink(), new A.LayerLink(), t3, t4, t5, _null, _null, _null);
    },
    EditableTextState__inferSpellCheckConfiguration(configuration) {
      var spellCheckService = configuration.spellCheckService,
        spellCheckAutomaticallyDisabled = configuration.$eq(0, D.SpellCheckConfiguration_asH),
        t1 = spellCheckService == null;
      if (t1) {
        $.WidgetsBinding__instance.toString;
        $.$get$EnginePlatformDispatcher__instance();
      }
      if (spellCheckAutomaticallyDisabled || t1)
        return D.SpellCheckConfiguration_asH;
      if (t1) {
        t1 = new A.DefaultSpellCheckService();
        t1.__DefaultSpellCheckService_spellCheckChannel_A = D.OptionalMethodChannel_o95;
      } else
        t1 = spellCheckService;
      return configuration.copyWith$1$spellCheckService(t1);
    },
    _UpdateTextSelectionAction$(state, getTextBoundary, applyTextBoundary, extentAtIndex, ignoreNonCollapsedSelection, isExpand, $T) {
      return new A._UpdateTextSelectionAction(state, ignoreNonCollapsedSelection, isExpand, extentAtIndex, getTextBoundary, applyTextBoundary, new B.ObserverList(B._setArrayType([], type$.JSArray_of_void_Function_Action_Intent), type$.ObserverList_of_void_Function_Action_Intent), $T._eval$1("_UpdateTextSelectionAction<0>"));
    },
    _CompositionCallback: function _CompositionCallback(t0, t1, t2, t3) {
      var _ = this;
      _.compositeCallback = t0;
      _.enabled = t1;
      _.child = t2;
      _.key = t3;
    },
    _RenderCompositionCallback: function _RenderCompositionCallback(t0, t1, t2, t3, t4) {
      var _ = this;
      _.compositeCallback = t0;
      _._cancelCallback = null;
      _._editable_text$_enabled = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _._layoutCacheStorage = t3;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t4;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    TextEditingController: function TextEditingController(t0, t1) {
      var _ = this;
      _._change_notifier$_value = t0;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t1;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    },
    ToolbarOptions: function ToolbarOptions(t0, t1, t2, t3) {
      var _ = this;
      _.copy = t0;
      _.cut = t1;
      _.paste = t2;
      _.selectAll = t3;
    },
    _KeyFrame: function _KeyFrame(t0, t1) {
      this.time = t0;
      this.value = t1;
    },
    _DiscreteKeyFrameSimulation: function _DiscreteKeyFrameSimulation(t0, t1, t2) {
      var _ = this;
      _.maxDuration = t0;
      _._keyFrames = t1;
      _._lastKeyFrameIndex = 0;
      _.tolerance = t2;
    },
    EditableText: function EditableText(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65) {
      var _ = this;
      _.controller = t0;
      _.focusNode = t1;
      _.obscuringCharacter = t2;
      _.obscureText = t3;
      _.readOnly = t4;
      _.toolbarOptions = t5;
      _.showSelectionHandles = t6;
      _.showCursor = t7;
      _.autocorrect = t8;
      _.smartDashesType = t9;
      _.smartQuotesType = t10;
      _.enableSuggestions = t11;
      _.style = t12;
      _.undoController = t13;
      _._editable_text$_strutStyle = t14;
      _.textAlign = t15;
      _.textDirection = t16;
      _.textCapitalization = t17;
      _.cursorColor = t18;
      _.autocorrectionTextRectColor = t19;
      _.backgroundCursorColor = t20;
      _.maxLines = t21;
      _.minLines = t22;
      _.expands = t23;
      _.autofocus = t24;
      _.selectionColor = t25;
      _.selectionControls = t26;
      _.keyboardType = t27;
      _.textInputAction = t28;
      _.onChanged = t29;
      _.onEditingComplete = t30;
      _.onSubmitted = t31;
      _.onAppPrivateCommand = t32;
      _.onSelectionChanged = t33;
      _.onSelectionHandleTapped = t34;
      _.groupId = t35;
      _.onTapOutside = t36;
      _.onTapUpOutside = t37;
      _.inputFormatters = t38;
      _.mouseCursor = t39;
      _.rendererIgnoresPointer = t40;
      _.cursorWidth = t41;
      _.cursorHeight = t42;
      _.cursorRadius = t43;
      _.cursorOpacityAnimates = t44;
      _.cursorOffset = t45;
      _.paintCursorAboveText = t46;
      _.selectionHeightStyle = t47;
      _.selectionWidthStyle = t48;
      _.keyboardAppearance = t49;
      _.scrollPadding = t50;
      _.enableInteractiveSelection = t51;
      _.dragStartBehavior = t52;
      _.scrollController = t53;
      _.scrollPhysics = t54;
      _.scribbleEnabled = t55;
      _.stylusHandwritingEnabled = t56;
      _.autofillClient = t57;
      _.clipBehavior = t58;
      _.restorationId = t59;
      _.enableIMEPersonalizedLearning = t60;
      _.contentInsertionConfiguration = t61;
      _.contextMenuBuilder = t62;
      _.spellCheckConfiguration = t63;
      _.magnifierConfiguration = t64;
      _.key = t65;
    },
    EditableTextState: function EditableTextState(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _._backingCursorBlinkOpacityController = _._cursorTimer = null;
      _.__EditableTextState__iosBlinkCursorSimulation_FI = $;
      _._cursorVisibilityNotifier = t0;
      _._editableKey = t1;
      _.clipboardStatus = t2;
      _._dataWhenToolbarShowScheduled = _._scrollNotificationObserver = _._selectionOverlay = _._textInputConnection = null;
      _._listeningToScrollNotificationObserver = false;
      _._scrollableKey = t3;
      _._internalScrollController = null;
      _._toolbarLayerLink = t4;
      _._startHandleLayerLink = t5;
      _._endHandleLayerLink = t6;
      _._didAutoFocus = false;
      _._currentAutofillScope = null;
      _.__EditableTextState__style_A = _.__EditableTextState__spellCheckConfiguration_A = $;
      _.spellCheckResults = null;
      _._processTextService = t7;
      _._processTextActions = t8;
      _._lastOrientation = _._floatingCursorResetController = null;
      _.__EditableTextState__appLifecycleListener_F = $;
      _._justResumed = false;
      _._tickersEnabled = true;
      _._lastBoundedOffset = _._pointOffsetOrigin = _._lastTextPosition = _._startCaretCenter = _._lastKnownRemoteTextEditingValue = null;
      _._batchEditDepth = 0;
      _._nextFocusChangeIsInternal = _._restartConnectionScheduled = false;
      _._platformSupportsFadeOnScroll = t9;
      _._showCaretOnScreenScheduled = _._showToolbarOnScreenScheduled = false;
      _.__EditableTextState__lastBottomViewInset_A = $;
      _._obscureShowCharTicksPending = 0;
      _._scribbleCacheKey = _._obscureLatestCharIndex = null;
      _.__EditableTextState_renderEditable_FI = $;
      _._placeholderLocation = -1;
      _._currentPromptRectRange = _._editable_text$_viewId = null;
      _.__EditableTextState__actions_FI = _.__EditableTextState__verticalSelectionUpdateAction_FI = _.__EditableTextState__updateSelectionAction_FI = _.__EditableTextState__replaceTextAction_FI = _.__EditableTextState__transposeCharactersAction_FI = $;
      _.TickerProviderStateMixin__tickers = t10;
      _.TickerProviderStateMixin__tickerModeNotifier = t11;
      _.AutomaticKeepAliveClientMixin__keepAliveHandle = t12;
      _._framework$_element = _._widget = null;
    },
    EditableTextState__onChangedClipboardStatus_closure: function EditableTextState__onChangedClipboardStatus_closure() {
    },
    EditableTextState_cutSelection_closure: function EditableTextState_cutSelection_closure(t0) {
      this.$this = t0;
    },
    EditableTextState__pasteText_closure: function EditableTextState__pasteText_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_buttonItemsForToolbarOptions_closure: function EditableTextState_buttonItemsForToolbarOptions_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_buttonItemsForToolbarOptions_closure0: function EditableTextState_buttonItemsForToolbarOptions_closure0(t0) {
      this.$this = t0;
    },
    EditableTextState_buttonItemsForToolbarOptions_closure1: function EditableTextState_buttonItemsForToolbarOptions_closure1(t0) {
      this.$this = t0;
    },
    EditableTextState_buttonItemsForToolbarOptions_closure2: function EditableTextState_buttonItemsForToolbarOptions_closure2(t0) {
      this.$this = t0;
    },
    EditableTextState_contextMenuButtonItems_closure: function EditableTextState_contextMenuButtonItems_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_contextMenuButtonItems_closure0: function EditableTextState_contextMenuButtonItems_closure0(t0) {
      this.$this = t0;
    },
    EditableTextState_contextMenuButtonItems_closure1: function EditableTextState_contextMenuButtonItems_closure1(t0) {
      this.$this = t0;
    },
    EditableTextState_contextMenuButtonItems_closure2: function EditableTextState_contextMenuButtonItems_closure2(t0) {
      this.$this = t0;
    },
    EditableTextState_contextMenuButtonItems_closure3: function EditableTextState_contextMenuButtonItems_closure3(t0) {
      this.$this = t0;
    },
    EditableTextState_contextMenuButtonItems_closure4: function EditableTextState_contextMenuButtonItems_closure4(t0) {
      this.$this = t0;
    },
    EditableTextState_contextMenuButtonItems_closure5: function EditableTextState_contextMenuButtonItems_closure5(t0) {
      this.$this = t0;
    },
    EditableTextState_contextMenuButtonItems_closure6: function EditableTextState_contextMenuButtonItems_closure6(t0) {
      this.$this = t0;
    },
    EditableTextState__textProcessingActionButtonItems_closure: function EditableTextState__textProcessingActionButtonItems_closure(t0, t1, t2) {
      this.$this = t0;
      this.selection = t1;
      this.action = t2;
    },
    EditableTextState_initState_closure: function EditableTextState_initState_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_didChangeDependencies_closure: function EditableTextState_didChangeDependencies_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_didUpdateWidget_closure: function EditableTextState_didUpdateWidget_closure(t0, t1, t2) {
      this.$this = t0;
      this.shouldShowToolbar = t1;
      this.shouldShowHandles = t2;
    },
    EditableTextState_didUpdateWidget_closure0: function EditableTextState_didUpdateWidget_closure0(t0) {
      this.$this = t0;
    },
    EditableTextState__scheduleShowCaretOnScreen_closure: function EditableTextState__scheduleShowCaretOnScreen_closure(t0, t1) {
      this.$this = t0;
      this.withAnimation = t1;
    },
    EditableTextState_didChangeMetrics_closure: function EditableTextState_didChangeMetrics_closure(t0) {
      this.$this = t0;
    },
    EditableTextState__formatAndSetValue_closure: function EditableTextState__formatAndSetValue_closure(t0) {
      this.$this = t0;
    },
    EditableTextState__startCursorBlink_closure: function EditableTextState__startCursorBlink_closure(t0) {
      this.$this = t0;
    },
    EditableTextState__onCursorTick_closure: function EditableTextState__onCursorTick_closure() {
    },
    EditableTextState__onCursorTick_closure0: function EditableTextState__onCursorTick_closure0(t0) {
      this.$this = t0;
    },
    EditableTextState__onCursorTick_closure1: function EditableTextState__onCursorTick_closure1(t0) {
      this.$this = t0;
    },
    EditableTextState__didChangeTextEditingValue_closure: function EditableTextState__didChangeTextEditingValue_closure() {
    },
    EditableTextState__handleFocusChanged_closure: function EditableTextState__handleFocusChanged_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_insertTextPlaceholder_closure: function EditableTextState_insertTextPlaceholder_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_removeTextPlaceholder_closure: function EditableTextState_removeTextPlaceholder_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_showAutocorrectionPromptRect_closure: function EditableTextState_showAutocorrectionPromptRect_closure(t0, t1, t2) {
      this.$this = t0;
      this.start = t1;
      this.end = t2;
    },
    EditableTextState__semanticsOnCopy_closure: function EditableTextState__semanticsOnCopy_closure(t0, t1) {
      this.$this = t0;
      this.controls = t1;
    },
    EditableTextState__semanticsOnCut_closure: function EditableTextState__semanticsOnCut_closure(t0, t1) {
      this.$this = t0;
      this.controls = t1;
    },
    EditableTextState__semanticsOnPaste_closure: function EditableTextState__semanticsOnPaste_closure(t0, t1) {
      this.$this = t0;
      this.controls = t1;
    },
    EditableTextState__actions_closure: function EditableTextState__actions_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_build_closure: function EditableTextState_build_closure(t0, t1, t2) {
      this.$this = t0;
      this.controls = t1;
      this.effectiveTextScaler = t2;
    },
    EditableTextState_build__closure: function EditableTextState_build__closure(t0, t1) {
      this.$this = t0;
      this.context = t1;
    },
    EditableTextState_build__closure2: function EditableTextState_build__closure2(t0) {
      this.$this = t0;
    },
    EditableTextState_build__closure0: function EditableTextState_build__closure0(t0) {
      this.$this = t0;
    },
    EditableTextState_build__closure1: function EditableTextState_build__closure1() {
    },
    EditableTextState_build__closure3: function EditableTextState_build__closure3(t0) {
      this.$this = t0;
    },
    EditableTextState_build__closure4: function EditableTextState_build__closure4(t0, t1, t2) {
      this.$this = t0;
      this.controls = t1;
      this.effectiveTextScaler = t2;
    },
    EditableTextState_build___closure: function EditableTextState_build___closure(t0) {
      this.$this = t0;
    },
    _Editable: function _Editable(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39) {
      var _ = this;
      _.inlineSpan = t0;
      _.value = t1;
      _.cursorColor = t2;
      _.startHandleLayerLink = t3;
      _.endHandleLayerLink = t4;
      _.backgroundCursorColor = t5;
      _.showCursor = t6;
      _.forceLine = t7;
      _.readOnly = t8;
      _.hasFocus = t9;
      _.maxLines = t10;
      _.minLines = t11;
      _.expands = t12;
      _.strutStyle = t13;
      _.selectionColor = t14;
      _.textScaler = t15;
      _.textAlign = t16;
      _.textDirection = t17;
      _.locale = t18;
      _.obscuringCharacter = t19;
      _.obscureText = t20;
      _.textHeightBehavior = t21;
      _.textWidthBasis = t22;
      _.offset = t23;
      _.rendererIgnoresPointer = t24;
      _.cursorWidth = t25;
      _.cursorHeight = t26;
      _.cursorRadius = t27;
      _.cursorOffset = t28;
      _.paintCursorAboveText = t29;
      _.selectionHeightStyle = t30;
      _.selectionWidthStyle = t31;
      _.enableInteractiveSelection = t32;
      _.textSelectionDelegate = t33;
      _.devicePixelRatio = t34;
      _.promptRectRange = t35;
      _.promptRectColor = t36;
      _.clipBehavior = t37;
      _.children = t38;
      _.key = t39;
    },
    _ScribbleCacheKey: function _ScribbleCacheKey(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.textAlign = t0;
      _.textDirection = t1;
      _.textScaler = t2;
      _.textHeightBehavior = t3;
      _.locale = t4;
      _.structStyle = t5;
      _.placeholder = t6;
      _.size = t7;
      _.inlineSpan = t8;
    },
    _ScribbleFocusable: function _ScribbleFocusable(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.child = t0;
      _.focusNode = t1;
      _.editableKey = t2;
      _.updateSelectionRects = t3;
      _.enabled = t4;
      _.key = t5;
    },
    _ScribbleFocusableState: function _ScribbleFocusableState(t0) {
      this._elementIdentifier = t0;
      this._framework$_element = this._widget = null;
    },
    _ScribbleFocusableState_isInScribbleRect_closure: function _ScribbleFocusableState_isInScribbleRect_closure(t0) {
      this.$this = t0;
    },
    _ScribblePlaceholder: function _ScribblePlaceholder(t0, t1, t2, t3, t4) {
      var _ = this;
      _.size = t0;
      _.child = t1;
      _.alignment = t2;
      _.baseline = t3;
      _.style = t4;
    },
    _CodePointBoundary: function _CodePointBoundary(t0) {
      this._editable_text$_text = t0;
    },
    _DeleteTextAction: function _DeleteTextAction(t0, t1, t2, t3, t4) {
      var _ = this;
      _.state = t0;
      _.getTextBoundary = t1;
      _._applyTextBoundary = t2;
      _._actions$_listeners = t3;
      _._currentCallingAction = null;
      _.$ti = t4;
    },
    _UpdateTextSelectionAction: function _UpdateTextSelectionAction(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.state = t0;
      _.ignoreNonCollapsedSelection = t1;
      _.isExpand = t2;
      _.extentAtIndex = t3;
      _.getTextBoundary = t4;
      _.applyTextBoundary = t5;
      _._actions$_listeners = t6;
      _._currentCallingAction = null;
      _.$ti = t7;
    },
    _UpdateTextSelectionVerticallyAction: function _UpdateTextSelectionVerticallyAction(t0, t1, t2) {
      var _ = this;
      _.state = t0;
      _._runSelection = _._verticalMovementRun = null;
      _._actions$_listeners = t1;
      _._currentCallingAction = null;
      _.$ti = t2;
    },
    _SelectAllAction: function _SelectAllAction(t0, t1) {
      this.state = t0;
      this._actions$_listeners = t1;
      this._currentCallingAction = null;
    },
    _CopySelectionAction: function _CopySelectionAction(t0, t1) {
      this.state = t0;
      this._actions$_listeners = t1;
      this._currentCallingAction = null;
    },
    _WebClipboardStatusNotifier: function _WebClipboardStatusNotifier(t0, t1, t2) {
      var _ = this;
      _.value = t0;
      _._text_selection$_disposed = false;
      _._change_notifier$_value = t1;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t2;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    },
    _EditableTextTapOutsideAction: function _EditableTextTapOutsideAction(t0) {
      this._actions$_listeners = t0;
      this._currentCallingAction = null;
    },
    _EditableTextState_State_AutomaticKeepAliveClientMixin: function _EditableTextState_State_AutomaticKeepAliveClientMixin() {
    },
    _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver: function _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver() {
    },
    _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin: function _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin() {
    },
    _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate: function _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate() {
    },
    _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate_TextInputClient: function _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate_TextInputClient() {
    },
    AnimatedPositioned$(child, curve, duration, left, $top) {
      return new A.AnimatedPositioned(child, left, $top, curve, duration, null, null);
    },
    AnimatedPositioned: function AnimatedPositioned(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.child = t0;
      _.left = t1;
      _.top = t2;
      _.curve = t3;
      _.duration = t4;
      _.onEnd = t5;
      _.key = t6;
    },
    _AnimatedPositionedState: function _AnimatedPositionedState(t0, t1) {
      var _ = this;
      _._implicit_animations$_height = _._implicit_animations$_width = _._implicit_animations$_bottom = _._implicit_animations$_right = _._implicit_animations$_top = _._implicit_animations$_left = null;
      _.__ImplicitlyAnimatedWidgetState__animation_AI = _.__ImplicitlyAnimatedWidgetState_controller_FI = $;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._framework$_element = _._widget = null;
    },
    _AnimatedPositionedState_forEachTween_closure: function _AnimatedPositionedState_forEachTween_closure() {
    },
    _AnimatedPositionedState_forEachTween_closure0: function _AnimatedPositionedState_forEachTween_closure0() {
    },
    _AnimatedPositionedState_forEachTween_closure1: function _AnimatedPositionedState_forEachTween_closure1() {
    },
    _AnimatedPositionedState_forEachTween_closure2: function _AnimatedPositionedState_forEachTween_closure2() {
    },
    _AnimatedPositionedState_forEachTween_closure3: function _AnimatedPositionedState_forEachTween_closure3() {
    },
    _AnimatedPositionedState_forEachTween_closure4: function _AnimatedPositionedState_forEachTween_closure4() {
    },
    InheritedTheme_capture(from, to) {
      var themes;
      if (from.$eq(0, to))
        return new A.CapturedThemes(D.List_empty6);
      themes = B._setArrayType([], type$.JSArray_InheritedTheme);
      B._Cell$named("debugDidFindAncestor");
      from.visitAncestorElements$1(new A.InheritedTheme_capture_closure(to, B.LinkedHashSet_LinkedHashSet$_empty(type$.Type), themes));
      return new A.CapturedThemes(themes);
    },
    InheritedTheme_capture_closure: function InheritedTheme_capture_closure(t0, t1, t2) {
      this.to = t0;
      this.themeTypes = t1;
      this.themes = t2;
    },
    CapturedThemes: function CapturedThemes(t0) {
      this._themes = t0;
    },
    _CaptureAll: function _CaptureAll(t0, t1, t2) {
      this.themes = t0;
      this.child = t1;
      this.key = t2;
    },
    TextMagnifierConfiguration__none(context, controller, magnifierInfo) {
      return null;
    },
    MagnifierController_shiftWithinBounds(bounds, rect) {
      var rectShift,
        t1 = rect.left,
        t2 = bounds.left;
      if (t1 < t2)
        rectShift = C.Offset_0_0.$add(0, new B.Offset(t2 - t1, 0));
      else {
        t1 = rect.right;
        t2 = bounds.right;
        rectShift = t1 > t2 ? C.Offset_0_0.$add(0, new B.Offset(t2 - t1, 0)) : C.Offset_0_0;
      }
      t1 = rect.top;
      t2 = bounds.top;
      if (t1 < t2)
        rectShift = rectShift.$add(0, new B.Offset(0, t2 - t1));
      else {
        t1 = rect.bottom;
        t2 = bounds.bottom;
        if (t1 > t2)
          rectShift = rectShift.$add(0, new B.Offset(0, t2 - t1));
      }
      return rect.shift$1(rectShift);
    },
    RawMagnifier$(child, clipBehavior, decoration, focalPointOffset, magnificationScale, size) {
      return new A.RawMagnifier(child, decoration, clipBehavior, focalPointOffset, magnificationScale, size, null);
    },
    MagnifierInfo: function MagnifierInfo(t0, t1, t2, t3) {
      var _ = this;
      _.globalGesturePosition = t0;
      _.currentLineBoundaries = t1;
      _.caretRect = t2;
      _.fieldBounds = t3;
    },
    TextMagnifierConfiguration: function TextMagnifierConfiguration(t0, t1) {
      this._magnifierBuilder = t0;
      this.shouldDisplayHandlesInMagnifier = t1;
    },
    MagnifierController: function MagnifierController() {
      this._overlayEntry = this.animationController = null;
    },
    MagnifierController_show_closure: function MagnifierController_show_closure(t0, t1) {
      this.capturedThemes = t0;
      this.builder = t1;
    },
    MagnifierDecoration: function MagnifierDecoration(t0, t1, t2) {
      this.opacity = t0;
      this.shadows = t1;
      this.shape = t2;
    },
    RawMagnifier: function RawMagnifier(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.child = t0;
      _.decoration = t1;
      _.clipBehavior = t2;
      _.focalPointOffset = t3;
      _.magnificationScale = t4;
      _.size = t5;
      _.key = t6;
    },
    _NegativeClip: function _NegativeClip(t0, t1) {
      this.shape = t0;
      this._reclip = t1;
    },
    _Magnifier: function _Magnifier(t0, t1, t2, t3) {
      var _ = this;
      _.focalPointOffset = t0;
      _.magnificationScale = t1;
      _.child = t2;
      _.key = t3;
    },
    _RenderMagnification: function _RenderMagnification(t0, t1, t2, t3, t4) {
      var _ = this;
      _._focalPointOffset = t0;
      _._magnificationScale = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _._layoutCacheStorage = t3;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t4;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    SizeChangedLayoutNotification: function SizeChangedLayoutNotification() {
    },
    SizeChangedLayoutNotifier: function SizeChangedLayoutNotifier(t0, t1) {
      this.child = t0;
      this.key = t1;
    },
    SizeChangedLayoutNotifier_createRenderObject_closure: function SizeChangedLayoutNotifier_createRenderObject_closure(t0) {
      this.context = t0;
    },
    _RenderSizeChangedWithCallback: function _RenderSizeChangedWithCallback(t0, t1, t2, t3) {
      var _ = this;
      _.onLayoutChangedCallback = t0;
      _._oldSize = null;
      _.RenderObjectWithChildMixin__child = t1;
      _._layoutCacheStorage = t2;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t3;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    SlottedMultiChildRenderObjectWidget: function SlottedMultiChildRenderObjectWidget() {
    },
    SlottedMultiChildRenderObjectWidgetMixin: function SlottedMultiChildRenderObjectWidgetMixin() {
    },
    SlottedContainerRenderObjectMixin: function SlottedContainerRenderObjectMixin() {
    },
    SlottedRenderObjectElement: function SlottedRenderObjectElement(t0, t1, t2, t3, t4) {
      var _ = this;
      _._slotToChild = t0;
      _._keyedChildren = t1;
      _._slot = _._notificationTree = _._framework$_parent = _._ancestorRenderObjectElement = _._renderObject = null;
      _.__Element__depth_A = $;
      _._widget = t2;
      _._parentBuildScope = _._framework$_owner = null;
      _._lifecycleState = t3;
      _._dependencies = _._inheritedElements = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._inDirtyList = false;
      _.$ti = t4;
    },
    _SlottedMultiChildRenderObjectWidget_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin: function _SlottedMultiChildRenderObjectWidget_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin() {
    },
    _correctSpellCheckResults(newText, resultsText, results) {
      var t1, t2, spanPointer, offset, searchStart, currentSpan, t3, t4, currentSpanTextRegexp, foundIndex, t5, t6, currentSpanFoundExactlyWithOffset, adjustedSpanStart, adjustedSpanEnd,
        correctedSpellCheckResults = B._setArrayType([], type$.JSArray_SuggestionSpan);
      for (t1 = J.getInterceptor$asx(results), t2 = newText.length, spanPointer = 0, offset = 0, searchStart = 0; spanPointer < t1.get$length(results);) {
        currentSpan = t1.$index(results, spanPointer);
        t3 = currentSpan.range;
        t4 = t3.start;
        t3 = t3.end;
        currentSpanTextRegexp = B.RegExp_RegExp("\\b" + B.quoteStringForRegExp(C.JSString_methods.substring$2(resultsText, t4, t3)) + "\\b", true, false, false);
        foundIndex = C.JSString_methods.indexOf$1(C.JSString_methods.substring$1(newText, searchStart), currentSpanTextRegexp);
        t5 = foundIndex + searchStart;
        t6 = t4 + offset;
        currentSpanFoundExactlyWithOffset = t6 === t5;
        if (t4 === t5 || currentSpanFoundExactlyWithOffset) {
          searchStart = Math.min(t3 + 1 + offset, t2);
          correctedSpellCheckResults.push(new A.SuggestionSpan(new B.TextRange(t6, t3 + offset), currentSpan.suggestions));
        } else if (foundIndex >= 0) {
          adjustedSpanStart = searchStart + foundIndex;
          adjustedSpanEnd = adjustedSpanStart + (t3 - t4);
          searchStart = Math.min(adjustedSpanEnd + 1, t2);
          offset = adjustedSpanStart - t4;
          correctedSpellCheckResults.push(new A.SuggestionSpan(new B.TextRange(adjustedSpanStart, adjustedSpanEnd), currentSpan.suggestions));
        }
        ++spanPointer;
      }
      return correctedSpellCheckResults;
    },
    buildTextSpanWithSpellCheckSuggestions(value, composingWithinCurrentTextRange, style, misspelledTextStyle, spellCheckResults) {
      var spellCheckResultsSpans = spellCheckResults.suggestionSpans,
        spellCheckResultsText = spellCheckResults.spellCheckedText,
        t1 = value.text;
      if (spellCheckResultsText !== t1)
        spellCheckResultsSpans = A._correctSpellCheckResults(t1, spellCheckResultsText, spellCheckResultsSpans);
      if (B.defaultTargetPlatform() === C.TargetPlatform_0)
        return B.TextSpan$(A._buildSubtreesWithComposingRegion(spellCheckResultsSpans, value, style, misspelledTextStyle, composingWithinCurrentTextRange), style, null);
      return B.TextSpan$(A._buildSubtreesWithoutComposingRegion(spellCheckResultsSpans, value, style, misspelledTextStyle, value.selection.baseOffset), style, null);
    },
    _buildSubtreesWithoutComposingRegion(spellCheckSuggestions, value, style, misspelledStyle, cursorIndex) {
      var t2, endIndex0, endIndex1, endIndex2,
        textSpanTreeChildren = B._setArrayType([], type$.JSArray_TextSpan),
        text = value.text,
        misspelledJointStyle = style.merge$1(misspelledStyle),
        textPointer = 0,
        endIndex = text.length,
        t1 = J.getInterceptor$asx(spellCheckSuggestions),
        currentSpanPointer = 0;
      while (true) {
        if (!(textPointer < endIndex && currentSpanPointer < t1.get$length(spellCheckSuggestions)))
          break;
        t2 = t1.$index(spellCheckSuggestions, currentSpanPointer).range;
        endIndex0 = t2.start;
        if (endIndex0 > textPointer) {
          endIndex0 = endIndex0 < endIndex ? endIndex0 : endIndex;
          textSpanTreeChildren.push(B.TextSpan$(null, style, C.JSString_methods.substring$2(text, textPointer, endIndex0)));
          textPointer = endIndex0;
        } else {
          endIndex1 = t2.end;
          endIndex2 = endIndex1 < endIndex ? endIndex1 : endIndex;
          t2 = endIndex0 <= cursorIndex && endIndex1 >= cursorIndex ? style : misspelledJointStyle;
          textSpanTreeChildren.push(B.TextSpan$(null, t2, C.JSString_methods.substring$2(text, endIndex0, endIndex2)));
          ++currentSpanPointer;
          textPointer = endIndex2;
        }
      }
      t1 = text.length;
      if (textPointer < t1)
        textSpanTreeChildren.push(B.TextSpan$(null, style, C.JSString_methods.substring$2(text, textPointer, t1)));
      return textSpanTreeChildren;
    },
    _buildSubtreesWithComposingRegion(spellCheckSuggestions, value, style, misspelledStyle, composingWithinCurrentTextRange) {
      var t5, endIndex0, endIndex1, _null = null,
        textSpanTreeChildren = B._setArrayType([], type$.JSArray_TextSpan),
        text = value.text,
        composingRegion = value.composing,
        composingTextStyle = style.merge$1(D.TextStyle_9IC),
        misspelledJointStyle = style.merge$1(misspelledStyle),
        textPointer = 0,
        t1 = composingRegion.start,
        endIndex = text.length,
        t2 = J.getInterceptor$asx(spellCheckSuggestions),
        t3 = composingRegion.end,
        t4 = !composingWithinCurrentTextRange,
        currentSpanPointer = 0;
      while (true) {
        if (!(textPointer < endIndex && currentSpanPointer < t2.get$length(spellCheckSuggestions)))
          break;
        t5 = t2.$index(spellCheckSuggestions, currentSpanPointer).range;
        endIndex0 = t5.start;
        if (endIndex0 > textPointer) {
          endIndex0 = endIndex0 < endIndex ? endIndex0 : endIndex;
          if (t1 >= textPointer && t3 <= endIndex0 && t4) {
            textSpanTreeChildren.push(B.TextSpan$(_null, style, C.JSString_methods.substring$2(text, textPointer, t1)));
            textSpanTreeChildren.push(B.TextSpan$(_null, composingTextStyle, C.JSString_methods.substring$2(text, t1, t3)));
            textSpanTreeChildren.push(B.TextSpan$(_null, style, C.JSString_methods.substring$2(text, t3, endIndex0)));
          } else
            textSpanTreeChildren.push(B.TextSpan$(_null, style, C.JSString_methods.substring$2(text, textPointer, endIndex0)));
          textPointer = endIndex0;
        } else {
          endIndex1 = t5.end;
          endIndex1 = endIndex1 < endIndex ? endIndex1 : endIndex;
          t5 = textPointer >= t1 && endIndex1 <= t3 && t4 ? composingTextStyle : misspelledJointStyle;
          textSpanTreeChildren.push(B.TextSpan$(_null, t5, C.JSString_methods.substring$2(text, endIndex0, endIndex1)));
          ++currentSpanPointer;
          textPointer = endIndex1;
        }
      }
      t1 = text.length;
      if (textPointer < t1)
        if (textPointer < composingRegion.start && !composingWithinCurrentTextRange) {
          A._addComposingRegionTextSpans(textSpanTreeChildren, text, textPointer, composingRegion, style, composingTextStyle);
          t2 = composingRegion.end;
          if (t2 !== t1)
            textSpanTreeChildren.push(B.TextSpan$(_null, style, C.JSString_methods.substring$2(text, t2, t1)));
        } else
          textSpanTreeChildren.push(B.TextSpan$(_null, style, C.JSString_methods.substring$2(text, textPointer, t1)));
      return textSpanTreeChildren;
    },
    _addComposingRegionTextSpans(treeChildren, text, start, composingRegion, style, composingTextStyle) {
      var t1 = composingRegion.start;
      treeChildren.push(B.TextSpan$(null, style, C.JSString_methods.substring$2(text, start, t1)));
      treeChildren.push(B.TextSpan$(null, composingTextStyle, C.JSString_methods.substring$2(text, t1, composingRegion.end)));
    },
    SpellCheckConfiguration: function SpellCheckConfiguration(t0, t1, t2, t3, t4) {
      var _ = this;
      _.spellCheckService = t0;
      _.misspelledSelectionColor = t1;
      _.misspelledTextStyle = t2;
      _.spellCheckSuggestionsToolbarBuilder = t3;
      _._spellCheckEnabled = t4;
    },
    TextFieldTapRegion$(child, debugLabel, groupId, onTapOutside, onTapUpOutside) {
      return new A.TextFieldTapRegion(true, onTapOutside, null, onTapUpOutside, null, groupId, false, debugLabel, child, null);
    },
    TapRegion: function TapRegion() {
    },
    RenderTapRegion: function RenderTapRegion(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _._isRegistered = false;
      _.onTapOutside = t0;
      _.onTapInside = t1;
      _.onTapUpOutside = t2;
      _.onTapUpInside = t3;
      _.debugLabel = t4;
      _._tap_region$_enabled = t5;
      _._consumeOutsideTaps = t6;
      _._groupId = t7;
      _._registry = t8;
      _.behavior = t9;
      _.RenderObjectWithChildMixin__child = t10;
      _._layoutCacheStorage = t11;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t12;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    TextFieldTapRegion: function TextFieldTapRegion(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.enabled = t0;
      _.onTapOutside = t1;
      _.onTapInside = t2;
      _.onTapUpOutside = t3;
      _.onTapUpInside = t4;
      _.groupId = t5;
      _.consumeOutsideTaps = t6;
      _.debugLabel = t7;
      _.child = t8;
      _.key = t9;
    },
    ReplaceTextIntent: function ReplaceTextIntent(t0, t1, t2, t3) {
      var _ = this;
      _.currentTextEditingValue = t0;
      _.replacementText = t1;
      _.replacementRange = t2;
      _.cause = t3;
    },
    UpdateSelectionIntent: function UpdateSelectionIntent(t0, t1, t2) {
      this.currentTextEditingValue = t0;
      this.newSelection = t1;
      this.cause = t2;
    },
    EditableTextTapOutsideIntent: function EditableTextTapOutsideIntent(t0, t1) {
      this.focusNode = t0;
      this.pointerDownEvent = t1;
    },
    _SelectionHandleOverlay$(dragStartBehavior, handleLayerLink, onSelectionHandleDragEnd, onSelectionHandleDragStart, onSelectionHandleDragUpdate, onSelectionHandleTapped, preferredLineHeight, selectionControls, type, visibility) {
      return new A._SelectionHandleOverlay(handleLayerLink, onSelectionHandleTapped, onSelectionHandleDragStart, onSelectionHandleDragUpdate, onSelectionHandleDragEnd, selectionControls, visibility, preferredLineHeight, type, dragStartBehavior, null);
    },
    _TextSelectionGestureDetectorState__getEffectiveConsecutiveTapCount(rawCount) {
      var t1;
      switch (B.defaultTargetPlatform().index) {
        case 0:
        case 1:
        case 3:
          if (rawCount <= 3)
            t1 = rawCount;
          else {
            t1 = C.JSInt_methods.$mod(rawCount, 3);
            if (t1 === 0)
              t1 = 3;
          }
          return t1;
        case 2:
        case 4:
          return Math.min(rawCount, 3);
        case 5:
          return rawCount < 2 ? rawCount : 2 + C.JSInt_methods.$mod(rawCount, 2);
      }
    },
    ToolbarItemsParentData: function ToolbarItemsParentData(t0, t1, t2) {
      var _ = this;
      _.shouldPaint = false;
      _.ContainerParentDataMixin_previousSibling = t0;
      _.ContainerParentDataMixin_nextSibling = t1;
      _.offset = t2;
    },
    TextSelectionControls: function TextSelectionControls() {
    },
    TextSelectionOverlay: function TextSelectionOverlay(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.context = t0;
      _.renderObject = t1;
      _.selectionControls = t2;
      _.selectionDelegate = t3;
      _.__TextSelectionOverlay__selectionOverlay_F = $;
      _.contextMenuBuilder = t4;
      _._text_selection$_value = t5;
      _._effectiveStartHandleVisibility = t6;
      _._effectiveEndHandleVisibility = t7;
      _._effectiveToolbarVisibility = t8;
      _._handlesVisible = false;
      _.__TextSelectionOverlay__endHandleDragTarget_A = _.__TextSelectionOverlay__endHandleDragPosition_A = $;
      _._dragStartSelection = null;
      _.__TextSelectionOverlay__startHandleDragTarget_A = _.__TextSelectionOverlay__startHandleDragPosition_A = $;
    },
    SelectionOverlay: function SelectionOverlay(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29) {
      var _ = this;
      _.context = t0;
      _._magnifierInfo = t1;
      _._magnifierController = t2;
      _.magnifierConfiguration = t3;
      _._startHandleType = t4;
      _._lineHeightAtStart = t5;
      _._isDraggingStartHandle = false;
      _.startHandlesVisible = t6;
      _.onStartHandleDragStart = t7;
      _.onStartHandleDragUpdate = t8;
      _.onStartHandleDragEnd = t9;
      _._endHandleType = t10;
      _._lineHeightAtEnd = t11;
      _._isDraggingEndHandle = false;
      _.endHandlesVisible = t12;
      _.onEndHandleDragStart = t13;
      _.onEndHandleDragUpdate = t14;
      _.onEndHandleDragEnd = t15;
      _.toolbarVisible = t16;
      _._selectionEndpoints = t17;
      _.debugRequiredFor = t18;
      _.toolbarLayerLink = t19;
      _.startHandleLayerLink = t20;
      _.endHandleLayerLink = t21;
      _.selectionControls = t22;
      _.selectionDelegate = t23;
      _.dragStartBehavior = t24;
      _.onSelectionHandleTapped = t25;
      _.clipboardStatus = t26;
      _._toolbarLocation = t27;
      _._toolbar = _._handles = null;
      _._contextMenuController = t28;
      _._spellCheckToolbarController = t29;
      _._text_selection$_buildScheduled = false;
    },
    SelectionOverlay_showMagnifier_closure: function SelectionOverlay_showMagnifier_closure(t0) {
      this.builtMagnifier = t0;
    },
    SelectionOverlay_showHandles_closure: function SelectionOverlay_showHandles_closure(t0, t1) {
      this.$this = t0;
      this.capturedThemes = t1;
    },
    SelectionOverlay_showHandles_closure0: function SelectionOverlay_showHandles_closure0(t0, t1) {
      this.$this = t0;
      this.capturedThemes = t1;
    },
    SelectionOverlay_showToolbar_closure: function SelectionOverlay_showToolbar_closure(t0, t1, t2) {
      this.$this = t0;
      this.renderBox = t1;
      this.contextMenuBuilder = t2;
    },
    SelectionOverlay_markNeedsBuild_closure: function SelectionOverlay_markNeedsBuild_closure(t0) {
      this.$this = t0;
    },
    SelectionOverlay__buildToolbar_closure: function SelectionOverlay__buildToolbar_closure(t0, t1, t2) {
      this.$this = t0;
      this.editingRegion = t1;
      this.midpoint = t2;
    },
    _SelectionToolbarWrapper: function _SelectionToolbarWrapper(t0, t1, t2, t3, t4) {
      var _ = this;
      _.child = t0;
      _.offset = t1;
      _.layerLink = t2;
      _.visibility = t3;
      _.key = t4;
    },
    _SelectionToolbarWrapperState: function _SelectionToolbarWrapperState(t0, t1) {
      var _ = this;
      _.___SelectionToolbarWrapperState__controller_A = $;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._framework$_element = _._widget = null;
    },
    _SelectionHandleOverlay: function _SelectionHandleOverlay(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.handleLayerLink = t0;
      _.onSelectionHandleTapped = t1;
      _.onSelectionHandleDragStart = t2;
      _.onSelectionHandleDragUpdate = t3;
      _.onSelectionHandleDragEnd = t4;
      _.selectionControls = t5;
      _.visibility = t6;
      _.preferredLineHeight = t7;
      _.type = t8;
      _.dragStartBehavior = t9;
      _.key = t10;
    },
    _SelectionHandleOverlayState: function _SelectionHandleOverlayState(t0, t1) {
      var _ = this;
      _.___SelectionHandleOverlayState__controller_A = $;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._framework$_element = _._widget = null;
    },
    _SelectionHandleOverlayState_build_closure: function _SelectionHandleOverlayState_build_closure(t0) {
      this.$this = t0;
    },
    _SelectionHandleOverlayState_build_closure0: function _SelectionHandleOverlayState_build_closure0(t0, t1) {
      this.$this = t0;
      this.eagerlyAcceptDragWhenCollapsed = t1;
    },
    TextSelectionGestureDetectorBuilder: function TextSelectionGestureDetectorBuilder() {
    },
    TextSelectionGestureDetectorBuilder_onTapDown_closure: function TextSelectionGestureDetectorBuilder_onTapDown_closure(t0) {
      this.$this = t0;
    },
    TextSelectionGestureDetector: function TextSelectionGestureDetector(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21) {
      var _ = this;
      _.onTapTrackStart = t0;
      _.onTapTrackReset = t1;
      _.onTapDown = t2;
      _.onForcePressStart = t3;
      _.onForcePressEnd = t4;
      _.onSecondaryTap = t5;
      _.onSecondaryTapDown = t6;
      _.onSingleTapUp = t7;
      _.onSingleTapCancel = t8;
      _.onUserTap = t9;
      _.onSingleLongTapStart = t10;
      _.onSingleLongTapMoveUpdate = t11;
      _.onSingleLongTapEnd = t12;
      _.onDoubleTapDown = t13;
      _.onTripleTapDown = t14;
      _.onDragSelectionStart = t15;
      _.onDragSelectionUpdate = t16;
      _.onDragSelectionEnd = t17;
      _.onUserTapAlwaysCalled = t18;
      _.behavior = t19;
      _.child = t20;
      _.key = t21;
    },
    _TextSelectionGestureDetectorState: function _TextSelectionGestureDetectorState() {
      this._framework$_element = this._widget = null;
    },
    _TextSelectionGestureDetectorState_build_closure: function _TextSelectionGestureDetectorState_build_closure(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure0: function _TextSelectionGestureDetectorState_build_closure0(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure1: function _TextSelectionGestureDetectorState_build_closure1(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure2: function _TextSelectionGestureDetectorState_build_closure2(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure3: function _TextSelectionGestureDetectorState_build_closure3(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure4: function _TextSelectionGestureDetectorState_build_closure4(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure5: function _TextSelectionGestureDetectorState_build_closure5(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure6: function _TextSelectionGestureDetectorState_build_closure6(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure7: function _TextSelectionGestureDetectorState_build_closure7(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure8: function _TextSelectionGestureDetectorState_build_closure8(t0) {
      this.$this = t0;
    },
    ClipboardStatusNotifier: function ClipboardStatusNotifier() {
    },
    ClipboardStatus: function ClipboardStatus(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TextSelectionHandleControls: function TextSelectionHandleControls() {
    },
    _ClipboardStatusNotifier_ValueNotifier_WidgetsBindingObserver: function _ClipboardStatusNotifier_ValueNotifier_WidgetsBindingObserver() {
    },
    __SelectionHandleOverlayState_State_SingleTickerProviderStateMixin: function __SelectionHandleOverlayState_State_SingleTickerProviderStateMixin() {
    },
    __SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin: function __SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin() {
    },
    TextSelectionToolbarAnchors_TextSelectionToolbarAnchors$fromSelection(endGlyphHeight, renderBox, selectionEndpoints, startGlyphHeight) {
      var editingRegion, t1, t2, t3,
        selectionRect = A.TextSelectionToolbarAnchors_getSelectionRect(renderBox, startGlyphHeight, endGlyphHeight, selectionEndpoints);
      if (selectionRect.$eq(0, C.Rect_0_0_0_0))
        return D.TextSelectionToolbarAnchors_Offset_0_0_null;
      editingRegion = A.TextSelectionToolbarAnchors__getEditingRegion(renderBox);
      t1 = selectionRect.left;
      t1 += (selectionRect.right - t1) / 2;
      t2 = editingRegion.top;
      t3 = editingRegion.bottom;
      return new A.TextSelectionToolbarAnchors(new B.Offset(t1, B.clampDouble(selectionRect.top, t2, t3)), new B.Offset(t1, B.clampDouble(selectionRect.bottom, t2, t3)));
    },
    TextSelectionToolbarAnchors__getEditingRegion(renderBox) {
      var t1 = B.MatrixUtils_transformPoint(renderBox.getTransformTo$1(null), C.Offset_0_0),
        t2 = renderBox.get$size().bottomRight$1(C.Offset_0_0);
      return B.Rect$fromPoints(t1, B.MatrixUtils_transformPoint(renderBox.getTransformTo$1(null), t2));
    },
    TextSelectionToolbarAnchors_getSelectionRect(renderBox, startGlyphHeight, endGlyphHeight, selectionEndpoints) {
      var isMultiline, t2, t3, t4,
        editingRegion = A.TextSelectionToolbarAnchors__getEditingRegion(renderBox),
        t1 = editingRegion.left;
      if (isNaN(t1) || isNaN(editingRegion.top) || isNaN(editingRegion.right) || isNaN(editingRegion.bottom))
        return C.Rect_0_0_0_0;
      isMultiline = C.JSArray_methods.get$last(selectionEndpoints).point._dy - C.JSArray_methods.get$first(selectionEndpoints).point._dy > endGlyphHeight / 2;
      t2 = isMultiline ? t1 : t1 + C.JSArray_methods.get$first(selectionEndpoints).point._dx;
      t3 = editingRegion.top;
      t4 = C.JSArray_methods.get$first(selectionEndpoints);
      t1 = isMultiline ? editingRegion.right : t1 + C.JSArray_methods.get$last(selectionEndpoints).point._dx;
      return new B.Rect(t2, t3 + t4.point._dy - startGlyphHeight, t1, t3 + C.JSArray_methods.get$last(selectionEndpoints).point._dy);
    },
    TextSelectionToolbarAnchors: function TextSelectionToolbarAnchors(t0, t1) {
      this.primaryAnchor = t0;
      this.secondaryAnchor = t1;
    },
    TextSelectionToolbarLayoutDelegate_centerOn(position, width, max) {
      var t1 = width / 2,
        t2 = position - t1;
      if (t2 < 0)
        return 0;
      if (position + t1 > max)
        return max - width;
      return t2;
    },
    TextSelectionToolbarLayoutDelegate: function TextSelectionToolbarLayoutDelegate(t0, t1, t2) {
      this.anchorAbove = t0;
      this.anchorBelow = t1;
      this.fitsAbove = t2;
    },
    _throttle(duration, $function, $T) {
      var t1 = {};
      t1.timer = null;
      return new A._throttle_closure(t1, B._Cell$named("arg"), duration, $function, $T);
    },
    UndoHistory: function UndoHistory(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.value = t0;
      _.shouldChangeUndoStack = t1;
      _.undoStackModifier = t2;
      _.onTriggered = t3;
      _.focusNode = t4;
      _.controller = t5;
      _.child = t6;
      _.key = t7;
      _.$ti = t8;
    },
    UndoHistoryState: function UndoHistoryState(t0, t1) {
      var _ = this;
      _._undo_history$_stack = t0;
      _.__UndoHistoryState__throttledPush_F = $;
      _._throttleTimer = null;
      _._duringTrigger = false;
      _._framework$_element = _._widget = _._undo_history$_controller = _._undo_history$_lastValue = null;
      _.$ti = t1;
    },
    UndoHistoryState_initState_closure: function UndoHistoryState_initState_closure(t0) {
      this.$this = t0;
    },
    UndoHistoryValue: function UndoHistoryValue(t0, t1) {
      this.canUndo = t0;
      this.canRedo = t1;
    },
    UndoHistoryController: function UndoHistoryController(t0, t1, t2, t3) {
      var _ = this;
      _.onUndo = t0;
      _.onRedo = t1;
      _._change_notifier$_value = t2;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t3;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    },
    _UndoStack: function _UndoStack(t0, t1) {
      this._undo_history$_list = t0;
      this._undo_history$_index = -1;
      this.$ti = t1;
    },
    _throttle_closure: function _throttle_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.arg = t1;
      _.duration = t2;
      _.$function = t3;
      _.T = t4;
    },
    _throttle__closure: function _throttle__closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$function = t1;
      this.arg = t2;
    },
    _UndoHistoryState_State_UndoManagerClient: function _UndoHistoryState_State_UndoManagerClient() {
    },
    WidgetSpan: function WidgetSpan() {
    },
    WidgetStateMouseCursor__textable(states) {
      if (states.contains$1(0, C.WidgetState_6))
        return C.SystemMouseCursor_basic;
      return C.SystemMouseCursor_text;
    },
    _WidgetStateBorderSide$(_resolve) {
      return new A._WidgetStateBorderSide(_resolve, C.Color_vnR, 1, C.BorderStyle_1, -1);
    },
    _WidgetStateTextStyle$(_resolve) {
      var _null = null;
      return new A._WidgetStateTextStyle(_resolve, true, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    WidgetStateBorderSide: function WidgetStateBorderSide() {
    },
    _WidgetStateBorderSide: function _WidgetStateBorderSide(t0, t1, t2, t3, t4) {
      var _ = this;
      _._resolve = t0;
      _.color = t1;
      _.width = t2;
      _.style = t3;
      _.strokeAlign = t4;
    },
    WidgetStateTextStyle: function WidgetStateTextStyle() {
    },
    _WidgetStateTextStyle: function _WidgetStateTextStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _._resolve = t0;
      _.inherit = t1;
      _.color = t2;
      _.backgroundColor = t3;
      _.fontFamily = t4;
      _._text_style$_fontFamilyFallback = t5;
      _._package = t6;
      _.fontSize = t7;
      _.fontWeight = t8;
      _.fontStyle = t9;
      _.letterSpacing = t10;
      _.wordSpacing = t11;
      _.textBaseline = t12;
      _.height = t13;
      _.leadingDistribution = t14;
      _.locale = t15;
      _.foreground = t16;
      _.background = t17;
      _.decoration = t18;
      _.decorationColor = t19;
      _.decorationStyle = t20;
      _.decorationThickness = t21;
      _.debugLabel = t22;
      _.shadows = t23;
      _.fontFeatures = t24;
      _.fontVariations = t25;
      _.overflow = t26;
    },
    MapBase__fillMapWithIterables(map, keys, values) {
      var valueIterator, hasNextKey, hasNextValue,
        t1 = keys._map,
        keyIterator = new B.LinkedHashMapValueIterator(t1, t1._modifications, t1._first);
      t1 = values._map;
      valueIterator = new B.LinkedHashMapKeyIterator(t1, t1._modifications, t1._first);
      hasNextKey = keyIterator.moveNext$0();
      hasNextValue = valueIterator.moveNext$0();
      while (true) {
        if (!(hasNextKey && hasNextValue))
          break;
        map.$indexSet(0, keyIterator.__js_helper$_current, valueIterator.__js_helper$_current);
        hasNextKey = keyIterator.moveNext$0();
        hasNextValue = valueIterator.moveNext$0();
      }
      if (hasNextKey || hasNextValue)
        throw B.wrapException(B.ArgumentError$("Iterables do not have same length.", null));
    },
    CupertinoTextField_inferIOSSpellCheckConfiguration(configuration) {
      return D.SpellCheckConfiguration_asH;
    },
    CupertinoTheme_of(context) {
      var inheritedTheme = context.dependOnInheritedWidgetOfExactType$1$0(type$.InheritedCupertinoTheme),
        t1 = inheritedTheme == null ? null : inheritedTheme.theme.data;
      return (t1 == null ? C.CupertinoThemeData_TnQ : t1).resolveFrom$1(context);
    },
    CupertinoTheme_brightnessOf(context) {
      var inheritedTheme = context.dependOnInheritedWidgetOfExactType$1$0(type$.InheritedCupertinoTheme),
        t1 = inheritedTheme == null ? null : inheritedTheme.theme.data.get$brightness();
      if (t1 == null) {
        t1 = B.MediaQuery__maybeOf(context, C._MediaQueryAspect_5);
        t1 = t1 == null ? null : t1.platformBrightness;
        if (t1 == null)
          t1 = C.Brightness_1;
      }
      return t1;
    },
    ButtonStyleButton_scaledPadding(geometry1x, geometry2x, geometry3x, fontSizeMultiplier) {
      var t1;
      $label0$0: {
        if (fontSizeMultiplier <= 1) {
          t1 = geometry1x;
          break $label0$0;
        }
        if (fontSizeMultiplier < 2) {
          t1 = B.EdgeInsetsGeometry_lerp(geometry1x, geometry2x, fontSizeMultiplier - 1);
          t1.toString;
          break $label0$0;
        }
        if (fontSizeMultiplier < 3) {
          t1 = B.EdgeInsetsGeometry_lerp(geometry2x, geometry3x, fontSizeMultiplier - 2);
          t1.toString;
          break $label0$0;
        }
        t1 = geometry3x;
        break $label0$0;
      }
      return t1;
    },
    HapticFeedback_selectionClick() {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void);
      var $async$HapticFeedback_selectionClick = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return B._asyncAwait(C.OptionalMethodChannel_ZFR.invokeMethod$1$2("HapticFeedback.vibrate", "HapticFeedbackType.selectionClick", type$.void), $async$HapticFeedback_selectionClick);
            case 2:
              // returning from await.
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$HapticFeedback_selectionClick, $async$completer);
    },
    Scribe_isFeatureAvailable() {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, result;
      var $async$Scribe_isFeatureAvailable = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return B._asyncAwait(D.OptionalMethodChannel_13P.invokeMethod$1$1("Scribe.isFeatureAvailable", type$.nullable_bool), $async$Scribe_isFeatureAvailable);
            case 3:
              // returning from await.
              result = $async$result;
              if (result == null)
                throw B.wrapException(B.FlutterError_FlutterError("MethodChannel.invokeMethod unexpectedly returned null."));
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$Scribe_isFeatureAvailable, $async$completer);
    },
    TextSelection$collapsed(affinity, offset) {
      return new B.TextSelection(offset, offset, affinity, false, offset, offset);
    },
    TextSelection$fromPosition(position) {
      var t1 = position.offset;
      return new B.TextSelection(t1, t1, position.affinity, false, t1, t1);
    },
    TextLayoutMetrics_isWhitespace(codeUnit) {
      switch (codeUnit) {
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 160:
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8239:
        case 8287:
        case 12288:
          break;
        default:
          return false;
      }
      return true;
    },
    Navigator_maybeOf(context) {
      var t2, _0_2, $navigator,
        t1 = context._framework$_state;
      t1.toString;
      t2 = t1 instanceof B.NavigatorState;
      _0_2 = t1;
      t1 = t2;
      if (t1) {
        type$.NavigatorState._as(_0_2);
        $navigator = _0_2;
      } else
        $navigator = null;
      t1 = $navigator == null ? context.findAncestorStateOfType$1$0(type$.NavigatorState) : $navigator;
      return t1;
    },
    ModalRoute_isCurrentOf(context) {
      var t1 = B.ModalRoute__of(context, C._ModalRouteAspect_0, type$.nullable_Object);
      return t1 == null ? null : t1.get$isCurrent();
    }
  },
  D;
  J = holdersList[1];
  B = holdersList[0];
  C = holdersList[2];
  E = holdersList[12];
  A = hunkHelpers.updateHolder(holdersList[10], A);
  D = holdersList[13];
  A.SizeTween.prototype = {
    lerp$1(t) {
      return B.Size_lerp(this.begin, this.end, t);
    }
  };
  A.CupertinoButtonSize.prototype = {
    _enumToString$0() {
      return "CupertinoButtonSize." + this._name;
    }
  };
  A._CupertinoButtonStyle.prototype = {
    _enumToString$0() {
      return "_CupertinoButtonStyle." + this._name;
    }
  };
  A.CupertinoButton.prototype = {
    createState$0() {
      return new A._CupertinoButtonState(new B.Tween(1, null, type$.Tween_double), null, null);
    }
  };
  A._CupertinoButtonState.prototype = {
    initState$0() {
      var t1, t2, t3, _this = this;
      _this.super$State$initState();
      _this.___CupertinoButtonState_isFocused_A = false;
      t1 = B.AnimationController$(null, C.Duration_200000, null, 0, _this);
      _this.___CupertinoButtonState__animationController_A = t1;
      t2 = type$.Animation_double;
      t3 = _this._opacityTween;
      _this.___CupertinoButtonState__opacityAnimation_A = new B._AnimatedEvaluation(t2._as(new B._AnimatedEvaluation(t2._as(t1), new B.CurveTween(C.C__DecelerateCurve), type$.CurveTween._eval$1("_AnimatedEvaluation<Animatable.T>"))), t3, t3.$ti._eval$1("_AnimatedEvaluation<Animatable.T>"));
      _this._setTween$0();
    },
    didUpdateWidget$1(old) {
      this.super$State$didUpdateWidget(old);
      this._setTween$0();
    },
    _setTween$0() {
      var t1 = this._widget.pressedOpacity;
      this._opacityTween.end = t1;
    },
    dispose$0() {
      var t1 = this.___CupertinoButtonState__animationController_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      this.super$__CupertinoButtonState_State_SingleTickerProviderStateMixin$dispose();
    },
    _handleTapDown$1($event) {
      if (!this._buttonHeldDown) {
        this._buttonHeldDown = true;
        this._animate$0();
      }
    },
    _handleTapUp$1($event) {
      if (this._buttonHeldDown) {
        this._buttonHeldDown = false;
        this._animate$0();
      }
    },
    _handleTapCancel$0() {
      if (this._buttonHeldDown) {
        this._buttonHeldDown = false;
        this._animate$0();
      }
    },
    _handleTap$1(__wc0_formal) {
      var t1 = this._widget.onPressed;
      if (t1 != null) {
        t1.call$0();
        this._framework$_element.get$renderObject().sendSemanticsEvent$1(C.TapSemanticEvent_tap);
      }
    },
    _handleTap$0() {
      return this._handleTap$1(null);
    },
    _animate$0() {
      var t2, wasHeldDown, ticker,
        t1 = this.___CupertinoButtonState__animationController_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t2 = t1._ticker;
      if (t2 != null && t2._ticker$_future != null)
        return;
      wasHeldDown = this._buttonHeldDown;
      if (wasHeldDown) {
        t1._direction = C._AnimationDirection_0;
        ticker = t1._animateToInternal$3$curve$duration(1, D.ThreePointCubic_r2X, D.Duration_120000);
      } else {
        t1._direction = C._AnimationDirection_0;
        ticker = t1._animateToInternal$3$curve$duration(0, C.Cubic_ENF, D.Duration_180000);
      }
      ticker.then$1$1(new A._CupertinoButtonState__animate_closure(this, wasHeldDown), type$.void);
    },
    _onShowFocusHighlight$1(showHighlight) {
      this.setState$1(new A._CupertinoButtonState__onShowFocusHighlight_closure(this, showHighlight));
    },
    build$1(context) {
      var backgroundColor, t3, foregroundColor, red, green, blue, max, min, delta, hue, lightness, effectiveFocusOutlineColor, textStyle, iconTheme, value, result, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, _this = this, _null = null,
        t1 = _this._widget.onPressed == null,
        enabled = !t1,
        themeData = A.CupertinoTheme_of(context),
        primaryColor = themeData.get$primaryColor(),
        t2 = _this._widget.color;
      if (t2 == null)
        t2 = _null;
      else if (t2 instanceof B.CupertinoDynamicColor)
        t2 = t2.resolveFrom$1(context);
      if (t2 == null)
        backgroundColor = _null;
      else {
        t3 = _this._widget.color;
        t3 = t3 == null ? _null : t3.get$opacity();
        if (t3 == null)
          t3 = 1;
        backgroundColor = t2.withOpacity$1(t3);
      }
      _this._widget.toString;
      if (enabled)
        foregroundColor = primaryColor;
      else {
        t2 = D.CupertinoDynamicColor_RmM.resolveFrom$1(context);
        foregroundColor = t2;
      }
      _this._widget.toString;
      t2 = (backgroundColor == null ? C.CupertinoDynamicColor_QkJ : backgroundColor).withOpacity$1(0.8);
      red = (t2.toARGB32$0() >>> 16 & 255) / 255;
      green = (t2.toARGB32$0() >>> 8 & 255) / 255;
      blue = (t2.toARGB32$0() & 255) / 255;
      max = Math.max(red, Math.max(green, blue));
      min = Math.min(red, Math.min(green, blue));
      delta = max - min;
      t2 = t2.toARGB32$0();
      hue = B._Cell$named("hue");
      if (max === 0)
        hue._value = 0;
      else if (max === red)
        hue._value = 60 * C.JSNumber_methods.$mod((green - blue) / delta, 6);
      else if (max === green)
        hue._value = 60 * ((blue - red) / delta + 2);
      else if (max === blue)
        hue._value = 60 * ((red - green) / delta + 4);
      hue._value = isNaN(hue._readLocal$0()) ? 0 : hue._readLocal$0();
      t3 = hue._readLocal$0();
      lightness = (max + min) / 2;
      if (lightness !== 1)
        B.clampDouble(delta / (1 - Math.abs(2 * lightness - 1)), 0, 1);
      effectiveFocusOutlineColor = new B.HSLColor((t2 >>> 24 & 255) / 255, t3, 0.835, 0.69).toColor$0();
      _this._widget.toString;
      t2 = themeData.get$textTheme().get$actionTextStyle();
      textStyle = t2.copyWith$1$color(foregroundColor);
      t2 = B.IconTheme_of(context);
      t3 = textStyle.fontSize;
      iconTheme = t2.copyWith$2$color$size(foregroundColor, t3 != null ? t3 * 1.2 : 20);
      t2 = enabled ? C.SystemMouseCursor_click : C.C__DeferringMouseCursor;
      value = _this.___CupertinoButtonState__actionMap_FI;
      if (value === $) {
        result = B.LinkedHashMap_LinkedHashMap$_literal([C.Type_ActivateIntent_2HG, new B.CallbackAction(_this.get$_handleTap(), new B.ObserverList(B._setArrayType([], type$.JSArray_of_void_Function_Action_Intent), type$.ObserverList_of_void_Function_Action_Intent), type$.CallbackAction_ActivateIntent)], type$.Type, type$.Action_Intent);
        _this.___CupertinoButtonState__actionMap_FI !== $ && B.throwUnnamedLateFieldADI();
        _this.___CupertinoButtonState__actionMap_FI = result;
        value = result;
      }
      t3 = _this._widget;
      t3.toString;
      t4 = enabled ? _this.get$_handleTapDown() : _null;
      t5 = enabled ? _this.get$_handleTapUp() : _null;
      t6 = enabled ? _this.get$_handleTapCancel() : _null;
      t7 = t3.minSize;
      t8 = t7 == null;
      t9 = t8 ? 44 : t7;
      if (t8)
        t7 = 44;
      t8 = _this.___CupertinoButtonState__opacityAnimation_A;
      t8 === $ && B.throwUnnamedLateFieldNI();
      if (enabled) {
        t10 = _this.___CupertinoButtonState_isFocused_A;
        t10 === $ && B.throwUnnamedLateFieldNI();
      } else
        t10 = false;
      if (t10) {
        t10 = new B.BorderSide(effectiveFocusOutlineColor, 3.5, C.BorderStyle_1, 1);
        t10 = new B.Border(t10, t10, t10, t10);
      } else
        t10 = _null;
      t11 = t3.borderRadius;
      if (t11 == null)
        t11 = $.$get$kCupertinoButtonSizeBorderRadius().$index(0, D.CupertinoButtonSize_2);
      if (backgroundColor != null && t1) {
        t1 = _this._widget.disabledColor;
        if (t1 instanceof B.CupertinoDynamicColor)
          t1 = t1.resolveFrom$1(context);
      } else
        t1 = backgroundColor;
      t12 = _this._widget;
      t13 = t12.padding;
      return B.MouseRegion$(new A.FocusableActionDetector(enabled, _null, false, value, _this.get$_onShowFocusHighlight(), _null, B.GestureDetector$(C.HitTestBehavior_1, B.Semantics$(true, new B.ConstrainedBox(new B.BoxConstraints(t9, 1 / 0, t7, 1 / 0), new B.FadeTransition(t8, false, B.DecoratedBox$(new B.Padding(t13, new B.Align(t12.alignment, 1, 1, B.DefaultTextStyle$(B.IconTheme$(t12.child, iconTheme, _null), _null, _null, C.TextOverflow_0, true, textStyle, _null, _null, C.TextWidthBasis_0), _null), _null), new B.BoxDecoration(t1, _null, t10, t11, _null, _null, C.BoxShape_0), C.DecorationPosition_0), _null), _null), false, _null, _null, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), C.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, t3.onPressed, t6, t4, t5, _null, _null, _null), _null), t2, _null, _null, _null, _null);
    }
  };
  A.__CupertinoButtonState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0() {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTicker());
      _this.SingleTickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  A._CupertinoDesktopTextSelectionHandleControls.prototype = {};
  A.CupertinoDesktopTextSelectionControls.prototype = {
    getHandleSize$1(textLineHeight) {
      return C.Size_0_0;
    },
    buildHandle$4(context, type, textLineHeight, onTap) {
      return C.SizedBox_0_0_null_null;
    },
    getHandleAnchor$2(type, textLineHeight) {
      return C.Offset_0_0;
    }
  };
  A.__CupertinoDesktopTextSelectionHandleControls_CupertinoDesktopTextSelectionControls_TextSelectionHandleControls.prototype = {};
  A.CupertinoDesktopTextSelectionToolbar.prototype = {
    build$1(context) {
      var _null = null,
        paddingAbove = B.InheritedModel_inheritFrom(context, C._MediaQueryAspect_6, type$.MediaQuery).data.padding.top + 8,
        t1 = this.anchor.$sub(0, new B.Offset(8, paddingAbove)),
        t2 = B.Column$(this.children, C.CrossAxisAlignment_2, C.MainAxisAlignment_0, C.MainAxisSize_0),
        t3 = $.$get$_renderer().createBlurImageFilter$3$sigmaX$sigmaY$tileMode(20, 20, _null);
      return new B.Padding(new B.EdgeInsets(8, paddingAbove, 8, 8), new B.CustomSingleChildLayout(new A.DesktopTextSelectionToolbarLayoutDelegate(t1), B.Container$(_null, B.BackdropFilter$(B.DecoratedBox$(new B.Padding(D.EdgeInsets_6_6_6_6, t2, _null), new B.BoxDecoration(D.CupertinoDynamicColor_JY4.resolveFrom$1(context), _null, B.Border_Border$all(D.CupertinoDynamicColor_pDp.resolveFrom$1(context), 1), D.BorderRadius_3vw, _null, _null, C.BoxShape_0), C.DecorationPosition_0), t3), C.Clip_1, _null, D.BoxDecoration_Uph, _null, _null, _null, _null, _null, _null, 222), _null), _null);
    }
  };
  A.CupertinoDesktopTextSelectionToolbarButton.prototype = {
    createState$0() {
      return new A._CupertinoDesktopTextSelectionToolbarButtonState();
    }
  };
  A._CupertinoDesktopTextSelectionToolbarButtonState.prototype = {
    _onEnter$1($event) {
      this.setState$1(new A._CupertinoDesktopTextSelectionToolbarButtonState__onEnter_closure(this));
    },
    _onExit$1($event) {
      this.setState$1(new A._CupertinoDesktopTextSelectionToolbarButtonState__onExit_closure(this));
    },
    build$1(context) {
      var _this = this, _null = null,
        t1 = _this._widget.text,
        child = B.Text$(t1, _null, C.TextOverflow_2, _null, D.TextStyle_dPI.copyWith$1$color(_this._isHovered ? A.CupertinoTheme_of(context).get$primaryContrastingColor() : D.CupertinoDynamicColor_ml5.resolveFrom$1(context)), _null, _null);
      t1 = _this._isHovered ? A.CupertinoTheme_of(context).get$primaryColor() : _null;
      return B.SizedBox$(B.MouseRegion$(A.CupertinoButton$(C.Alignment_m1_0, C.BorderRadius_nnp, child, t1, D.CupertinoDynamicColor_zvp, 0, _this._widget.onPressed, D.EdgeInsets_8_2_8_5, 0.7), C.C__DeferringMouseCursor, _null, _this.get$_onEnter(), _this.get$_onExit(), _null), _null, 1 / 0);
    }
  };
  A.CupertinoTextMagnifier.prototype = {
    createState$0() {
      return new A._CupertinoTextMagnifierState(C.Offset_0_0, null, null);
    }
  };
  A._CupertinoTextMagnifierState.prototype = {
    initState$0() {
      var t1, t2, _this = this;
      _this.super$State$initState();
      t1 = B.AnimationController$(null, C.Duration_150000, null, 0, _this);
      t1.didRegisterListener$0();
      t1.AnimationLocalListenersMixin__listeners.add$1(0, new A._CupertinoTextMagnifierState_initState_closure(_this));
      _this.___CupertinoTextMagnifierState__ioAnimationController_F !== $ && B.throwUnnamedLateFieldAI();
      _this.___CupertinoTextMagnifierState__ioAnimationController_F = t1;
      t2 = _this._widget;
      t2.controller.animationController = t1;
      t2.magnifierInfo.addListener$1(_this.get$_magnifier0$_determineMagnifierPositionAndFocalPoint());
      _this._widget.toString;
      t1 = B.CurvedAnimation$(C.Cubic_ts0, t1, null);
      _this.___CupertinoTextMagnifierState__ioCurvedAnimation_F !== $ && B.throwUnnamedLateFieldAI();
      _this.___CupertinoTextMagnifierState__ioCurvedAnimation_F = t1;
      t2 = type$.Tween_double;
      _this.___CupertinoTextMagnifierState__ioAnimation_F !== $ && B.throwUnnamedLateFieldAI();
      _this.___CupertinoTextMagnifierState__ioAnimation_F = new B._AnimatedEvaluation(t1, new B.Tween(0, 1, t2), t2._eval$1("_AnimatedEvaluation<Animatable.T>"));
    },
    dispose$0() {
      var t1, _this = this;
      _this._widget.controller.animationController = null;
      t1 = _this.___CupertinoTextMagnifierState__ioAnimationController_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.___CupertinoTextMagnifierState__ioCurvedAnimation_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      _this._widget.magnifierInfo.removeListener$1(_this.get$_magnifier0$_determineMagnifierPositionAndFocalPoint());
      _this.super$__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin$dispose();
    },
    didUpdateWidget$1(oldWidget) {
      var t2, _this = this,
        t1 = oldWidget.magnifierInfo;
      if (t1 !== _this._widget.magnifierInfo) {
        t2 = _this.get$_magnifier0$_determineMagnifierPositionAndFocalPoint();
        t1.removeListener$1(t2);
        _this._widget.magnifierInfo.addListener$1(t2);
      }
      _this.super$State$didUpdateWidget(oldWidget);
    },
    didChangeDependencies$0() {
      this._magnifier0$_determineMagnifierPositionAndFocalPoint$0();
      this.super$State$didChangeDependencies();
    },
    _magnifier0$_determineMagnifierPositionAndFocalPoint$0() {
      var verticalPositionOfLens, _this = this,
        textEditingContext = _this._widget.magnifierInfo.get$value(),
        verticalCenterOfCurrentLine = textEditingContext.caretRect.get$center()._dy,
        t1 = textEditingContext.globalGesturePosition,
        t2 = verticalCenterOfCurrentLine - t1._dy,
        t3 = _this._widget;
      t3.toString;
      if (t2 < -48) {
        if (t3.controller.get$shown())
          _this._widget.controller.hide$1$removeFromOverlay(false);
        return;
      }
      if (!t3.controller.get$shown()) {
        t3 = _this.___CupertinoTextMagnifierState__ioAnimationController_F;
        t3 === $ && B.throwUnnamedLateFieldNI();
        t3.forward$0();
      }
      _this._widget.toString;
      verticalPositionOfLens = Math.max(verticalCenterOfCurrentLine, verticalCenterOfCurrentLine - t2 / 10);
      t1 = t1._dx - 40;
      t2 = verticalPositionOfLens - 73.5;
      t3 = _this._framework$_element;
      t3.toString;
      t3 = B.InheritedModel_inheritFrom(t3, C._MediaQueryAspect_0, type$.MediaQuery).data.size;
      _this._widget.toString;
      t2 = A.MagnifierController_shiftWithinBounds(new B.Rect(10, -21.5, 0 + t3._dx - 10, 0 + t3._dy + 21.5), new B.Rect(t1, t2, t1 + 80, t2 + 47.5));
      _this.setState$1(new A._CupertinoTextMagnifierState__determineMagnifierPositionAndFocalPoint_closure(_this, new B.Offset(t2.left, t2.top), verticalCenterOfCurrentLine, verticalPositionOfLens));
    },
    build$1(context) {
      var t1, t2, t3, _this = this,
        themeData = A.CupertinoTheme_of(context);
      _this._widget.toString;
      t1 = _this._currentAdjustedMagnifierPosition;
      t2 = _this.___CupertinoTextMagnifierState__ioAnimation_F;
      t2 === $ && B.throwUnnamedLateFieldNI();
      t3 = _this._verticalFocalPointAdjustment;
      return A.AnimatedPositioned$(new A.CupertinoMagnifier(new B.BorderSide(themeData.get$primaryColor(), 2, C.BorderStyle_1, -1), t2, new B.Offset(0, t3), null), C.Cubic_ts0, D.Duration_45000, t1._dx, t1._dy);
    }
  };
  A.CupertinoMagnifier.prototype = {
    build$1(context) {
      var focalPointOffset, t3, _null = null,
        t1 = this.inOutAnimation,
        t2 = t1._evaluatable;
      t1 = t1.parent;
      t2.transform$1(t1.get$value());
      focalPointOffset = new B.Offset(0, 49.75).$add(0, this.additionalFocalPointOffset);
      t3 = t2.transform$1(t1.get$value());
      t3 = B.Offset_lerp(D.Offset_0_26, C.Offset_0_0, t3 == null ? 1 : t3);
      t3.toString;
      t1 = t2.transform$1(t1.get$value());
      if (t1 == null)
        t1 = 1;
      t1 = A.RawMagnifier$(_null, C.Clip_0, new A.MagnifierDecoration(t1, D.List_Qj8, new B.RoundedRectangleBorder(D.BorderRadius_MP8, this.borderSide)), focalPointOffset, 1, D.Size_RzZ);
      return new B.Transform(B.Matrix4_Matrix4$translationValues(t3._dx, t3._dy, 0), _null, true, _null, t1, _null);
    }
  };
  A.__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0() {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTicker());
      _this.SingleTickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  A._CupertinoTextSelectionHandlePainter.prototype = {
    paint$2(canvas, size) {
      var circle, line, path,
        t1 = $.$get$_renderer(),
        paint = t1.createPaint$0();
      paint.set$color(this.color);
      circle = B.Rect$fromCircle(D.Offset_6_6, 6);
      line = B.Rect$fromPoints(D.Offset_PXW, new B.Offset(7, size._dy));
      path = t1.createPath$0();
      path.addOval$1(circle);
      path.addRect$1(line);
      canvas.drawPath$2(path, paint);
    },
    shouldRepaint$1(oldPainter) {
      return !this.color.$eq(0, oldPainter.color);
    }
  };
  A.CupertinoTextSelectionHandleControls.prototype = {};
  A.CupertinoTextSelectionControls.prototype = {
    getHandleSize$1(textLineHeight) {
      return new B.Size(12, textLineHeight + 12 - 1.5);
    },
    buildHandle$4(context, type, textLineHeight, onTap) {
      var t1, handle, t2, _null = null,
        customPaint = B.CustomPaint$(_null, _null, _null, new A._CupertinoTextSelectionHandlePainter(A.CupertinoTheme_of(context).get$primaryColor(), _null), C.Size_0_0);
      switch (type.index) {
        case 0:
          return A.SizedBox$fromSize(customPaint, new B.Size(12, textLineHeight + 12 - 1.5));
        case 1:
          t1 = textLineHeight + 12 - 1.5;
          handle = A.SizedBox$fromSize(customPaint, new B.Size(12, t1));
          t2 = new B.Matrix40(new Float64Array(16));
          t2.setIdentity$0();
          t2.translate$2(6, t1 / 2);
          t2.rotateZ$1(3.141592653589793);
          t2.translate$2(-6, -t1 / 2);
          return B.Transform$(_null, handle, _null, t2, true);
        case 2:
          return A.SizedBox$fromSize(_null, new B.Size(12, textLineHeight + 12 - 1.5));
      }
    },
    getHandleAnchor$2(type, textLineHeight) {
      var t1 = textLineHeight + 12 - 1.5;
      switch (type.index) {
        case 0:
          return new B.Offset(6, t1);
        case 1:
          return new B.Offset(6, t1 - 12 + 1.5);
        case 2:
          return new B.Offset(6, textLineHeight + (t1 - textLineHeight) / 2);
      }
    }
  };
  A._CupertinoTextSelectionHandleControls_CupertinoTextSelectionControls_TextSelectionHandleControls.prototype = {};
  A.CupertinoTextSelectionToolbar.prototype = {
    build$1(context) {
      var anchorAboveAdjusted, anchorBelowAdjusted, _null = null,
        t1 = type$.MediaQuery,
        mediaQueryPadding = B.InheritedModel_inheritFrom(context, C._MediaQueryAspect_6, t1).data.padding,
        paddingAbove = mediaQueryPadding.top + 8,
        leftMargin = 26 + mediaQueryPadding.left,
        rightMargin = B.InheritedModel_inheritFrom(context, C._MediaQueryAspect_0, t1).data.size._dx - mediaQueryPadding.right - 26;
      t1 = this.anchorAbove;
      anchorAboveAdjusted = new B.Offset(B.clampDouble(t1._dx, leftMargin, rightMargin), t1._dy - 8 - paddingAbove);
      t1 = this.anchorBelow;
      anchorBelowAdjusted = new B.Offset(B.clampDouble(t1._dx, leftMargin, rightMargin), t1._dy + 8 - paddingAbove);
      return new B.Padding(new B.EdgeInsets(8, paddingAbove, 8, 8), new B.CustomSingleChildLayout(new A.TextSelectionToolbarLayoutDelegate(anchorAboveAdjusted, anchorBelowAdjusted, _null), new A._CupertinoTextSelectionToolbarContent(anchorAboveAdjusted, anchorBelowAdjusted, this.children, A.text_selection_toolbar0_CupertinoTextSelectionToolbar__defaultToolbarBuilder$closure(), _null), _null), _null);
    }
  };
  A._CupertinoTextSelectionToolbarShape.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._RenderCupertinoTextSelectionToolbarShape(this._anchorAbove, this._anchorBelow, this._shadowColor, B.LayerHandle$(), null, new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$anchorAbove(this._anchorAbove);
      renderObject.set$anchorBelow(this._anchorBelow);
      renderObject.set$shadowColor(this._shadowColor);
    }
  };
  A._RenderCupertinoTextSelectionToolbarShape.prototype = {
    get$isRepaintBoundary() {
      return true;
    },
    set$anchorAbove(value) {
      if (value.$eq(0, this._anchorAbove))
        return;
      this._anchorAbove = value;
      this.markNeedsLayout$0();
    },
    set$anchorBelow(value) {
      if (value.$eq(0, this._anchorBelow))
        return;
      this._anchorBelow = value;
      this.markNeedsLayout$0();
    },
    set$shadowColor(value) {
      if (J.$eq$(value, this._shadowColor))
        return;
      this._shadowColor = value;
      this.markNeedsPaint$0();
    },
    _text_selection_toolbar0$_isAbove$1(childHeight) {
      return this._anchorAbove._dy >= childHeight - 14;
    },
    _constraintsForChild$1(constraints) {
      return new B.BoxConstraints(30, 1 / 0, 0, 1 / 0).enforce$1(new B.BoxConstraints(0, constraints.maxWidth, 0, constraints.maxHeight));
    },
    _computeChildOffset$1(childSize) {
      return new B.Offset(0, this._text_selection_toolbar0$_isAbove$1(childSize._dy) ? -7 : 0);
    },
    computeDryBaseline$2(constraints, baseline) {
      var enforcedConstraint, result,
        child = this.RenderObjectWithChildMixin__child;
      if (child == null)
        return null;
      enforcedConstraint = this._constraintsForChild$1(constraints);
      result = child.getDryBaseline$2(enforcedConstraint, baseline);
      return result == null ? null : result + this._computeChildOffset$1(child._computeIntrinsics$3(C.C__DryLayout, enforcedConstraint, child.get$_box$_computeDryLayout()))._dy;
    },
    performLayout$0() {
      var t1, _this = this,
        child = _this.RenderObjectWithChildMixin__child;
      if (child == null)
        return;
      child.layout$2$parentUsesSize(_this._constraintsForChild$1(type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this))), true);
      t1 = child.parentData;
      t1.toString;
      type$.BoxParentData._as(t1).offset = _this._computeChildOffset$1(child.get$size());
      _this._box$_size = new B.Size(child.get$size()._dx, child.get$size()._dy - 7);
    },
    _text_selection_toolbar0$_clipPath$2(child, rrect) {
      var isAbove, arrowTipX, t1, t2, arrowBaseY, t3, _this = this,
        path = $.$get$_renderer().createPath$0();
      if (30 > _this.get$size()._dx) {
        path.addRRect$1(rrect);
        return path;
      }
      isAbove = _this._text_selection_toolbar0$_isAbove$1(child.get$size()._dy);
      arrowTipX = B.clampDouble(_this.globalToLocal$1(isAbove ? _this._anchorAbove : _this._anchorBelow)._dx, 15, _this.get$size()._dx - 7 - 8);
      t1 = arrowTipX + 7;
      t2 = arrowTipX - 7;
      if (isAbove) {
        arrowBaseY = child.get$size()._dy - 7;
        t3 = child.get$size();
        path.moveTo$2(t1, arrowBaseY);
        path.lineTo$2(arrowTipX, t3._dy);
        path.lineTo$2(t2, arrowBaseY);
      } else {
        path.moveTo$2(t2, 7);
        path.lineTo$2(arrowTipX, 0);
        path.lineTo$2(t1, 7);
      }
      t1 = A._RenderCupertinoTextSelectionToolbarShape__addRRectToPath(path, rrect, isAbove ? 1.5707963267948966 : -1.5707963267948966);
      t1.close$0();
      return t1;
    },
    paint$2(context, offset) {
      var t1, rrect, clipPath, t2, shadowRRect, t3, t4, _this = this,
        child = _this.RenderObjectWithChildMixin__child;
      if (child == null)
        return;
      t1 = child.parentData;
      t1.toString;
      type$.BoxParentData._as(t1);
      rrect = B.RRect$fromRectAndRadius(new B.Rect(0, 7, 0 + child.get$size()._dx, 7 + (child.get$size()._dy - 14)), C.Radius_8_8).scaleRadii$0();
      clipPath = _this._text_selection_toolbar0$_clipPath$2(child, rrect);
      t2 = _this._shadowColor;
      if (t2 != null) {
        shadowRRect = new B.RRect(rrect.left, rrect.top, rrect.right, rrect.bottom + 7, 8, 8, 8, 8, 8, 8, 8, 8, true).shift$1(offset.$add(0, t1.offset).$add(0, C.Offset_0_0));
        context.get$canvas().drawRRect$2(shadowRRect, new B.BoxShadow(0, C.BlurStyle_0, t2, C.Offset_0_0, 15).toPaint$0());
      }
      t2 = _this._clipPathLayer;
      t3 = _this.__RenderObject__needsCompositing_A;
      t3 === $ && B.throwUnnamedLateFieldNI();
      t1 = offset.$add(0, t1.offset);
      t4 = child.get$size();
      t2.set$layer(context.pushClipPath$6$oldLayer(t3, t1, new B.Rect(0, 0, 0 + t4._dx, 0 + t4._dy), clipPath, new A._RenderCupertinoTextSelectionToolbarShape_paint_closure(child), t2._layer));
    },
    dispose$0() {
      this._clipPathLayer.set$layer(null);
      this.super$RenderObject$dispose();
    },
    hitTestChildren$2$position(result, position) {
      var t1, t2,
        child = this.RenderObjectWithChildMixin__child;
      if (child == null)
        return false;
      t1 = child.parentData;
      t1.toString;
      t1 = type$.BoxParentData._as(t1).offset;
      t2 = t1._dx;
      t1 = t1._dy + 7;
      if (!new B.Rect(t2, t1, t2 + child.get$size()._dx, t1 + (child.get$size()._dy - 14)).contains$1(0, position))
        return false;
      return this.super$RenderShiftedBox$hitTestChildren(result, position);
    }
  };
  A._CupertinoTextSelectionToolbarContent.prototype = {
    createState$0() {
      return new A._CupertinoTextSelectionToolbarContentState(new B.LabeledGlobalKey(null, type$.LabeledGlobalKey_State_StatefulWidget), null, null);
    },
    toolbarBuilder$4(arg0, arg1, arg2, arg3) {
      return this.toolbarBuilder.call$4(arg0, arg1, arg2, arg3);
    }
  };
  A._CupertinoTextSelectionToolbarContentState.prototype = {
    _onHorizontalDragEnd$1(details) {
      var velocity = details.primaryVelocity;
      if (velocity != null && velocity !== 0)
        if (velocity > 0)
          this._handlePreviousPage$0();
        else
          this._handleNextPage$0();
    },
    _handleNextPage$0() {
      var _this = this,
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, _this._toolbarItemsKey);
      t1 = t1 == null ? null : t1.get$renderObject();
      type$.nullable_RenderBox._as(t1);
      if (t1 instanceof A._RenderCupertinoTextSelectionToolbarItems) {
        t1 = t1.___RenderCupertinoTextSelectionToolbarItems_hasNextPage_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
      } else
        t1 = false;
      if (t1) {
        t1 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t1.reverse$0();
        t1 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
        t1.didRegisterListener$0();
        t1 = t1.AnimationLocalStatusListenersMixin__statusListeners;
        t1._isDirty = true;
        t1._list.push(_this.get$_statusListener());
        _this._nextPage = _this._text_selection_toolbar0$_page + 1;
      }
    },
    _handlePreviousPage$0() {
      var _this = this,
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, _this._toolbarItemsKey);
      t1 = t1 == null ? null : t1.get$renderObject();
      type$.nullable_RenderBox._as(t1);
      if (t1 instanceof A._RenderCupertinoTextSelectionToolbarItems) {
        t1 = t1.___RenderCupertinoTextSelectionToolbarItems_hasPreviousPage_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
      } else
        t1 = false;
      if (t1) {
        t1 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t1.reverse$0();
        t1 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
        t1.didRegisterListener$0();
        t1 = t1.AnimationLocalStatusListenersMixin__statusListeners;
        t1._isDirty = true;
        t1._list.push(_this.get$_statusListener());
        _this._nextPage = _this._text_selection_toolbar0$_page - 1;
      }
    },
    _statusListener$1($status) {
      var t1, _this = this;
      if ($status !== C.AnimationStatus_0)
        return;
      _this.setState$1(new A._CupertinoTextSelectionToolbarContentState__statusListener_closure(_this));
      t1 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.forward$0();
      _this.___CupertinoTextSelectionToolbarContentState__controller_A.removeStatusListener$1(_this.get$_statusListener());
    },
    initState$0() {
      this.super$State$initState();
      this.___CupertinoTextSelectionToolbarContentState__controller_A = B.AnimationController$(null, D.Duration_125000, null, 1, this);
    },
    didUpdateWidget$1(oldWidget) {
      var t1, _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      if (_this._widget.children !== oldWidget.children) {
        _this._text_selection_toolbar0$_page = 0;
        _this._nextPage = null;
        t1 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t1.forward$0();
        _this.___CupertinoTextSelectionToolbarContentState__controller_A.removeStatusListener$1(_this.get$_statusListener());
      }
    },
    dispose$0() {
      var t1 = this.___CupertinoTextSelectionToolbarContentState__controller_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      this.super$__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin$dispose();
    },
    build$1(context) {
      var t3, t4, t5, _this = this, _null = null,
        chevronColor = D.CupertinoDynamicColor_ml5.resolveFrom$1(context),
        backButton = B.Center$(A.CupertinoTextSelectionToolbarButton$(B.IgnorePointer$(B.CustomPaint$(_null, _null, _null, new A._LeftCupertinoChevronPainter(chevronColor, true, _null), D.Size_10_10), true, _null), _this.get$_handlePreviousPage()), 1, 1),
        nextButton = B.Center$(A.CupertinoTextSelectionToolbarButton$(B.IgnorePointer$(B.CustomPaint$(_null, _null, _null, new A._RightCupertinoChevronPainter(chevronColor, false, _null), D.Size_10_10), true, _null), _this.get$_handleNextPage()), 1, 1),
        t1 = _this._widget.children,
        t2 = B._arrayInstanceType(t1)._eval$1("MappedListIterable<1,Center>"),
        children = B.List_List$of(new B.MappedListIterable(t1, new A._CupertinoTextSelectionToolbarContentState_build_closure(), t2), true, t2._eval$1("ListIterable.E"));
      t2 = _this._widget;
      t1 = t2.anchorAbove;
      t3 = t2.anchorBelow;
      t4 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
      t4 === $ && B.throwUnnamedLateFieldNI();
      t5 = _this._text_selection_toolbar0$_page;
      return t2.toolbarBuilder$4(context, t1, t3, new B.FadeTransition(t4, false, A.AnimatedSize$(B.GestureDetector$(_null, new A._CupertinoTextSelectionToolbarItems(backButton, children, D.CupertinoDynamicColor_Aap.resolveFrom$1(context), 1 / B.InheritedModel_inheritFrom(context, C._MediaQueryAspect_2, type$.MediaQuery).data.devicePixelRatio, nextButton, t5, _this._toolbarItemsKey), C.DragStartBehavior_1, false, _null, _null, _null, _null, _this.get$_onHorizontalDragEnd(), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), C.C__DecelerateCurve, D.Duration_125000), _null));
    }
  };
  A._LeftCupertinoChevronPainter.prototype = {};
  A._RightCupertinoChevronPainter.prototype = {};
  A._CupertinoChevronPainter.prototype = {
    paint$2(canvas, size) {
      var firstPoint, middlePoint, lowerPoint, paint,
        iconSize = size._dy,
        t1 = this.isLeft,
        t2 = t1 ? 1 : -1,
        centerOffset = new B.Offset(iconSize / 4 * t2, 0);
      t2 = iconSize / 2;
      firstPoint = new B.Offset(t2, 0).$add(0, centerOffset);
      middlePoint = new B.Offset(t1 ? 0 : iconSize, t2).$add(0, centerOffset);
      lowerPoint = new B.Offset(t2, iconSize).$add(0, centerOffset);
      paint = $.$get$_renderer().createPaint$0();
      paint.set$color(this.color);
      paint.set$style(C.PaintingStyle_1);
      paint.set$strokeWidth(2);
      paint.set$strokeCap(C.StrokeCap_1);
      paint.set$strokeJoin(C.StrokeJoin_1);
      canvas.drawLine$3(firstPoint, middlePoint, paint);
      canvas.drawLine$3(middlePoint, lowerPoint, paint);
    },
    shouldRepaint$1(oldDelegate) {
      return !oldDelegate.color.$eq(0, this.color) || oldDelegate.isLeft !== this.isLeft;
    }
  };
  A._CupertinoTextSelectionToolbarItems.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._RenderCupertinoTextSelectionToolbarItems(B.LinkedHashMap_LinkedHashMap$_empty(type$._CupertinoTextSelectionToolbarItemsSlot, type$.RenderBox), this.page, this.dividerColor, this.dividerWidth, 0, null, null, new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$page(this.page);
      renderObject.set$dividerColor(this.dividerColor);
      renderObject.set$dividerWidth(this.dividerWidth);
    },
    createElement$0() {
      var t1 = type$.Element;
      return new A._CupertinoTextSelectionToolbarItemsElement(B.LinkedHashMap_LinkedHashMap$_empty(type$._CupertinoTextSelectionToolbarItemsSlot, t1), B.HashSet_HashSet(t1), this, C._ElementLifecycle_0);
    }
  };
  A._CupertinoTextSelectionToolbarItemsElement.prototype = {
    get$renderObject() {
      return type$._RenderCupertinoTextSelectionToolbarItems._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
    },
    _updateRenderObject$2(child, slot) {
      var t1;
      switch (slot.index) {
        case 0:
          t1 = type$._RenderCupertinoTextSelectionToolbarItems._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
          t1._backButton = t1._text_selection_toolbar0$_updateChild$3(t1._backButton, child, D._CupertinoTextSelectionToolbarItemsSlot_0);
          break;
        case 1:
          t1 = type$._RenderCupertinoTextSelectionToolbarItems._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
          t1._nextButton = t1._text_selection_toolbar0$_updateChild$3(t1._nextButton, child, D._CupertinoTextSelectionToolbarItemsSlot_1);
          break;
      }
    },
    insertRenderObjectChild$2(child, slot) {
      var t1, t2;
      if (slot instanceof A._CupertinoTextSelectionToolbarItemsSlot) {
        this._updateRenderObject$2(type$.RenderBox._as(child), slot);
        return;
      }
      if (slot instanceof B.IndexedSlot) {
        t1 = type$._RenderCupertinoTextSelectionToolbarItems._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
        type$.RenderBox._as(child);
        t2 = slot.value;
        t2 = t2 == null ? null : t2.get$renderObject();
        type$.nullable_RenderBox._as(t2);
        t1.adoptChild$1(child);
        t1._insertIntoChildList$2$after(child, t2);
        return;
      }
    },
    moveRenderObjectChild$3(child, oldSlot, newSlot) {
      type$._RenderCupertinoTextSelectionToolbarItems._as(B.RenderObjectElement.prototype.get$renderObject.call(this)).move$2$after(type$.RenderBox._as(child), type$.nullable_RenderBox._as(newSlot.value.get$renderObject()));
    },
    removeRenderObjectChild$2(child, slot) {
      var t1;
      if (slot instanceof A._CupertinoTextSelectionToolbarItemsSlot) {
        this._updateRenderObject$2(null, slot);
        return;
      }
      t1 = type$._RenderCupertinoTextSelectionToolbarItems._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
      type$.RenderBox._as(child);
      t1._removeFromChildList$1(child);
      t1.dropChild$1(child);
    },
    visitChildren$1(visitor) {
      var t2, t3, _i, child,
        t1 = this.slotToChild;
      new B.LinkedHashMapValuesIterable(t1, B._instanceType(t1)._eval$1("LinkedHashMapValuesIterable<2>")).forEach$1(0, visitor);
      t1 = this.___CupertinoTextSelectionToolbarItemsElement__children_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t2 = t1.length;
      t3 = this._text_selection_toolbar0$_forgottenChildren;
      _i = 0;
      for (; _i < t2; ++_i) {
        child = t1[_i];
        if (!t3.contains$1(0, child))
          visitor.call$1(child);
      }
    },
    forgetChild$1(child) {
      var t2,
        t1 = this.slotToChild;
      if (t1.containsKey$1(child._slot)) {
        t2 = child._slot;
        t2.toString;
        t1.remove$1(0, type$._CupertinoTextSelectionToolbarItemsSlot._as(t2));
      } else
        this._text_selection_toolbar0$_forgottenChildren.add$1(0, child);
      this.super$Element$forgetChild(child);
    },
    _mountChild$2(widget, slot) {
      var t1 = this.slotToChild,
        oldChild = t1.$index(0, slot),
        newChild = this.updateChild$3(oldChild, widget, slot);
      if (oldChild != null)
        t1.remove$1(0, slot);
      if (newChild != null)
        t1.$indexSet(0, slot, newChild);
    },
    mount$2($parent, newSlot) {
      var t2, _this = this, t1 = {};
      _this.super$RenderObjectElement$mount($parent, newSlot);
      t2 = _this._widget;
      t2.toString;
      type$._CupertinoTextSelectionToolbarItems._as(t2);
      _this._mountChild$2(t2.backButton, D._CupertinoTextSelectionToolbarItemsSlot_0);
      _this._mountChild$2(t2.nextButton, D._CupertinoTextSelectionToolbarItemsSlot_1);
      t1.previousChild = null;
      _this.___CupertinoTextSelectionToolbarItemsElement__children_A = B.List_List$generate(t2.children.length, new A._CupertinoTextSelectionToolbarItemsElement_mount_closure(t1, _this, t2), false, type$.Element);
    },
    update$1(newWidget) {
      var t1, t2, t3, _this = this;
      _this.super$RenderObjectElement$update(newWidget);
      t1 = _this._widget;
      t1.toString;
      type$._CupertinoTextSelectionToolbarItems._as(t1);
      _this._mountChild$2(t1.backButton, D._CupertinoTextSelectionToolbarItemsSlot_0);
      _this._mountChild$2(t1.nextButton, D._CupertinoTextSelectionToolbarItemsSlot_1);
      t2 = _this.___CupertinoTextSelectionToolbarItemsElement__children_A;
      t2 === $ && B.throwUnnamedLateFieldNI();
      t3 = _this._text_selection_toolbar0$_forgottenChildren;
      _this.___CupertinoTextSelectionToolbarItemsElement__children_A = _this.updateChildren$3$forgottenChildren(t2, t1.children, t3);
      t3.clear$0(0);
    }
  };
  A._RenderCupertinoTextSelectionToolbarItems.prototype = {
    _text_selection_toolbar0$_updateChild$3(oldChild, newChild, slot) {
      var _this = this;
      if (oldChild != null) {
        _this.dropChild$1(oldChild);
        _this.slottedChildren.remove$1(0, slot);
      }
      if (newChild != null) {
        _this.slottedChildren.$indexSet(0, slot, newChild);
        _this.adoptChild$1(newChild);
      }
      return newChild;
    },
    set$page(value) {
      if (value === this._text_selection_toolbar0$_page)
        return;
      this._text_selection_toolbar0$_page = value;
      this.markNeedsLayout$0();
    },
    set$dividerColor(value) {
      if (value.$eq(0, this._dividerColor))
        return;
      this._dividerColor = value;
      this.markNeedsLayout$0();
    },
    set$dividerWidth(value) {
      if (value === this._dividerWidth)
        return;
      this._dividerWidth = value;
      this.markNeedsLayout$0();
    },
    performLayout$0() {
      var t2, t3, t4, slottedConstraints, toolbarWidth, t5, t6, _this = this, t1 = {};
      if (_this.ContainerRenderObjectMixin__firstChild == null) {
        t1 = type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this));
        _this._box$_size = new B.Size(B.clampDouble(0, t1.minWidth, t1.maxWidth), B.clampDouble(0, t1.minHeight, t1.maxHeight));
        return;
      }
      t1.greatestHeight = 0;
      _this.visitChildren$1(new A._RenderCupertinoTextSelectionToolbarItems_performLayout_closure(t1, _this));
      t2 = type$.BoxConstraints;
      t3 = t2._as(B.RenderObject.prototype.get$constraints.call(_this));
      t4 = t1.greatestHeight;
      slottedConstraints = new B.BoxConstraints(0, t3.maxWidth, t4, t4);
      _this._backButton.layout$2$parentUsesSize(slottedConstraints, true);
      _this._nextButton.layout$2$parentUsesSize(slottedConstraints, true);
      t4 = _this._backButton.get$size();
      t3 = _this._nextButton.get$size();
      t1.currentButtonPosition = 0;
      toolbarWidth = B._Cell$named("toolbarWidth");
      t1.currentPage = 0;
      t1.i = -1;
      _this.visitChildren$1(new A._RenderCupertinoTextSelectionToolbarItems_performLayout_closure0(t1, _this, t4._dx + t3._dx, toolbarWidth));
      t3 = t1.currentPage;
      if (t3 > 0) {
        t4 = _this._nextButton.parentData;
        t4.toString;
        t5 = type$.ToolbarItemsParentData;
        t5._as(t4);
        t6 = _this._backButton.parentData;
        t6.toString;
        t5._as(t6);
        if (_this._text_selection_toolbar0$_page !== t3) {
          t4.offset = new B.Offset(toolbarWidth._readLocal$0(), 0);
          t4.shouldPaint = true;
          toolbarWidth._value = toolbarWidth._readLocal$0() + _this._nextButton.get$size()._dx;
        }
        if (_this._text_selection_toolbar0$_page > 0) {
          t6.offset = C.Offset_0_0;
          t6.shouldPaint = true;
        }
      } else
        toolbarWidth._value = toolbarWidth._readLocal$0() - _this._dividerWidth;
      t3 = _this._text_selection_toolbar0$_page;
      _this.___RenderCupertinoTextSelectionToolbarItems_hasNextPage_A = t3 !== t1.currentPage;
      _this.___RenderCupertinoTextSelectionToolbarItems_hasPreviousPage_A = t3 > 0;
      _this._box$_size = t2._as(B.RenderObject.prototype.get$constraints.call(_this)).constrain$1(new B.Size(toolbarWidth._readLocal$0(), t1.greatestHeight));
    },
    paint$2(context, offset) {
      this.visitChildren$1(new A._RenderCupertinoTextSelectionToolbarItems_paint_closure(this, offset, context));
    },
    setupParentData$1(child) {
      if (!(child.parentData instanceof A.ToolbarItemsParentData))
        child.parentData = new A.ToolbarItemsParentData(null, null, C.Offset_0_0);
    },
    hitTestChildren$2$position(result, position) {
      var t1, t2,
        child = this.ContainerRenderObjectMixin__lastChild;
      for (t1 = type$.ToolbarItemsParentData; child != null;) {
        t2 = child.parentData;
        t2.toString;
        t1._as(t2);
        if (!t2.shouldPaint) {
          child = t2.ContainerParentDataMixin_previousSibling;
          continue;
        }
        if (A._RenderCupertinoTextSelectionToolbarItems_hitTestChild(child, result, position))
          return true;
        child = t2.ContainerParentDataMixin_previousSibling;
      }
      if (A._RenderCupertinoTextSelectionToolbarItems_hitTestChild(this._backButton, result, position))
        return true;
      if (A._RenderCupertinoTextSelectionToolbarItems_hitTestChild(this._nextButton, result, position))
        return true;
      return false;
    },
    attach$1(owner) {
      var t1;
      this.super$__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin$attach(owner);
      for (t1 = this.slottedChildren, t1 = new B.LinkedHashMapValueIterator(t1, t1._modifications, t1._first); t1.moveNext$0();)
        t1.__js_helper$_current.attach$1(owner);
    },
    detach$0() {
      this.super$__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin$detach();
      for (var t1 = this.slottedChildren, t1 = new B.LinkedHashMapValueIterator(t1, t1._modifications, t1._first); t1.moveNext$0();)
        t1.__js_helper$_current.detach$0();
    },
    redepthChildren$0() {
      this.visitChildren$1(new A._RenderCupertinoTextSelectionToolbarItems_redepthChildren_closure(this));
    },
    visitChildren$1(visitor) {
      var t1 = this._backButton;
      if (t1 != null)
        visitor.call$1(t1);
      t1 = this._nextButton;
      if (t1 != null)
        visitor.call$1(t1);
      this.super$ContainerRenderObjectMixin$visitChildren(visitor);
    },
    visitChildrenForSemantics$1(visitor) {
      this.visitChildren$1(new A._RenderCupertinoTextSelectionToolbarItems_visitChildrenForSemantics_closure(visitor));
    },
    debugDescribeChildren$0() {
      var value = B._setArrayType([], type$.JSArray_DiagnosticsNode);
      this.visitChildren$1(new A._RenderCupertinoTextSelectionToolbarItems_debugDescribeChildren_closure(this, value));
      return value;
    }
  };
  A._CupertinoTextSelectionToolbarItemsSlot.prototype = {
    _enumToString$0() {
      return "_CupertinoTextSelectionToolbarItemsSlot." + this._name;
    }
  };
  A.__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTickers());
      _this.TickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    }
  };
  A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin.prototype = {
    attach$1(owner) {
      var child, t1, t2;
      this.super$RenderObject$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.ToolbarItemsParentData; child != null;) {
        child.attach$1(owner);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0() {
      var child, t1, t2;
      this.super$RenderObject$detach();
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.ToolbarItemsParentData; child != null;) {
        child.detach$0();
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    }
  };
  A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin.prototype = {};
  A.CupertinoTextSelectionToolbarButton.prototype = {
    createState$0() {
      return new A._CupertinoTextSelectionToolbarButtonState();
    }
  };
  A._CupertinoTextSelectionToolbarButtonState.prototype = {
    _onTapDown$1(details) {
      this.setState$1(new A._CupertinoTextSelectionToolbarButtonState__onTapDown_closure(this));
    },
    _onTapUp$1(details) {
      var t1;
      this.setState$1(new A._CupertinoTextSelectionToolbarButtonState__onTapUp_closure(this));
      t1 = this._widget.onPressed;
      if (t1 != null)
        t1.call$0();
    },
    _onTapCancel$0() {
      this.setState$1(new A._CupertinoTextSelectionToolbarButtonState__onTapCancel_closure(this));
    },
    build$1(context) {
      var _this = this, _null = null,
        $content = _this._getContentWidget$1(context),
        t1 = _this.isPressed ? D.CupertinoDynamicColor_PU8.resolveFrom$1(context) : C.Color_Edl,
        t2 = _this._widget.onPressed,
        child = A.CupertinoButton$(C.Alignment_0_0, _null, $content, t1, C.Color_Edl, _null, t2, D.EdgeInsets_16_18_16_18, 1);
      if (t2 != null)
        return B.GestureDetector$(_null, child, C.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _this.get$_onTapCancel(), _this.get$_onTapDown(), _this.get$_onTapUp(), _null, _null, _null);
      else
        return child;
    },
    _getContentWidget$1(context) {
      var textWidget, _null = null,
        t1 = this._widget,
        t2 = t1.child;
      if (t2 != null)
        return t2;
      t2 = t1.text;
      if (t2 == null) {
        t1 = t1.buttonItem;
        t1.toString;
        t1 = A.CupertinoTextSelectionToolbarButton_getButtonLabel(context, t1);
      } else
        t1 = t2;
      textWidget = B.Text$(t1, _null, C.TextOverflow_2, _null, D.TextStyle_Vot.copyWith$1$color(this._widget.onPressed != null ? D.CupertinoDynamicColor_ml5.resolveFrom$1(context) : C.CupertinoDynamicColor_yWg), _null, _null);
      t1 = this._widget.buttonItem;
      switch (t1 == null ? _null : t1.type) {
        case D.ContextMenuButtonType_0:
        case D.ContextMenuButtonType_1:
        case D.ContextMenuButtonType_2:
        case D.ContextMenuButtonType_3:
        case D.ContextMenuButtonType_4:
        case D.ContextMenuButtonType_5:
        case D.ContextMenuButtonType_6:
        case D.ContextMenuButtonType_7:
        case D.ContextMenuButtonType_9:
        case null:
        case void 0:
          return textWidget;
        case D.ContextMenuButtonType_8:
          t1 = D.CupertinoDynamicColor_ml5.resolveFrom$1(context);
          t2 = $.$get$_renderer().createPaint$0();
          t2.set$strokeCap(C.StrokeCap_1);
          t2.set$strokeJoin(C.StrokeJoin_1);
          t2.set$strokeWidth(1);
          t2.set$style(C.PaintingStyle_1);
          return B.SizedBox$(B.CustomPaint$(_null, _null, _null, new A._LiveTextIconPainter(t1, t2, _null), C.Size_0_0), 13, 13);
      }
    }
  };
  A._LiveTextIconPainter.prototype = {
    paint$2(canvas, size) {
      var t2, t3, path, rotationMatrix, i,
        t1 = this._text_selection_toolbar_button$_painter;
      t1.set$color(this.color);
      canvas.save$0();
      t2 = size._dx;
      t3 = size._dy;
      canvas.translate$2(t2 / 2, t3 / 2);
      t2 = -t2 / 2;
      t3 = -t3 / 2;
      path = $.$get$_renderer().createPath$0();
      path.moveTo$2(t2, t3 + 3.5);
      path.lineTo$2(t2, t3 + 1);
      path.arcToPoint$2$radius(new B.Offset(t2 + 1, t3), D.Radius_1_1);
      path.lineTo$2(t2 + 3.5, t3);
      t2 = new Float64Array(16);
      rotationMatrix = new B.Matrix40(t2);
      rotationMatrix.setIdentity$0();
      rotationMatrix.rotateZ$1(1.5707963267948966);
      for (i = 0; i < 4; ++i) {
        canvas.drawPath$2(path, t1);
        canvas.transform$1(t2);
      }
      canvas.drawLine$3(D.Offset_m3_m3, D.Offset_3_m3, t1);
      canvas.drawLine$3(D.Offset_m3_0, D.Offset_3_0, t1);
      canvas.drawLine$3(D.Offset_m3_3, D.Offset_1_3, t1);
      canvas.restore$0();
    },
    shouldRepaint$1(oldDelegate) {
      return !oldDelegate.color.$eq(0, this.color);
    }
  };
  A._DragState0.prototype = {
    _enumToString$0() {
      return "_DragState." + this._name;
    }
  };
  A.TapDragDownDetails.prototype = {};
  A.TapDragUpDetails.prototype = {};
  A.TapDragStartDetails.prototype = {};
  A.TapDragUpdateDetails.prototype = {};
  A.TapDragEndDetails.prototype = {};
  A._TapStatusTrackerMixin.prototype = {
    handleEvent$1($event) {
      var computedSlop, t1, _this = this;
      if (type$.PointerMoveEvent._is($event)) {
        computedSlop = B.computeHitSlop($event.get$kind(), _this.gestureSettings);
        t1 = _this._TapStatusTrackerMixin__originPosition;
        if ($event.get$position().$sub(0, t1.global).get$distance() > computedSlop) {
          _this._consecutiveTapTimerStop$0();
          _this._TapStatusTrackerMixin__lastTapOffset = _this._TapStatusTrackerMixin__previousButtons = null;
        }
      } else if (type$.PointerUpEvent._is($event)) {
        _this._TapStatusTrackerMixin__up = $event;
        if (_this._TapStatusTrackerMixin__down != null) {
          _this._consecutiveTapTimerStop$0();
          if (_this._TapStatusTrackerMixin__consecutiveTapTimer == null)
            _this._TapStatusTrackerMixin__consecutiveTapTimer = B.Timer_Timer(C.Duration_300000, _this.get$_consecutiveTapTimerTimeout());
        }
      } else if (type$.PointerCancelEvent._is($event))
        _this._tapTrackerReset$0();
    },
    rejectGesture$1(pointer) {
      this._tapTrackerReset$0();
    },
    _hasSameButton$1(buttons) {
      var t1 = this._TapStatusTrackerMixin__previousButtons;
      t1.toString;
      if (buttons === t1)
        return true;
      else
        return false;
    },
    _isWithinConsecutiveTapTolerance$1(secondTapOffset) {
      var t1 = this._TapStatusTrackerMixin__lastTapOffset;
      if (t1 == null)
        return false;
      return secondTapOffset.$sub(0, t1).get$distance() <= 100;
    },
    _consecutiveTapTimerStop$0() {
      var t1 = this._TapStatusTrackerMixin__consecutiveTapTimer;
      if (t1 != null) {
        t1.cancel$0();
        this._TapStatusTrackerMixin__consecutiveTapTimer = null;
      }
    },
    _consecutiveTapTimerTimeout$0() {
    },
    _tapTrackerReset$0() {
      var t1, _this = this;
      _this._consecutiveTapTimerStop$0();
      _this._TapStatusTrackerMixin__lastTapOffset = _this._TapStatusTrackerMixin__originPosition = _this._TapStatusTrackerMixin__previousButtons = null;
      _this._TapStatusTrackerMixin__consecutiveTapCount = 0;
      _this._TapStatusTrackerMixin__up = _this._TapStatusTrackerMixin__down = null;
      t1 = _this._TapStatusTrackerMixin_onTapTrackReset;
      if (t1 != null)
        t1.call$0();
    }
  };
  A.BaseTapAndDragGestureRecognizer.prototype = {
    _handleDragUpdateThrottled$0() {
      var _this = this;
      if (_this.onDragUpdate != null)
        _this.invokeCallback$2("onDragUpdate", new A.BaseTapAndDragGestureRecognizer__handleDragUpdateThrottled_closure(_this));
      _this._lastDragUpdateDetails = _this._dragUpdateThrottleTimer = null;
    },
    isPointerAllowed$1($event) {
      var _this = this;
      if (_this._tap_and_drag$_primaryPointer == null)
        switch ($event.get$buttons()) {
          case 1:
            if (_this.onTapDown == null && _this.onDragStart == null && _this.onDragUpdate == null && _this.onDragEnd == null && _this.onTapUp == null && _this.onCancel == null)
              return false;
            break;
          default:
            return false;
        }
      else if ($event.get$pointer() !== _this._tap_and_drag$_primaryPointer)
        return false;
      return _this.super$GestureRecognizer$isPointerAllowed($event);
    },
    addAllowedPointer$1($event) {
      var t1, _this = this;
      if (_this._dragState === D._DragState_00) {
        _this.super$_BaseTapAndDragGestureRecognizer_OneSequenceGestureRecognizer__TapStatusTrackerMixin$addAllowedPointer($event);
        _this._tap_and_drag$_primaryPointer = $event.get$pointer();
        _this.__BaseTapAndDragGestureRecognizer__globalDistanceMovedAllAxes_A = _this.__BaseTapAndDragGestureRecognizer__globalDistanceMoved_A = 0;
        _this._dragState = D._DragState_10;
        t1 = $event.get$position();
        _this.__BaseTapAndDragGestureRecognizer__currentPosition_A = _this.__BaseTapAndDragGestureRecognizer__initialPosition_A = new B.OffsetPair($event.get$localPosition(), t1);
        _this._deadlineTimer = B.Timer_Timer(C.Duration_100000, new A.BaseTapAndDragGestureRecognizer_addAllowedPointer_closure(_this, $event));
      }
    },
    handleNonAllowedPointer$1($event) {
      if ($event.get$buttons() !== 1)
        if (!this._tap_and_drag$_wonArenaForPrimaryPointer)
          this.super$OneSequenceGestureRecognizer$handleNonAllowedPointer($event);
    },
    acceptGesture$1(pointer) {
      var t1, _this = this;
      if (pointer !== _this._tap_and_drag$_primaryPointer)
        return;
      _this._stopDeadlineTimer$0();
      _this._tap_and_drag$_acceptedActivePointers.add$1(0, pointer);
      t1 = _this._TapStatusTrackerMixin__down;
      if (t1 != null)
        _this._checkTapDown$1(t1);
      _this._tap_and_drag$_wonArenaForPrimaryPointer = true;
      t1 = _this._tap_and_drag$_start;
      if (t1 != null && _this.eagerVictoryOnDrag) {
        t1.toString;
        _this._acceptDrag$1(t1);
      }
      t1 = _this._tap_and_drag$_start;
      if (t1 != null && !_this.eagerVictoryOnDrag) {
        _this._dragState = D._DragState_20;
        t1.toString;
        _this._acceptDrag$1(t1);
      }
      t1 = _this._TapStatusTrackerMixin__up;
      if (t1 != null)
        _this._checkTapUp$1(t1);
    },
    didStopTrackingLastPointer$1(pointer) {
      var t1, _this = this;
      switch (_this._dragState.index) {
        case 0:
          _this._tap_and_drag$_checkCancel$0();
          _this.resolve$1(C.GestureDisposition_1);
          break;
        case 1:
          if (_this._pastSlopTolerance)
            if (_this._tap_and_drag$_wonArenaForPrimaryPointer) {
              if (_this._TapStatusTrackerMixin__down != null) {
                if (!_this._tap_and_drag$_acceptedActivePointers.remove$1(0, pointer))
                  _this.resolvePointer$2(pointer, C.GestureDisposition_1);
                _this._dragState = D._DragState_20;
                t1 = _this._TapStatusTrackerMixin__down;
                t1.toString;
                _this._acceptDrag$1(t1);
                _this._checkDragEnd$0();
              }
            } else {
              _this._tap_and_drag$_checkCancel$0();
              _this.resolve$1(C.GestureDisposition_1);
            }
          else {
            t1 = _this._TapStatusTrackerMixin__up;
            if (t1 != null)
              _this._checkTapUp$1(t1);
          }
          break;
        case 2:
          _this._checkDragEnd$0();
          break;
      }
      _this._stopDeadlineTimer$0();
      _this._tap_and_drag$_start = null;
      _this._dragState = D._DragState_00;
      _this._pastSlopTolerance = false;
    },
    handleEvent$1($event) {
      var computedSlop, t1, localToGlobalTransform, movedLocally, t2, t3, _this = this;
      if ($event.get$pointer() !== _this._tap_and_drag$_primaryPointer)
        return;
      _this.super$_TapStatusTrackerMixin$handleEvent($event);
      if (type$.PointerMoveEvent._is($event)) {
        computedSlop = B.computeHitSlop($event.get$kind(), _this.gestureSettings);
        if (!_this._pastSlopTolerance) {
          t1 = _this.__BaseTapAndDragGestureRecognizer__initialPosition_A;
          t1 === $ && B.throwUnnamedLateFieldNI();
          t1 = $event.get$position().$sub(0, t1.global).get$distance() > computedSlop;
        } else
          t1 = true;
        _this._pastSlopTolerance = t1;
        t1 = _this._dragState;
        if (t1 === D._DragState_20) {
          _this.__BaseTapAndDragGestureRecognizer__currentPosition_A = new B.OffsetPair($event.get$localPosition(), $event.get$position());
          _this._checkDragUpdate$1($event);
        } else if (t1 === D._DragState_10) {
          if (_this._tap_and_drag$_start == null) {
            if ($event.get$transform() == null)
              localToGlobalTransform = null;
            else {
              t1 = $event.get$transform();
              t1.toString;
              localToGlobalTransform = B.Matrix4_tryInvert(t1);
            }
            movedLocally = _this._tap_and_drag$_getDeltaForDetails$1($event.get$localDelta());
            t1 = _this.__BaseTapAndDragGestureRecognizer__globalDistanceMoved_A;
            t1 === $ && B.throwUnnamedLateFieldNI();
            t2 = B.PointerEvent_transformDeltaViaPositions(localToGlobalTransform, null, movedLocally, $event.get$localPosition()).get$distance();
            t3 = _this._tap_and_drag$_getPrimaryValueFromOffset$1(movedLocally);
            _this.__BaseTapAndDragGestureRecognizer__globalDistanceMoved_A = t1 + t2 * J.get$sign$in(t3 == null ? 1 : t3);
            t1 = _this.__BaseTapAndDragGestureRecognizer__globalDistanceMovedAllAxes_A;
            t1 === $ && B.throwUnnamedLateFieldNI();
            _this.__BaseTapAndDragGestureRecognizer__globalDistanceMovedAllAxes_A = t1 + B.PointerEvent_transformDeltaViaPositions(localToGlobalTransform, null, $event.get$localDelta(), $event.get$localPosition()).get$distance() * C.JSInt_methods.get$sign(1);
            if (!_this._hasSufficientGlobalDistanceToAccept$1($event.get$kind()))
              t1 = _this._tap_and_drag$_wonArenaForPrimaryPointer && Math.abs(_this.__BaseTapAndDragGestureRecognizer__globalDistanceMovedAllAxes_A) > B.computePanSlop($event.get$kind(), _this.gestureSettings);
            else
              t1 = true;
            if (t1) {
              _this._tap_and_drag$_start = $event;
              if (_this.eagerVictoryOnDrag) {
                _this._dragState = D._DragState_20;
                if (!_this._tap_and_drag$_wonArenaForPrimaryPointer)
                  _this.resolve$1(C.GestureDisposition_0);
              }
            }
          }
          t1 = _this._tap_and_drag$_start;
          if (t1 != null && _this._tap_and_drag$_wonArenaForPrimaryPointer) {
            _this._dragState = D._DragState_20;
            t1.toString;
            _this._acceptDrag$1(t1);
          }
        }
      } else if (type$.PointerUpEvent._is($event)) {
        t1 = _this._dragState;
        if (t1 === D._DragState_10)
          _this.stopTrackingIfPointerNoLongerDown$1($event);
        else if (t1 === D._DragState_20)
          _this._tap_and_drag$_giveUpPointer$1($event.get$pointer());
      } else if (type$.PointerCancelEvent._is($event)) {
        _this._dragState = D._DragState_00;
        _this._tap_and_drag$_giveUpPointer$1($event.get$pointer());
      }
    },
    rejectGesture$1(pointer) {
      var _this = this;
      if (pointer !== _this._tap_and_drag$_primaryPointer)
        return;
      _this.super$_TapStatusTrackerMixin$rejectGesture(pointer);
      _this._stopDeadlineTimer$0();
      _this._tap_and_drag$_giveUpPointer$1(pointer);
      _this._resetTaps$0();
      _this._resetDragUpdateThrottle$0();
    },
    dispose$0() {
      this._stopDeadlineTimer$0();
      this._resetDragUpdateThrottle$0();
      this.super$_BaseTapAndDragGestureRecognizer_OneSequenceGestureRecognizer__TapStatusTrackerMixin$dispose();
    },
    _acceptDrag$1($event) {
      var t1, t2, localDelta, correctedLocalPosition, localToGlobalTransform, globalUpdateDelta, _this = this;
      if (!_this._tap_and_drag$_wonArenaForPrimaryPointer)
        return;
      if (_this.dragStartBehavior === C.DragStartBehavior_1) {
        t1 = _this.__BaseTapAndDragGestureRecognizer__initialPosition_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t2 = $event.get$delta();
        _this.__BaseTapAndDragGestureRecognizer__currentPosition_A = _this.__BaseTapAndDragGestureRecognizer__initialPosition_A = t1.$add(0, new B.OffsetPair($event.get$localDelta(), t2));
      }
      _this._checkDragStart$1($event);
      localDelta = $event.get$localDelta();
      if (!localDelta.$eq(0, C.Offset_0_0)) {
        _this.__BaseTapAndDragGestureRecognizer__currentPosition_A = new B.OffsetPair($event.get$localPosition(), $event.get$position());
        t1 = _this.__BaseTapAndDragGestureRecognizer__initialPosition_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        correctedLocalPosition = t1.local.$add(0, localDelta);
        if ($event.get$transform() == null)
          localToGlobalTransform = null;
        else {
          t1 = $event.get$transform();
          t1.toString;
          localToGlobalTransform = B.Matrix4_tryInvert(t1);
        }
        globalUpdateDelta = B.PointerEvent_transformDeltaViaPositions(localToGlobalTransform, null, localDelta, correctedLocalPosition);
        _this._checkDragUpdate$2$corrected($event, _this.__BaseTapAndDragGestureRecognizer__initialPosition_A.$add(0, new B.OffsetPair(localDelta, globalUpdateDelta)));
      }
    },
    _checkTapDown$1($event) {
      var t1, t2, t3, t4, _this = this;
      if (_this._tap_and_drag$_sentTapDown)
        return;
      t1 = $event.get$position();
      t2 = $event.get$localPosition();
      t3 = _this._pointerToKind.$index(0, $event.get$pointer());
      t3.toString;
      t4 = _this._TapStatusTrackerMixin__consecutiveTapCount;
      if (_this.onTapDown != null)
        _this.invokeCallback$2("onTapDown", new A.BaseTapAndDragGestureRecognizer__checkTapDown_closure(_this, new A.TapDragDownDetails(t1, t2, t3, t4)));
      _this._tap_and_drag$_sentTapDown = true;
    },
    _checkTapUp$1($event) {
      var t1, t2, t3, t4, _this = this;
      if (!_this._tap_and_drag$_wonArenaForPrimaryPointer)
        return;
      t1 = $event.get$kind();
      t2 = $event.get$position();
      t3 = $event.get$localPosition();
      t4 = _this._TapStatusTrackerMixin__consecutiveTapCount;
      if (_this.onTapUp != null)
        _this.invokeCallback$2("onTapUp", new A.BaseTapAndDragGestureRecognizer__checkTapUp_closure(_this, new A.TapDragUpDetails(t2, t3, t1, t4)));
      _this._resetTaps$0();
      if (!_this._tap_and_drag$_acceptedActivePointers.remove$1(0, $event.get$pointer()))
        _this.resolvePointer$2($event.get$pointer(), C.GestureDisposition_1);
    },
    _checkDragStart$1($event) {
      var t1, t2, t3, _this = this;
      if (_this.onDragStart != null) {
        t1 = $event.get$timeStamp();
        t2 = _this.__BaseTapAndDragGestureRecognizer__initialPosition_A;
        t2 === $ && B.throwUnnamedLateFieldNI();
        t3 = _this._pointerToKind.$index(0, $event.get$pointer());
        t3.toString;
        _this.invokeCallback$2("onDragStart", new A.BaseTapAndDragGestureRecognizer__checkDragStart_closure(_this, new A.TapDragStartDetails(t1, t2.global, t2.local, t3, _this._TapStatusTrackerMixin__consecutiveTapCount)));
      }
      _this._tap_and_drag$_start = null;
    },
    _checkDragUpdate$2$corrected($event, corrected) {
      var localPosition, t2, t3, t4, t5, t6, _this = this,
        t1 = corrected == null,
        globalPosition = t1 ? null : corrected.global;
      if (globalPosition == null)
        globalPosition = $event.get$position();
      localPosition = t1 ? null : corrected.local;
      if (localPosition == null)
        localPosition = $event.get$localPosition();
      t1 = $event.get$timeStamp();
      t2 = $event.get$localDelta();
      t3 = _this._pointerToKind.$index(0, $event.get$pointer());
      t3.toString;
      t4 = _this.__BaseTapAndDragGestureRecognizer__initialPosition_A;
      t4 === $ && B.throwUnnamedLateFieldNI();
      t4 = globalPosition.$sub(0, t4.global);
      t5 = localPosition.$sub(0, _this.__BaseTapAndDragGestureRecognizer__initialPosition_A.local);
      t6 = _this._TapStatusTrackerMixin__consecutiveTapCount;
      if (_this.onDragUpdate != null)
        _this.invokeCallback$2("onDragUpdate", new A.BaseTapAndDragGestureRecognizer__checkDragUpdate_closure(_this, new A.TapDragUpdateDetails(t1, t2, globalPosition, localPosition, t3, t4, t5, t6)));
    },
    _checkDragUpdate$1($event) {
      return this._checkDragUpdate$2$corrected($event, null);
    },
    _checkDragEnd$0() {
      var t2, _this = this,
        t1 = _this.__BaseTapAndDragGestureRecognizer__currentPosition_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t2 = _this._dragUpdateThrottleTimer;
      if (t2 != null) {
        t2.cancel$0();
        _this._handleDragUpdateThrottled$0();
      }
      t2 = _this._TapStatusTrackerMixin__consecutiveTapCount;
      if (_this.onDragEnd != null)
        _this.invokeCallback$2("onDragEnd", new A.BaseTapAndDragGestureRecognizer__checkDragEnd_closure(_this, new A.TapDragEndDetails(0, t2, t1.global, t1.local)));
      _this._resetTaps$0();
      _this._resetDragUpdateThrottle$0();
    },
    _tap_and_drag$_checkCancel$0() {
      var t1, _this = this;
      if (!_this._tap_and_drag$_sentTapDown)
        return;
      t1 = _this.onCancel;
      if (t1 != null)
        _this.invokeCallback$2("onCancel", t1);
      _this._resetDragUpdateThrottle$0();
      _this._resetTaps$0();
    },
    _tap_and_drag$_giveUpPointer$1(pointer) {
      this.stopTrackingPointer$1(pointer);
      if (!this._tap_and_drag$_acceptedActivePointers.remove$1(0, pointer))
        this.resolvePointer$2(pointer, C.GestureDisposition_1);
    },
    _resetTaps$0() {
      this._tap_and_drag$_wonArenaForPrimaryPointer = this._tap_and_drag$_sentTapDown = false;
      this._tap_and_drag$_primaryPointer = null;
    },
    _resetDragUpdateThrottle$0() {
      return;
    },
    _stopDeadlineTimer$0() {
      var t1 = this._deadlineTimer;
      if (t1 != null) {
        t1.cancel$0();
        this._deadlineTimer = null;
      }
    }
  };
  A.TapAndHorizontalDragGestureRecognizer.prototype = {
    _hasSufficientGlobalDistanceToAccept$1(pointerDeviceKind) {
      var t1 = this.__BaseTapAndDragGestureRecognizer__globalDistanceMoved_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      return Math.abs(t1) > B.computeHitSlop(pointerDeviceKind, this.gestureSettings);
    },
    _tap_and_drag$_getDeltaForDetails$1(delta) {
      return new B.Offset(delta._dx, 0);
    },
    _tap_and_drag$_getPrimaryValueFromOffset$1(value) {
      return value._dx;
    }
  };
  A.TapAndPanGestureRecognizer.prototype = {
    _hasSufficientGlobalDistanceToAccept$1(pointerDeviceKind) {
      var t1 = this.__BaseTapAndDragGestureRecognizer__globalDistanceMoved_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      return Math.abs(t1) > B.computePanSlop(pointerDeviceKind, this.gestureSettings);
    },
    _tap_and_drag$_getDeltaForDetails$1(delta) {
      return delta;
    },
    _tap_and_drag$_getPrimaryValueFromOffset$1(value) {
      return null;
    }
  };
  A._BaseTapAndDragGestureRecognizer_OneSequenceGestureRecognizer__TapStatusTrackerMixin.prototype = {
    addAllowedPointer$1($event) {
      var t1, _this = this;
      _this.super$OneSequenceGestureRecognizer$addAllowedPointer($event);
      t1 = _this._TapStatusTrackerMixin__consecutiveTapTimer;
      if (t1 != null && t1._handle == null)
        _this._tapTrackerReset$0();
      _this._TapStatusTrackerMixin__up = null;
      if (_this._TapStatusTrackerMixin__down != null)
        t1 = !(_this._TapStatusTrackerMixin__consecutiveTapTimer != null && _this._isWithinConsecutiveTapTolerance$1($event.get$position()) && _this._hasSameButton$1($event.get$buttons()));
      else
        t1 = false;
      if (t1)
        _this._TapStatusTrackerMixin__consecutiveTapCount = 1;
      else
        ++_this._TapStatusTrackerMixin__consecutiveTapCount;
      _this._consecutiveTapTimerStop$0();
      _this._TapStatusTrackerMixin__down = $event;
      _this._TapStatusTrackerMixin__previousButtons = $event.get$buttons();
      _this._TapStatusTrackerMixin__lastTapOffset = $event.get$position();
      _this._TapStatusTrackerMixin__originPosition = new B.OffsetPair($event.get$localPosition(), $event.get$position());
      t1 = _this._TapStatusTrackerMixin_onTapTrackStart;
      if (t1 != null)
        t1.call$0();
    },
    dispose$0() {
      this._tapTrackerReset$0();
      this.super$OneSequenceGestureRecognizer$dispose();
    }
  };
  A._TapDragDownDetails_Object_Diagnosticable.prototype = {};
  A._TapDragEndDetails_Object_Diagnosticable.prototype = {};
  A._TapDragStartDetails_Object_Diagnosticable.prototype = {};
  A._TapDragUpDetails_Object_Diagnosticable.prototype = {};
  A._TapDragUpdateDetails_Object_Diagnosticable.prototype = {};
  A.AdaptiveTextSelectionToolbar.prototype = {
    build$1(context) {
      var resultChildren, t2, _this = this,
        t1 = _this.buttonItems.length === 0;
      if (t1)
        return C.SizedBox_0_0_null_null;
      resultChildren = J.toList$0$ax(A.AdaptiveTextSelectionToolbar_getAdaptiveButtons(context, _this.buttonItems));
      switch (B.Theme_of(context).platform.index) {
        case 2:
          t1 = _this.anchors;
          t2 = t1.primaryAnchor;
          t1 = t1.secondaryAnchor;
          return A.CupertinoTextSelectionToolbar$(t2, t1 == null ? t2 : t1, resultChildren);
        case 0:
          t1 = _this.anchors;
          t2 = t1.primaryAnchor;
          t1 = t1.secondaryAnchor;
          return A.TextSelectionToolbar$(t2, t1 == null ? t2 : t1, resultChildren);
        case 1:
        case 3:
        case 5:
          return new A.DesktopTextSelectionToolbar(_this.anchors.primaryAnchor, resultChildren, null);
        case 4:
          return new A.CupertinoDesktopTextSelectionToolbar(_this.anchors.primaryAnchor, resultChildren, null);
      }
    }
  };
  A._DesktopTextSelectionHandleControls.prototype = {};
  A.DesktopTextSelectionControls.prototype = {
    getHandleSize$1(textLineHeight) {
      return C.Size_0_0;
    },
    buildHandle$4(context, type, textLineHeight, onTap) {
      return C.SizedBox_0_0_null_null;
    },
    getHandleAnchor$2(type, textLineHeight) {
      return C.Offset_0_0;
    }
  };
  A.__DesktopTextSelectionHandleControls_DesktopTextSelectionControls_TextSelectionHandleControls.prototype = {};
  A.DesktopTextSelectionToolbar.prototype = {
    build$1(context) {
      var _null = null,
        paddingAbove = B.InheritedModel_inheritFrom(context, C._MediaQueryAspect_6, type$.MediaQuery).data.padding.top + 8;
      return new B.Padding(new B.EdgeInsets(8, paddingAbove, 8, 8), new B.CustomSingleChildLayout(new A.DesktopTextSelectionToolbarLayoutDelegate(this.anchor.$sub(0, new B.Offset(8, paddingAbove))), B.SizedBox$(B.Material$(C.Duration_200000, D.BorderRadius_woU, B.Column$(this.children, C.CrossAxisAlignment_2, C.MainAxisAlignment_0, C.MainAxisSize_0), C.Clip_2, _null, 1, _null, _null, _null, _null, _null, C.MaterialType_1), _null, 222), _null), _null);
    }
  };
  A.DesktopTextSelectionToolbarButton.prototype = {
    build$1(context) {
      var _null = null;
      return B.SizedBox$(A.TextButton$(this.child, this.onPressed, B.TextButton_styleFrom(C.Alignment_m1_0, _null, _null, _null, _null, C.SystemMouseCursor_basic, _null, _null, C.SystemMouseCursor_basic, B.Theme_of(context).colorScheme.brightness === C.Brightness_0 ? C.Color_wst : C.Color_PW1, _null, D.Size_48_36, D.EdgeInsets_20_0_20_3, _null, C.RoundedRectangleBorder_Ggx, _null, _null, _null, _null)), _null, 1 / 0);
    }
  };
  A.InputBorder.prototype = {};
  A.UnderlineInputBorder.prototype = {
    get$isOutline() {
      return false;
    },
    copyWith$1$borderSide(borderSide) {
      var t1 = borderSide == null ? this.borderSide : borderSide;
      return new A.UnderlineInputBorder(this.borderRadius, t1);
    },
    get$dimensions() {
      return new B.EdgeInsets(0, 0, 0, this.borderSide.width);
    },
    scale$1(t) {
      return new A.UnderlineInputBorder(D.BorderRadius_POr, this.borderSide.scale$1(t));
    },
    getInnerPath$2$textDirection(rect, textDirection) {
      var t1 = $.$get$_renderer().createPath$0(),
        t2 = rect.left,
        t3 = rect.top;
      t1.addRect$1(new B.Rect(t2, t3, t2 + (rect.right - t2), t3 + Math.max(0, rect.bottom - t3 - this.borderSide.width)));
      return t1;
    },
    getOuterPath$2$textDirection(rect, textDirection) {
      var t1 = $.$get$_renderer().createPath$0();
      t1.addRRect$1(this.borderRadius.toRRect$1(rect));
      return t1;
    },
    paintInterior$4$textDirection(canvas, rect, paint, textDirection) {
      canvas.drawRRect$2(this.borderRadius.toRRect$1(rect), paint);
    },
    get$preferPaintInterior() {
      return true;
    },
    lerpFrom$2(a, t) {
      var t1, t2;
      if (a instanceof A.UnderlineInputBorder) {
        t1 = B.BorderSide_lerp(a.borderSide, this.borderSide, t);
        t2 = B.BorderRadius_lerp(a.borderRadius, this.borderRadius, t);
        t2.toString;
        return new A.UnderlineInputBorder(t2, t1);
      }
      return this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2(b, t) {
      var t1, t2;
      if (b instanceof A.UnderlineInputBorder) {
        t1 = B.BorderSide_lerp(this.borderSide, b.borderSide, t);
        t2 = B.BorderRadius_lerp(this.borderRadius, b.borderRadius, t);
        t2.toString;
        return new A.UnderlineInputBorder(t2, t1);
      }
      return this.super$ShapeBorder$lerpTo(b, t);
    },
    paint$6$gapExtent$gapPercentage$gapStart$textDirection(canvas, rect, gapExtent, gapPercentage, gapStart, textDirection) {
      var t3, t4, t5, t6, alignInsideOffset,
        t1 = this.borderSide,
        t2 = t1.style;
      if (t2 === C.BorderStyle_0)
        return;
      t3 = this.borderRadius;
      t4 = t3.bottomLeft;
      t5 = !t4.$eq(0, C.Radius_0_0) || !t3.bottomRight.$eq(0, C.Radius_0_0);
      t6 = rect.bottom;
      if (t5) {
        t5 = (t6 - rect.top) / 2;
        t4 = t4.clamp$1$maximum(0, new B.Radius(t5, t5));
        t5 = t3.bottomRight.clamp$1$maximum(0, new B.Radius(t5, t5));
        t3 = t1.color;
        B.BoxBorder_paintNonUniformBorder(canvas, rect, new B.BorderRadius(C.Radius_0_0, C.Radius_0_0, t4, t5), new B.BorderSide(t3, t1.width, t2, -1), t3, C.BorderSide_Ah5, C.BorderSide_Ah5, C.BoxShape_0, textDirection, C.BorderSide_Ah5);
      } else {
        alignInsideOffset = new B.Offset(0, t1.width / 2);
        canvas.drawLine$3(new B.Offset(rect.left, t6).$sub(0, alignInsideOffset), new B.Offset(rect.right, t6).$sub(0, alignInsideOffset), t1.toPaint$0());
      }
    },
    paint$3$textDirection(canvas, rect, textDirection) {
      return this.paint$6$gapExtent$gapPercentage$gapStart$textDirection(canvas, rect, 0, 0, null, textDirection);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeTypeOfDartObject(_this))
        return false;
      return other instanceof A.UnderlineInputBorder && other.borderSide.$eq(0, _this.borderSide) && other.borderRadius.$eq(0, _this.borderRadius);
    },
    get$hashCode(_) {
      return B.Object_hash(this.borderSide, this.borderRadius, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A._InputBorderGap.prototype = {
    set$start(value) {
      if (value != this._input_decorator$_start) {
        this._input_decorator$_start = value;
        this.notifyListeners$0();
      }
    },
    set$extent(value) {
      if (value !== this._extent) {
        this._extent = value;
        this.notifyListeners$0();
      }
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeTypeOfDartObject(_this))
        return false;
      return other instanceof A._InputBorderGap && other._input_decorator$_start == _this._input_decorator$_start && other._extent === _this._extent;
    },
    get$hashCode(_) {
      return B.Object_hash(this._input_decorator$_start, this._extent, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toString$0(_) {
      return "<optimized out>#" + B.shortHash(this);
    }
  };
  A._InputBorderTween.prototype = {
    lerp$1(t) {
      var t1 = B.ShapeBorder_lerp(this.begin, this.end, t);
      t1.toString;
      return type$.InputBorder._as(t1);
    }
  };
  A._InputBorderPainter.prototype = {
    paint$2(canvas, size) {
      var blendedFillColor, t2, _this = this,
        borderValue = _this.border.transform$1(_this.borderAnimation.get$value()),
        canvasRect = new B.Rect(0, 0, 0 + size._dx, 0 + size._dy),
        t1 = _this.hoverColorTween.transform$1(_this.hoverAnimation.get$value());
      t1.toString;
      blendedFillColor = B.Color_alphaBlend(t1, _this.fillColor);
      if (blendedFillColor.get$alpha() > 0) {
        t1 = borderValue.getOuterPath$2$textDirection(canvasRect, _this.textDirection);
        t2 = $.$get$_renderer().createPaint$0();
        t2.set$color(blendedFillColor);
        t2.set$style(C.PaintingStyle_0);
        canvas.drawPath$2(t1, t2);
      }
      t1 = _this.gap;
      t2 = t1._input_decorator$_start;
      borderValue.paint$6$gapExtent$gapPercentage$gapStart$textDirection(canvas, canvasRect, t1._extent, _this.gapAnimation.get$value(), t2, _this.textDirection);
    },
    shouldRepaint$1(oldPainter) {
      var _this = this;
      return _this.borderAnimation !== oldPainter.borderAnimation || _this.hoverAnimation !== oldPainter.hoverAnimation || _this.gapAnimation !== oldPainter.gapAnimation || _this.border !== oldPainter.border || !_this.gap.$eq(0, oldPainter.gap) || _this.textDirection !== oldPainter.textDirection;
    },
    toString$0(_) {
      return "<optimized out>#" + B.shortHash(this);
    }
  };
  A._BorderContainer.prototype = {
    createState$0() {
      return new A._BorderContainerState(null, null);
    }
  };
  A._BorderContainerState.prototype = {
    initState$0() {
      var t1, _this = this, _null = null;
      _this.super$State$initState();
      _this.___BorderContainerState__hoverColorController_A = B.AnimationController$(_null, D.Duration_15000, _null, _this._widget.isHovering ? 1 : 0, _this);
      t1 = B.AnimationController$(_null, C.Duration_167000, _null, _null, _this);
      _this.___BorderContainerState__controller_A = t1;
      _this.___BorderContainerState__borderAnimation_A = B.CurvedAnimation$(C.Cubic_Dkk, t1, new B.FlippedCurve(C.Cubic_Dkk));
      t1 = _this._widget.border;
      _this.___BorderContainerState__border_A = new A._InputBorderTween(t1, t1);
      _this.___BorderContainerState__hoverAnimation_A = B.CurvedAnimation$(C.C__Linear, _this.___BorderContainerState__hoverColorController_A, _null);
      _this.___BorderContainerState__hoverColorTween_A = new B.ColorTween(C.Color_Edl, _this._widget.hoverColor);
    },
    dispose$0() {
      var _this = this,
        t1 = _this.___BorderContainerState__controller_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.___BorderContainerState__hoverColorController_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.___BorderContainerState__borderAnimation_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.___BorderContainerState__hoverAnimation_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      _this.super$__BorderContainerState_State_TickerProviderStateMixin$dispose();
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.border;
      if (!_this._widget.border.$eq(0, t1)) {
        _this.___BorderContainerState__border_A = new A._InputBorderTween(t1, _this._widget.border);
        t1 = _this.___BorderContainerState__controller_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t1.set$value(0);
        t1.forward$0();
      }
      if (!_this._widget.hoverColor.$eq(0, oldWidget.hoverColor))
        _this.___BorderContainerState__hoverColorTween_A = new B.ColorTween(C.Color_Edl, _this._widget.hoverColor);
      t1 = _this._widget.isHovering;
      if (t1 !== oldWidget.isHovering) {
        t2 = _this.___BorderContainerState__hoverColorController_A;
        if (t1) {
          t2 === $ && B.throwUnnamedLateFieldNI();
          t2.forward$0();
        } else {
          t2 === $ && B.throwUnnamedLateFieldNI();
          t2.reverse$0();
        }
      }
    },
    build$1(context) {
      var t2, t3, t4, t5, t6, t7, t8, t9, _this = this,
        t1 = _this.___BorderContainerState__borderAnimation_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t2 = _this._widget.gap;
      t3 = _this.___BorderContainerState__hoverColorController_A;
      t3 === $ && B.throwUnnamedLateFieldNI();
      t3 = B._setArrayType([t1, t2, t3], type$.JSArray_Listenable);
      t2 = _this.___BorderContainerState__borderAnimation_A;
      t1 = _this.___BorderContainerState__border_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t4 = _this._widget;
      t5 = t4.gapAnimation;
      t4 = t4.gap;
      t6 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection;
      t7 = _this._widget.fillColor;
      t8 = _this.___BorderContainerState__hoverColorTween_A;
      t8 === $ && B.throwUnnamedLateFieldNI();
      t9 = _this.___BorderContainerState__hoverAnimation_A;
      t9 === $ && B.throwUnnamedLateFieldNI();
      return B.CustomPaint$(null, new A._InputBorderPainter(t2, t1, t5, t4, t6, t7, t8, t9, new B._MergingListenable(t3)), null, null, C.Size_0_0);
    }
  };
  A._HelperError.prototype = {
    createState$0() {
      return new A._HelperErrorState(null, null);
    }
  };
  A._HelperErrorState.prototype = {
    get$_hasHelper() {
      this._widget.toString;
      return false;
    },
    get$_input_decorator$_hasError() {
      var t1 = this._widget.errorText;
      return t1 != null;
    },
    initState$0() {
      var t1, _this = this;
      _this.super$State$initState();
      _this.___HelperErrorState__controller_A = B.AnimationController$(null, C.Duration_167000, null, null, _this);
      if (_this.get$_input_decorator$_hasError()) {
        _this._error = _this._buildError$0();
        _this.___HelperErrorState__controller_A.set$value(1);
      } else if (_this.get$_hasHelper())
        _this._helper = _this._buildHelper$0();
      t1 = _this.___HelperErrorState__controller_A;
      t1.didRegisterListener$0();
      t1.AnimationLocalListenersMixin__listeners.add$1(0, _this.get$_input_decorator$_handleChange());
    },
    dispose$0() {
      var t1 = this.___HelperErrorState__controller_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      this.super$__HelperErrorState_State_SingleTickerProviderStateMixin$dispose();
    },
    _input_decorator$_handleChange$0() {
      this.setState$1(new A._HelperErrorState__handleChange_closure());
    },
    didUpdateWidget$1(old) {
      var t1, t2, _this = this;
      _this.super$State$didUpdateWidget(old);
      t1 = _this._widget.errorText != null;
      t2 = t1 !== (old.errorText != null);
      if (t2)
        if (t1) {
          _this._error = _this._buildError$0();
          t1 = _this.___HelperErrorState__controller_A;
          t1 === $ && B.throwUnnamedLateFieldNI();
          t1.forward$0();
        } else {
          t1 = _this.___HelperErrorState__controller_A;
          t1 === $ && B.throwUnnamedLateFieldNI();
          t1.reverse$0();
        }
    },
    _buildHelper$0() {
      var t3, t4, t5, t6, _null = null,
        t1 = type$.Tween_double,
        t2 = this.___HelperErrorState__controller_A;
      t2 === $ && B.throwUnnamedLateFieldNI();
      t3 = this._widget;
      t4 = t3.helperText;
      t4.toString;
      t5 = t3.helperStyle;
      t6 = t3.textAlign;
      t6 = B.Text$(t4, t3.helperMaxLines, C.TextOverflow_2, _null, t5, t6, _null);
      return B.Semantics$(_null, new B.FadeTransition(new B._AnimatedEvaluation(t2, new B.Tween(1, 0, t1), t1._eval$1("_AnimatedEvaluation<Animatable.T>")), false, t6, _null), true, _null, _null, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    _buildError$0() {
      var t2, t3, t4, t5, t6, _null = null,
        t1 = this.___HelperErrorState__controller_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t2 = new B.Tween(D.Offset_jLQ, C.Offset_0_0, type$.Tween_Offset).transform$1(t1.get$value());
      t3 = this._widget;
      t4 = t3.errorText;
      t4.toString;
      t5 = t3.errorStyle;
      t6 = t3.textAlign;
      t6 = B.Text$(t4, t3.errorMaxLines, C.TextOverflow_2, _null, t5, t6, _null);
      return B.Semantics$(_null, new B.FadeTransition(t1, false, B.FractionalTranslation$(t6, true, t2), _null), true, _null, _null, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    build$1(context) {
      var _this = this,
        t1 = _this.___HelperErrorState__controller_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      if (t1.get$status() === C.AnimationStatus_0) {
        _this._error = null;
        if (_this.get$_hasHelper())
          return _this._helper = _this._buildHelper$0();
        else {
          _this._helper = null;
          return C.SizedBox_0_0_null_null;
        }
      }
      if (_this.___HelperErrorState__controller_A.get$status() === C.AnimationStatus_3) {
        _this._helper = null;
        if (_this.get$_input_decorator$_hasError())
          return _this._error = _this._buildError$0();
        else {
          _this._error = null;
          return C.SizedBox_0_0_null_null;
        }
      }
      if (_this._helper == null && _this.get$_input_decorator$_hasError())
        return _this._buildError$0();
      if (_this._error == null && _this.get$_hasHelper())
        return _this._buildHelper$0();
      if (_this.get$_input_decorator$_hasError()) {
        t1 = type$.Tween_double;
        return B.Stack$(C.AlignmentDirectional_m1_m1, B._setArrayType([new B.FadeTransition(new B._AnimatedEvaluation(_this.___HelperErrorState__controller_A, new B.Tween(1, 0, t1), t1._eval$1("_AnimatedEvaluation<Animatable.T>")), false, _this._helper, null), _this._buildError$0()], type$.JSArray_Widget), C.Clip_1, C.StackFit_0);
      }
      if (_this.get$_hasHelper())
        return B.Stack$(C.AlignmentDirectional_m1_m1, B._setArrayType([_this._buildHelper$0(), new B.FadeTransition(_this.___HelperErrorState__controller_A, false, _this._error, null)], type$.JSArray_Widget), C.Clip_1, C.StackFit_0);
      return C.SizedBox_0_0_null_null;
    }
  };
  A._DecorationSlot.prototype = {
    _enumToString$0() {
      return "_DecorationSlot." + this._name;
    }
  };
  A._Decoration.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeTypeOfDartObject(_this))
        return false;
      return other instanceof A._Decoration && other.contentPadding.$eq(0, _this.contentPadding) && other.floatingLabelHeight === _this.floatingLabelHeight && other.floatingLabelProgress === _this.floatingLabelProgress && other.floatingLabelAlignment.$eq(0, _this.floatingLabelAlignment) && other.border.$eq(0, _this.border) && other.borderGap.$eq(0, _this.borderGap) && other.isDense == _this.isDense && other.visualDensity.$eq(0, _this.visualDensity) && J.$eq$(other.icon, _this.icon) && J.$eq$(other.input, _this.input) && J.$eq$(other.label, _this.label) && J.$eq$(other.hint, _this.hint) && J.$eq$(other.prefix, _this.prefix) && J.$eq$(other.suffix, _this.suffix) && J.$eq$(other.prefixIcon, _this.prefixIcon) && J.$eq$(other.suffixIcon, _this.suffixIcon) && other.helperError.super$Object$$eq(0, _this.helperError) && J.$eq$(other.counter, _this.counter) && other.container.super$Object$$eq(0, _this.container);
    },
    get$hashCode(_) {
      var _this = this;
      return B.Object_hash(_this.contentPadding, _this.floatingLabelHeight, _this.floatingLabelProgress, _this.floatingLabelAlignment, _this.border, _this.borderGap, false, _this.isDense, _this.visualDensity, _this.icon, _this.input, _this.label, _this.hint, _this.prefix, _this.suffix, _this.prefixIcon, _this.suffixIcon, _this.helperError, _this.counter, _this.container);
    }
  };
  A._RenderDecorationLayout.prototype = {};
  A._RenderDecoration.prototype = {
    get$children() {
      var t3,
        t1 = this.SlottedContainerRenderObjectMixin__slotToChild,
        helperError = t1.$index(0, D._DecorationSlot_8),
        t2 = B._setArrayType([], type$.JSArray_RenderBox);
      if (t1.$index(0, D._DecorationSlot_0) != null) {
        t3 = t1.$index(0, D._DecorationSlot_0);
        t3.toString;
        t2.push(t3);
      }
      if (t1.$index(0, D._DecorationSlot_1) != null) {
        t3 = t1.$index(0, D._DecorationSlot_1);
        t3.toString;
        t2.push(t3);
      }
      if (t1.$index(0, D._DecorationSlot_6) != null) {
        t3 = t1.$index(0, D._DecorationSlot_6);
        t3.toString;
        t2.push(t3);
      }
      if (t1.$index(0, D._DecorationSlot_7) != null) {
        t3 = t1.$index(0, D._DecorationSlot_7);
        t3.toString;
        t2.push(t3);
      }
      if (t1.$index(0, D._DecorationSlot_4) != null) {
        t3 = t1.$index(0, D._DecorationSlot_4);
        t3.toString;
        t2.push(t3);
      }
      if (t1.$index(0, D._DecorationSlot_5) != null) {
        t3 = t1.$index(0, D._DecorationSlot_5);
        t3.toString;
        t2.push(t3);
      }
      if (t1.$index(0, D._DecorationSlot_2) != null) {
        t3 = t1.$index(0, D._DecorationSlot_2);
        t3.toString;
        t2.push(t3);
      }
      if (t1.$index(0, D._DecorationSlot_3) != null) {
        t3 = t1.$index(0, D._DecorationSlot_3);
        t3.toString;
        t2.push(t3);
      }
      if (helperError != null)
        t2.push(helperError);
      if (t1.$index(0, D._DecorationSlot_9) != null) {
        t3 = t1.$index(0, D._DecorationSlot_9);
        t3.toString;
        t2.push(t3);
      }
      if (t1.$index(0, D._DecorationSlot_10) != null) {
        t1 = t1.$index(0, D._DecorationSlot_10);
        t1.toString;
        t2.push(t1);
      }
      return t2;
    },
    set$decoration(value) {
      if (this._input_decorator$_decoration.$eq(0, value))
        return;
      this._input_decorator$_decoration = value;
      this.markNeedsLayout$0();
    },
    set$textDirection(value) {
      if (this._input_decorator$_textDirection === value)
        return;
      this._input_decorator$_textDirection = value;
      this.markNeedsLayout$0();
    },
    set$textBaseline(value) {
      if (this._textBaseline === value)
        return;
      this._textBaseline = value;
      this.markNeedsLayout$0();
    },
    set$textAlignVertical(value) {
      return;
    },
    set$isFocused(value) {
      if (this._isFocused === value)
        return;
      this._isFocused = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$expands(value) {
      return;
    },
    get$_isOutlineAligned() {
      var t1 = this._input_decorator$_decoration.border.get$isOutline();
      return t1;
    },
    visitChildrenForSemantics$1(visitor) {
      var t2,
        t1 = this.SlottedContainerRenderObjectMixin__slotToChild;
      if (t1.$index(0, D._DecorationSlot_0) != null) {
        t2 = t1.$index(0, D._DecorationSlot_0);
        t2.toString;
        visitor.call$1(t2);
      }
      if (t1.$index(0, D._DecorationSlot_4) != null) {
        t2 = t1.$index(0, D._DecorationSlot_4);
        t2.toString;
        visitor.call$1(t2);
      }
      if (t1.$index(0, D._DecorationSlot_6) != null) {
        t2 = t1.$index(0, D._DecorationSlot_6);
        t2.toString;
        visitor.call$1(t2);
      }
      if (t1.$index(0, D._DecorationSlot_2) != null) {
        t2 = t1.$index(0, D._DecorationSlot_2);
        t2.toString;
        visitor.call$1(t2);
      }
      if (t1.$index(0, D._DecorationSlot_3) != null)
        if (this._isFocused) {
          t2 = t1.$index(0, D._DecorationSlot_3);
          t2.toString;
          visitor.call$1(t2);
        } else if (t1.$index(0, D._DecorationSlot_2) == null) {
          t2 = t1.$index(0, D._DecorationSlot_3);
          t2.toString;
          visitor.call$1(t2);
        }
      if (t1.$index(0, D._DecorationSlot_1) != null) {
        t2 = t1.$index(0, D._DecorationSlot_1);
        t2.toString;
        visitor.call$1(t2);
      }
      if (t1.$index(0, D._DecorationSlot_7) != null) {
        t2 = t1.$index(0, D._DecorationSlot_7);
        t2.toString;
        visitor.call$1(t2);
      }
      if (t1.$index(0, D._DecorationSlot_5) != null) {
        t2 = t1.$index(0, D._DecorationSlot_5);
        t2.toString;
        visitor.call$1(t2);
      }
      if (t1.$index(0, D._DecorationSlot_10) != null) {
        t2 = t1.$index(0, D._DecorationSlot_10);
        t2.toString;
        visitor.call$1(t2);
      }
      t2 = t1.$index(0, D._DecorationSlot_8);
      t2.toString;
      visitor.call$1(t2);
      if (t1.$index(0, D._DecorationSlot_9) != null) {
        t1 = t1.$index(0, D._DecorationSlot_9);
        t1.toString;
        visitor.call$1(t1);
      }
    },
    _computeSubtextSizes$3$constraints$getBaseline$layoutChild(constraints, getBaseline, layoutChild) {
      var _1_1, counterAscent, _1_2, counterSize, helperErrorConstraints, helperErrorHeight, t3, t4, t5, t6, _null = null,
        t1 = this.SlottedContainerRenderObjectMixin__slotToChild,
        t2 = t1.$index(0, D._DecorationSlot_9);
      $label0$0: {
        if (t2 instanceof B.RenderBox) {
          t2 = new B._Record_2(layoutChild.call$2(t2, constraints), getBaseline.call$2(t2, constraints));
          break $label0$0;
        }
        if (t2 == null) {
          t2 = D.Record2_Size_0_0_0;
          break $label0$0;
        }
        t2 = _null;
      }
      _1_1 = t2._0;
      counterAscent = _null;
      _1_2 = t2._1;
      counterAscent = _1_2;
      counterSize = _1_1;
      helperErrorConstraints = constraints.deflate$1(new B.EdgeInsets(counterSize._dx, 0, 0, 0));
      t2 = t1.$index(0, D._DecorationSlot_8);
      t2.toString;
      helperErrorHeight = layoutChild.call$2(t2, helperErrorConstraints)._dy;
      if (helperErrorHeight === 0 && counterSize._dy === 0)
        return _null;
      t1 = t1.$index(0, D._DecorationSlot_8);
      t1.toString;
      t1 = getBaseline.call$2(t1, helperErrorConstraints);
      t1 = Math.max(B.checkNum(counterAscent), B.checkNum(t1));
      t2 = this._material3;
      t3 = t2 ? 4 : 8;
      t4 = Math.max(B.checkNum(counterAscent), helperErrorHeight);
      t5 = t2 ? 4 : 8;
      t6 = Math.max(counterSize._dy, helperErrorHeight);
      t2 = t2 ? 4 : 8;
      return new B._Record_3_ascent_bottomHeight_subtex78tHeight(t1 + t3, t4 + t5, t6 + t2);
    },
    _layout$3$getBaseline$layoutChild(constraints, getBaseline, layoutChild) {
      var t5, t6, prefixIconSize, suffixIconSize, t7, t8, prefixSize, t9, suffixSize, t10, t11, inputWidth, suffixIconSpace, labelWidth, labelConstraints, labelHeight, topHeight, bottomHeight, inputConstraints, inputSize, hintSize, inputBaseline, hintBaseline, inputHeight, inputInternalBaseline, prefixBaseline, suffixBaseline, fixAboveInput, fixBelowInput, fixIconHeight, contentHeight, maxContainerHeight, containerHeight, interactiveAdjustment, overflow, textAlignVerticalFactor, baselineAdjustment, topInputBaseline, maxVerticalOffset, outlineCenterBaseline, baseline, _this = this,
        t1 = constraints.maxWidth,
        t2 = constraints.maxHeight,
        boxConstraints = new B.BoxConstraints(0, t1, 0, t2),
        t3 = _this.SlottedContainerRenderObjectMixin__slotToChild,
        t4 = t3.$index(0, D._DecorationSlot_0),
        iconWidth = t4 == null ? 0 : layoutChild.call$2(t4, boxConstraints)._dx,
        containerConstraints = boxConstraints.deflate$1(new B.EdgeInsets(iconWidth, 0, 0, 0)),
        contentConstraints = containerConstraints.deflate$1(new B.EdgeInsets(_this._input_decorator$_decoration.contentPadding.get$horizontal(), 0, 0, 0)),
        subtextSize = _this._computeSubtextSizes$3$constraints$getBaseline$layoutChild(contentConstraints, getBaseline, layoutChild);
      t4 = t3.$index(0, D._DecorationSlot_6);
      t5 = t3.$index(0, D._DecorationSlot_7);
      t6 = t4 == null;
      prefixIconSize = t6 ? C.Size_0_0 : layoutChild.call$2(t4, containerConstraints);
      t4 = t5 == null;
      suffixIconSize = t4 ? C.Size_0_0 : layoutChild.call$2(t5, containerConstraints);
      t5 = t3.$index(0, D._DecorationSlot_4);
      t7 = t3.$index(0, D._DecorationSlot_5);
      t8 = t5 == null;
      prefixSize = t8 ? C.Size_0_0 : layoutChild.call$2(t5, contentConstraints);
      t9 = t7 == null;
      suffixSize = t9 ? C.Size_0_0 : layoutChild.call$2(t7, contentConstraints);
      t10 = prefixSize._dx;
      if (t6)
        t6 = _this._input_decorator$_decoration.contentPadding.start;
      else {
        t6 = prefixIconSize._dx;
        t6 += _this._material3 ? 4 : 0;
      }
      t11 = suffixSize._dx;
      if (t4)
        t4 = _this._input_decorator$_decoration.contentPadding.end;
      else {
        t4 = suffixIconSize._dx;
        t4 += _this._material3 ? 4 : 0;
      }
      inputWidth = Math.max(0, t1 - new B.EdgeInsetsDirectional(iconWidth + t10 + t6, 0, t11 + t4, 0).get$horizontal());
      t4 = t3.$index(0, D._DecorationSlot_2);
      if (t4 != null) {
        t6 = _this._input_decorator$_decoration.border.get$isOutline();
        suffixIconSpace = suffixIconSize._dx;
        if (t6) {
          t6 = B.lerpDouble(suffixIconSpace, 0, _this._input_decorator$_decoration.floatingLabelProgress);
          t6.toString;
          suffixIconSpace = t6;
        }
        labelWidth = Math.max(0, t1 - (iconWidth + _this._input_decorator$_decoration.contentPadding.get$horizontal() + prefixIconSize._dx + suffixIconSpace));
        t6 = B.lerpDouble(1, 1.3333333333333333, _this._input_decorator$_decoration.floatingLabelProgress);
        t6.toString;
        labelConstraints = boxConstraints.copyWith$1$maxWidth(labelWidth * t6);
        layoutChild.call$2(t4, labelConstraints);
        t6 = _this._input_decorator$_decoration;
        labelHeight = t6.floatingLabelHeight;
        topHeight = t6.border.get$isOutline() ? Math.max(labelHeight - getBaseline.call$2(t4, labelConstraints), 0) : labelHeight;
      } else
        topHeight = 0;
      t4 = subtextSize == null;
      bottomHeight = t4 ? null : subtextSize._1;
      if (bottomHeight == null)
        bottomHeight = 0;
      t6 = _this._input_decorator$_decoration.contentPadding;
      t10 = t6.get$_top();
      t6 = t6.get$_bottom();
      t11 = _this._input_decorator$_decoration.visualDensity;
      inputConstraints = boxConstraints.deflate$1(new B.EdgeInsets(0, t10 + t6 + topHeight + bottomHeight + new B.Offset(t11.horizontal, t11.vertical).$mul(0, 4)._dy, 0, 0)).tighten$1$width(inputWidth);
      t11 = t3.$index(0, D._DecorationSlot_1);
      t3 = t3.$index(0, D._DecorationSlot_3);
      t6 = t11 == null;
      inputSize = t6 ? C.Size_0_0 : layoutChild.call$2(t11, inputConstraints);
      t10 = t3 == null;
      hintSize = t10 ? C.Size_0_0 : layoutChild.call$2(t3, boxConstraints.tighten$1$width(inputWidth));
      inputBaseline = t6 ? 0 : getBaseline.call$2(t11, inputConstraints);
      hintBaseline = t10 ? 0 : getBaseline.call$2(t3, boxConstraints.tighten$1$width(inputWidth));
      inputHeight = Math.max(hintSize._dy, inputSize._dy);
      inputInternalBaseline = Math.max(inputBaseline, hintBaseline);
      prefixBaseline = t8 ? 0 : getBaseline.call$2(t5, contentConstraints);
      suffixBaseline = t9 ? 0 : getBaseline.call$2(t7, contentConstraints);
      fixAboveInput = Math.max(0, Math.max(prefixBaseline, suffixBaseline) - inputInternalBaseline);
      fixBelowInput = Math.max(0, Math.max(prefixSize._dy - prefixBaseline, suffixSize._dy - suffixBaseline) - (inputHeight - inputInternalBaseline));
      fixIconHeight = Math.max(prefixIconSize._dy, suffixIconSize._dy);
      t3 = _this._input_decorator$_decoration;
      t5 = t3.contentPadding;
      t3 = t3.visualDensity;
      contentHeight = Math.max(fixIconHeight, topHeight + t5.top + fixAboveInput + inputHeight + fixBelowInput + t5.bottom + new B.Offset(t3.horizontal, t3.vertical).$mul(0, 4)._dy);
      _this._input_decorator$_decoration.isDense.toString;
      maxContainerHeight = Math.max(0, t2 - bottomHeight);
      containerHeight = Math.min(Math.max(contentHeight, 48), maxContainerHeight);
      interactiveAdjustment = 48 > contentHeight ? (48 - contentHeight) / 2 : 0;
      overflow = Math.max(0, contentHeight - maxContainerHeight);
      t2 = _this._textAlignVertical;
      t2 = _this.get$_isOutlineAligned() ? D.TextAlignVertical_0 : D.TextAlignVertical_m1;
      textAlignVerticalFactor = (t2.y + 1) / 2;
      baselineAdjustment = fixAboveInput - overflow * (1 - textAlignVerticalFactor);
      t2 = _this._input_decorator$_decoration;
      t3 = t2.visualDensity;
      topInputBaseline = t2.contentPadding.top + topHeight + inputInternalBaseline + baselineAdjustment + interactiveAdjustment + new B.Offset(t3.horizontal, t3.vertical).$mul(0, 4)._dy / 2;
      t3 = _this._input_decorator$_decoration.contentPadding;
      t2 = t3.get$_top();
      t3 = t3.get$_bottom();
      t5 = _this._input_decorator$_decoration.visualDensity;
      maxVerticalOffset = containerHeight - (t2 + t3) - topHeight - new B.Offset(t5.horizontal, t5.vertical).$mul(0, 4)._dy - (fixAboveInput + inputHeight + fixBelowInput);
      if (_this.get$_isOutlineAligned()) {
        outlineCenterBaseline = inputInternalBaseline + baselineAdjustment / 2 + (containerHeight - inputHeight) / 2;
        t2 = _this._textAlignVertical;
        t2 = _this.get$_isOutlineAligned() ? D.TextAlignVertical_0 : D.TextAlignVertical_m1;
        t2 = t2.y;
        baseline = outlineCenterBaseline + (t2 <= 0 ? Math.max(outlineCenterBaseline - topInputBaseline, 0) : Math.max(topInputBaseline + maxVerticalOffset - outlineCenterBaseline, 0)) * t2;
      } else
        baseline = topInputBaseline + maxVerticalOffset * textAlignVerticalFactor;
      t2 = t4 ? null : subtextSize._2;
      return new A._RenderDecorationLayout(inputConstraints, baseline, containerHeight, subtextSize, new B.Size(t1, containerHeight + (t2 == null ? 0 : t2)));
    },
    computeMinIntrinsicWidth$1(height) {
      var t3, t4, t5, t6, t7, t8, _this = this,
        t1 = _this.SlottedContainerRenderObjectMixin__slotToChild,
        t2 = A._RenderDecoration__minWidth(t1.$index(0, D._DecorationSlot_0), height);
      if (t1.$index(0, D._DecorationSlot_6) != null)
        t3 = _this._material3 ? 4 : 0;
      else
        t3 = _this._input_decorator$_decoration.contentPadding.start;
      t4 = A._RenderDecoration__minWidth(t1.$index(0, D._DecorationSlot_6), height);
      t5 = A._RenderDecoration__minWidth(t1.$index(0, D._DecorationSlot_4), height);
      t6 = Math.max(A._RenderDecoration__minWidth(t1.$index(0, D._DecorationSlot_1), height), A._RenderDecoration__minWidth(t1.$index(0, D._DecorationSlot_3), height));
      t7 = A._RenderDecoration__minWidth(t1.$index(0, D._DecorationSlot_5), height);
      t8 = A._RenderDecoration__minWidth(t1.$index(0, D._DecorationSlot_7), height);
      if (t1.$index(0, D._DecorationSlot_7) != null)
        t1 = _this._material3 ? 4 : 0;
      else
        t1 = _this._input_decorator$_decoration.contentPadding.end;
      return t2 + t3 + t4 + t5 + t6 + t7 + t8 + t1;
    },
    computeMaxIntrinsicWidth$1(height) {
      var t3, t4, t5, t6, t7, t8, _this = this,
        t1 = _this.SlottedContainerRenderObjectMixin__slotToChild,
        t2 = A._RenderDecoration__maxWidth(t1.$index(0, D._DecorationSlot_0), height);
      if (t1.$index(0, D._DecorationSlot_6) != null)
        t3 = _this._material3 ? 4 : 0;
      else
        t3 = _this._input_decorator$_decoration.contentPadding.start;
      t4 = A._RenderDecoration__maxWidth(t1.$index(0, D._DecorationSlot_6), height);
      t5 = A._RenderDecoration__maxWidth(t1.$index(0, D._DecorationSlot_4), height);
      t6 = Math.max(A._RenderDecoration__maxWidth(t1.$index(0, D._DecorationSlot_1), height), A._RenderDecoration__maxWidth(t1.$index(0, D._DecorationSlot_3), height));
      t7 = A._RenderDecoration__maxWidth(t1.$index(0, D._DecorationSlot_5), height);
      t8 = A._RenderDecoration__maxWidth(t1.$index(0, D._DecorationSlot_7), height);
      if (t1.$index(0, D._DecorationSlot_7) != null)
        t1 = _this._material3 ? 4 : 0;
      else
        t1 = _this._input_decorator$_decoration.contentPadding.end;
      return t2 + t3 + t4 + t5 + t6 + t7 + t8 + t1;
    },
    _lineHeight$2(width, boxes) {
      var height, _i, box, t1;
      for (height = 0, _i = 0; _i < 2; ++_i) {
        box = boxes[_i];
        if (box == null)
          continue;
        t1 = box.get$computeMinIntrinsicHeight();
        t1 = box._computeWithTimeline$3(C._IntrinsicDimension_2, width, t1);
        if (t1 == null)
          t1 = 0;
        height = Math.max(t1, height);
      }
      return height;
    },
    computeMinIntrinsicHeight$1(width) {
      var prefixIconHeight, prefixIconWidth, suffixIconHeight, suffixIconWidth, counterHeight, helperErrorAvailableWidth, t2, subtextHeight, prefixHeight, prefixWidth, suffixHeight, inputMaxHeight, t3, t4, t5, containerHeight, _this = this,
        t1 = _this.SlottedContainerRenderObjectMixin__slotToChild,
        iconHeight = A._RenderDecoration__minHeight(t1.$index(0, D._DecorationSlot_0), width);
      width = Math.max(width - A._RenderDecoration__minWidth(t1.$index(0, D._DecorationSlot_0), iconHeight), 0);
      prefixIconHeight = A._RenderDecoration__minHeight(t1.$index(0, D._DecorationSlot_6), width);
      prefixIconWidth = A._RenderDecoration__minWidth(t1.$index(0, D._DecorationSlot_6), prefixIconHeight);
      suffixIconHeight = A._RenderDecoration__minHeight(t1.$index(0, D._DecorationSlot_7), width);
      suffixIconWidth = A._RenderDecoration__minWidth(t1.$index(0, D._DecorationSlot_7), suffixIconHeight);
      width = Math.max(width - _this._input_decorator$_decoration.contentPadding.get$horizontal(), 0);
      counterHeight = A._RenderDecoration__minHeight(t1.$index(0, D._DecorationSlot_9), width);
      helperErrorAvailableWidth = Math.max(width - A._RenderDecoration__minWidth(t1.$index(0, D._DecorationSlot_9), counterHeight), 0);
      t2 = t1.$index(0, D._DecorationSlot_8);
      t2.toString;
      subtextHeight = Math.max(counterHeight, A._RenderDecoration__minHeight(t2, helperErrorAvailableWidth));
      if (subtextHeight > 0)
        subtextHeight += _this._material3 ? 4 : 8;
      prefixHeight = A._RenderDecoration__minHeight(t1.$index(0, D._DecorationSlot_4), width);
      prefixWidth = A._RenderDecoration__minWidth(t1.$index(0, D._DecorationSlot_4), prefixHeight);
      suffixHeight = A._RenderDecoration__minHeight(t1.$index(0, D._DecorationSlot_5), width);
      t2 = type$.JSArray_double;
      inputMaxHeight = C.JSArray_methods.reduce$1(B._setArrayType([_this._lineHeight$2(Math.max(width - prefixWidth - A._RenderDecoration__minWidth(t1.$index(0, D._DecorationSlot_5), suffixHeight) - prefixIconWidth - suffixIconWidth, 0), B._setArrayType([t1.$index(0, D._DecorationSlot_1), t1.$index(0, D._DecorationSlot_3)], type$.JSArray_nullable_RenderBox)), prefixHeight, suffixHeight], t2), D.CONSTANT0);
      t3 = _this._input_decorator$_decoration;
      t1 = t1.$index(0, D._DecorationSlot_2) == null ? 0 : _this._input_decorator$_decoration.floatingLabelHeight;
      t4 = _this._input_decorator$_decoration;
      t5 = t4.visualDensity;
      containerHeight = C.JSArray_methods.reduce$1(B._setArrayType([iconHeight, t3.contentPadding.top + t1 + inputMaxHeight + t4.contentPadding.bottom + new B.Offset(t5.horizontal, t5.vertical).$mul(0, 4)._dy, prefixIconHeight, suffixIconHeight], t2), D.CONSTANT0);
      _this._input_decorator$_decoration.isDense.toString;
      return Math.max(containerHeight, 48) + subtextHeight;
    },
    computeMaxIntrinsicHeight$1(width) {
      return this._computeIntrinsics$3(C._IntrinsicDimension_2, width, this.get$computeMinIntrinsicHeight());
    },
    computeDistanceToActualBaseline$1(baseline) {
      var t2, t3,
        t1 = this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, D._DecorationSlot_1);
      if (t1 == null)
        return 0;
      t2 = t1.parentData;
      t2.toString;
      t2 = type$.BoxParentData._as(t2).offset;
      t3 = t1.getDistanceToActualBaseline$1(baseline);
      t1 = t3 == null ? t1.get$size()._dy : t3;
      return t2._dy + t1;
    },
    computeDryBaseline$2(constraints, baseline) {
      var layout, t2, t3, t4,
        t1 = this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, D._DecorationSlot_1);
      if (t1 == null)
        return 0;
      layout = this._layout$3$getBaseline$layoutChild(constraints, A.input_decorator__RenderDecoration__getDryBaseline$closure(), B.layout_helper_ChildLayoutHelper_dryLayoutChild$closure());
      switch (baseline.index) {
        case 0:
          t1 = 0;
          break;
        case 1:
          t2 = layout.inputConstraints;
          t3 = t1.getDryBaseline$2(t2, C.TextBaseline_1);
          if (t3 == null)
            t3 = t1._computeIntrinsics$3(C.C__DryLayout, t2, t1.get$_box$_computeDryLayout())._dy;
          t4 = t1.getDryBaseline$2(t2, C.TextBaseline_0);
          t1 = t3 - (t4 == null ? t1._computeIntrinsics$3(C.C__DryLayout, t2, t1.get$_box$_computeDryLayout())._dy : t4);
          break;
        default:
          t1 = null;
      }
      return t1 + layout.baseline;
    },
    computeDryLayout$1(constraints) {
      return constraints.constrain$1(this._layout$3$getBaseline$layoutChild(constraints, A.input_decorator__RenderDecoration__getDryBaseline$closure(), B.layout_helper_ChildLayoutHelper_dryLayoutChild$closure()).size);
    },
    performLayout$0() {
      var layout, t1, overallWidth, container, t2, t3, height, centerLayout, subtextBaseline, t4, counterBaseline, t5, start, end, t6, t7, baselineLayout, labelX, floatWidth, offsetToPrefixIcon, _this = this, _null = null,
        constraints = type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this));
      _this._labelTransform = null;
      layout = _this._layout$3$getBaseline$layoutChild(constraints, A.input_decorator__RenderDecoration__getBaseline$closure(), B.layout_helper_ChildLayoutHelper_layoutChild$closure());
      t1 = layout.size;
      _this._box$_size = constraints.constrain$1(t1);
      overallWidth = t1._dx;
      t1 = _this.SlottedContainerRenderObjectMixin__slotToChild;
      container = t1.$index(0, D._DecorationSlot_10);
      if (container != null) {
        container.layout$2$parentUsesSize(B.BoxConstraints$tightFor(layout.containerHeight, overallWidth - A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_0))._dx), true);
        switch (_this._input_decorator$_textDirection.index) {
          case 0:
            t2 = 0;
            break;
          case 1:
            t2 = A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_0))._dx;
            break;
          default:
            t2 = _null;
        }
        t3 = container.parentData;
        t3.toString;
        type$.BoxParentData._as(t3).offset = new B.Offset(t2, 0);
      }
      height = layout.containerHeight;
      centerLayout = new A._RenderDecoration_performLayout_centerLayout(height);
      if (t1.$index(0, D._DecorationSlot_0) != null) {
        switch (_this._input_decorator$_textDirection.index) {
          case 0:
            t2 = overallWidth - t1.$index(0, D._DecorationSlot_0).get$size()._dx;
            break;
          case 1:
            t2 = 0;
            break;
          default:
            t2 = _null;
        }
        t3 = t1.$index(0, D._DecorationSlot_0);
        t3.toString;
        centerLayout.call$2(t3, t2);
      }
      t2 = layout.subtextSize;
      t2 = t2 == null ? _null : t2._0;
      subtextBaseline = (t2 == null ? 0 : t2) + height;
      t2 = t1.$index(0, D._DecorationSlot_9);
      t3 = t1.$index(0, D._DecorationSlot_8);
      t3.toString;
      t3 = t3.getDistanceToBaseline$1(C.TextBaseline_0);
      t3.toString;
      t4 = t2 == null;
      if (t4)
        counterBaseline = _null;
      else {
        t5 = t2.getDistanceToBaseline$1(C.TextBaseline_0);
        t5.toString;
        counterBaseline = t5;
      }
      if (counterBaseline == null)
        counterBaseline = 0;
      switch (_this._input_decorator$_textDirection.index) {
        case 1:
          start = _this._input_decorator$_decoration.contentPadding.start + A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_0))._dx;
          end = overallWidth - _this._input_decorator$_decoration.contentPadding.end;
          t5 = t1.$index(0, D._DecorationSlot_8);
          t5.toString;
          t5 = t5.parentData;
          t5.toString;
          t6 = type$.BoxParentData;
          t6._as(t5).offset = new B.Offset(start, subtextBaseline - t3);
          if (!t4) {
            t3 = t2.parentData;
            t3.toString;
            t6._as(t3).offset = new B.Offset(end - t2.get$size()._dx, subtextBaseline - counterBaseline);
          }
          break;
        case 0:
          start = overallWidth - _this._input_decorator$_decoration.contentPadding.start - A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_0))._dx;
          end = _this._input_decorator$_decoration.contentPadding.end;
          t5 = t1.$index(0, D._DecorationSlot_8);
          t5.toString;
          t5 = t5.parentData;
          t5.toString;
          t6 = type$.BoxParentData;
          t6._as(t5);
          t7 = t1.$index(0, D._DecorationSlot_8);
          t7.toString;
          t5.offset = new B.Offset(start - t7.get$size()._dx, subtextBaseline - t3);
          if (!t4) {
            t2 = t2.parentData;
            t2.toString;
            t6._as(t2).offset = new B.Offset(end, subtextBaseline - counterBaseline);
          }
          break;
        default:
          end = _null;
          start = end;
      }
      baselineLayout = new A._RenderDecoration_performLayout_baselineLayout(layout.baseline);
      switch (_this._input_decorator$_textDirection.index) {
        case 0:
          if (t1.$index(0, D._DecorationSlot_6) != null) {
            start += _this._input_decorator$_decoration.contentPadding.start;
            t2 = t1.$index(0, D._DecorationSlot_6);
            t2.toString;
            t2 = centerLayout.call$2(t2, start - t1.$index(0, D._DecorationSlot_6).get$size()._dx);
            t3 = _this._material3 ? 4 : 0;
            start = start - t2 - t3;
          }
          if (t1.$index(0, D._DecorationSlot_2) != null) {
            t2 = t1.$index(0, D._DecorationSlot_2);
            t2.toString;
            centerLayout.call$2(t2, start - t1.$index(0, D._DecorationSlot_2).get$size()._dx);
          }
          if (t1.$index(0, D._DecorationSlot_4) != null) {
            t2 = t1.$index(0, D._DecorationSlot_4);
            t2.toString;
            start -= baselineLayout.call$2(t2, start - t1.$index(0, D._DecorationSlot_4).get$size()._dx);
          }
          if (t1.$index(0, D._DecorationSlot_1) != null) {
            t2 = t1.$index(0, D._DecorationSlot_1);
            t2.toString;
            baselineLayout.call$2(t2, start - t1.$index(0, D._DecorationSlot_1).get$size()._dx);
          }
          if (t1.$index(0, D._DecorationSlot_3) != null) {
            t2 = t1.$index(0, D._DecorationSlot_3);
            t2.toString;
            baselineLayout.call$2(t2, start - t1.$index(0, D._DecorationSlot_3).get$size()._dx);
          }
          if (t1.$index(0, D._DecorationSlot_7) != null) {
            end -= _this._input_decorator$_decoration.contentPadding.end;
            t2 = t1.$index(0, D._DecorationSlot_7);
            t2.toString;
            t2 = centerLayout.call$2(t2, end);
            t3 = _this._material3 ? 4 : 0;
            end = end + t2 + t3;
          }
          if (t1.$index(0, D._DecorationSlot_5) != null) {
            t2 = t1.$index(0, D._DecorationSlot_5);
            t2.toString;
            baselineLayout.call$2(t2, end);
          }
          break;
        case 1:
          if (t1.$index(0, D._DecorationSlot_6) != null) {
            start -= _this._input_decorator$_decoration.contentPadding.start;
            t2 = t1.$index(0, D._DecorationSlot_6);
            t2.toString;
            t2 = centerLayout.call$2(t2, start);
            t3 = _this._material3 ? 4 : 0;
            start = start + t2 + t3;
          }
          if (t1.$index(0, D._DecorationSlot_2) != null) {
            t2 = t1.$index(0, D._DecorationSlot_2);
            t2.toString;
            centerLayout.call$2(t2, start);
          }
          if (t1.$index(0, D._DecorationSlot_4) != null) {
            t2 = t1.$index(0, D._DecorationSlot_4);
            t2.toString;
            start += baselineLayout.call$2(t2, start);
          }
          if (t1.$index(0, D._DecorationSlot_1) != null) {
            t2 = t1.$index(0, D._DecorationSlot_1);
            t2.toString;
            baselineLayout.call$2(t2, start);
          }
          if (t1.$index(0, D._DecorationSlot_3) != null) {
            t2 = t1.$index(0, D._DecorationSlot_3);
            t2.toString;
            baselineLayout.call$2(t2, start);
          }
          if (t1.$index(0, D._DecorationSlot_7) != null) {
            end += _this._input_decorator$_decoration.contentPadding.end;
            t2 = t1.$index(0, D._DecorationSlot_7);
            t2.toString;
            t2 = centerLayout.call$2(t2, end - t1.$index(0, D._DecorationSlot_7).get$size()._dx);
            t3 = _this._material3 ? 4 : 0;
            end = end - t2 - t3;
          }
          if (t1.$index(0, D._DecorationSlot_5) != null) {
            t2 = t1.$index(0, D._DecorationSlot_5);
            t2.toString;
            baselineLayout.call$2(t2, end - t1.$index(0, D._DecorationSlot_5).get$size()._dx);
          }
          break;
      }
      if (t1.$index(0, D._DecorationSlot_2) != null) {
        t2 = t1.$index(0, D._DecorationSlot_2).parentData;
        t2.toString;
        labelX = type$.BoxParentData._as(t2).offset._dx;
        floatWidth = A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_2))._dx * 0.75;
        switch (_this._input_decorator$_textDirection.index) {
          case 0:
            t2 = t1.$index(0, D._DecorationSlot_6);
            offsetToPrefixIcon = t2 != null ? _this._material3 ? A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_6))._dx - _this._input_decorator$_decoration.contentPadding.end : 0 : 0;
            _this._input_decorator$_decoration.borderGap.set$start(B.lerpDouble(labelX + A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_2))._dx + offsetToPrefixIcon, A._RenderDecoration__boxSize(container)._dx / 2 + floatWidth / 2, 0));
            break;
          case 1:
            t2 = t1.$index(0, D._DecorationSlot_6);
            offsetToPrefixIcon = t2 != null ? _this._material3 ? -A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_6))._dx + _this._input_decorator$_decoration.contentPadding.start : 0 : 0;
            _this._input_decorator$_decoration.borderGap.set$start(B.lerpDouble(labelX - A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_0))._dx + offsetToPrefixIcon, A._RenderDecoration__boxSize(container)._dx / 2 - floatWidth / 2, 0));
            break;
        }
        _this._input_decorator$_decoration.borderGap.set$extent(t1.$index(0, D._DecorationSlot_2).get$size()._dx * 0.75);
      } else {
        _this._input_decorator$_decoration.borderGap.set$start(_null);
        _this._input_decorator$_decoration.borderGap.set$extent(0);
      }
    },
    _paintLabel$2(context, offset) {
      var t1 = this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, D._DecorationSlot_2);
      t1.toString;
      context.paintChild$2(t1, offset);
    },
    paint$2(context, offset) {
      var t2, t3, labelOffset, labelWidth, t4, t5, t, isOutlineBorder, outlinedFloatingY, floatingY, startX, floatStartX, t6, _this = this,
        doPaint = new A._RenderDecoration_paint_doPaint(context, offset),
        t1 = _this.SlottedContainerRenderObjectMixin__slotToChild;
      doPaint.call$1(t1.$index(0, D._DecorationSlot_10));
      if (t1.$index(0, D._DecorationSlot_2) != null) {
        t2 = t1.$index(0, D._DecorationSlot_2).parentData;
        t2.toString;
        t3 = type$.BoxParentData;
        labelOffset = t3._as(t2).offset;
        t2 = A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_2));
        labelWidth = A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_2))._dx;
        t4 = _this._input_decorator$_decoration;
        t5 = t4.border;
        t = t4.floatingLabelProgress;
        isOutlineBorder = t5.get$isOutline();
        outlinedFloatingY = -t2._dy * 0.75 / 2 + t5.borderSide.width / 2;
        if (isOutlineBorder)
          floatingY = outlinedFloatingY;
        else {
          t2 = _this._input_decorator$_decoration;
          t4 = t2.visualDensity;
          floatingY = t2.contentPadding.top + new B.Offset(t4.horizontal, t4.vertical).$mul(0, 4)._dy / 2;
        }
        t2 = B.lerpDouble(1, 0.75, t);
        t2.toString;
        t4 = t1.$index(0, D._DecorationSlot_10).parentData;
        t4.toString;
        t4 = t3._as(t4).offset;
        t3 = A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_10));
        switch (_this._input_decorator$_textDirection.index) {
          case 0:
            startX = labelOffset._dx + labelWidth * (1 - t2);
            if (t1.$index(0, D._DecorationSlot_6) != null)
              t5 = isOutlineBorder;
            else
              t5 = false;
            if (t5)
              floatStartX = startX + (_this._material3 ? A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_6))._dx - _this._input_decorator$_decoration.contentPadding.end : 0);
            else
              floatStartX = startX;
            break;
          case 1:
            startX = labelOffset._dx;
            if (t1.$index(0, D._DecorationSlot_6) != null)
              t5 = isOutlineBorder;
            else
              t5 = false;
            if (t5)
              floatStartX = startX + (_this._material3 ? -A._RenderDecoration__boxSize(t1.$index(0, D._DecorationSlot_6))._dx + _this._input_decorator$_decoration.contentPadding.start : 0);
            else
              floatStartX = startX;
            break;
          default:
            startX = null;
            floatStartX = null;
        }
        t3 = B.lerpDouble(floatStartX, t4._dx + t3._dx / 2 - labelWidth * 0.75 / 2, 0);
        t3.toString;
        t3 = B.lerpDouble(startX, t3, t);
        t3.toString;
        t4 = labelOffset._dy;
        t5 = B.lerpDouble(0, floatingY - t4, t);
        t5.toString;
        t6 = new B.Matrix40(new Float64Array(16));
        t6.setIdentity$0();
        t6.translate$2(t3, t4 + t5);
        t6.scale$1(t2);
        _this._labelTransform = t6;
        t2 = _this.__RenderObject__needsCompositing_A;
        t2 === $ && B.throwUnnamedLateFieldNI();
        t5 = _this._layerHandle;
        t5.set$layer(context.pushTransform$5$oldLayer(t2, offset, t6, _this.get$_paintLabel(), type$.nullable_TransformLayer._as(t5._layer)));
      } else
        _this._layerHandle.set$layer(null);
      doPaint.call$1(t1.$index(0, D._DecorationSlot_0));
      doPaint.call$1(t1.$index(0, D._DecorationSlot_4));
      doPaint.call$1(t1.$index(0, D._DecorationSlot_5));
      doPaint.call$1(t1.$index(0, D._DecorationSlot_6));
      doPaint.call$1(t1.$index(0, D._DecorationSlot_7));
      doPaint.call$1(t1.$index(0, D._DecorationSlot_3));
      doPaint.call$1(t1.$index(0, D._DecorationSlot_1));
      t2 = t1.$index(0, D._DecorationSlot_8);
      t2.toString;
      doPaint.call$1(t2);
      doPaint.call$1(t1.$index(0, D._DecorationSlot_9));
    },
    applyPaintTransform$2(child, transform) {
      var labelOffset, _this = this,
        t1 = _this.SlottedContainerRenderObjectMixin__slotToChild;
      if (child === t1.$index(0, D._DecorationSlot_2) && _this._labelTransform != null) {
        t1 = t1.$index(0, D._DecorationSlot_2).parentData;
        t1.toString;
        labelOffset = type$.BoxParentData._as(t1).offset;
        t1 = _this._labelTransform;
        t1.toString;
        transform.multiply$1(t1);
        transform.translate$2(-labelOffset._dx, -labelOffset._dy);
      }
      _this.super$RenderBox$applyPaintTransform(child, transform);
    },
    hitTestSelf$1(position) {
      return true;
    },
    hitTestChildren$2$position(result, position) {
      var t1, t2, t3, _i, child, t4;
      for (t1 = this.get$children(), t2 = t1.length, t3 = type$.BoxParentData, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        t4 = child.parentData;
        t4.toString;
        if (result.addWithPaintOffset$3$hitTest$offset$position(new A._RenderDecoration_hitTestChildren_closure(child), t3._as(t4).offset, position))
          return true;
      }
      return false;
    },
    _childSemanticsConfigurationDelegate$1(childConfigs) {
      var t3, suffixMergeGroup, prefixMergeGroup, _i, childConfig, t4, _null = null,
        t1 = type$.JSArray_SemanticsConfiguration,
        t2 = B._setArrayType([], t1),
        builder = new B.ChildSemanticsConfigurationsResultBuilder(t2, B._setArrayType([], type$.JSArray_List_SemanticsConfiguration));
      for (t3 = childConfigs.length, suffixMergeGroup = _null, prefixMergeGroup = suffixMergeGroup, _i = 0; _i < childConfigs.length; childConfigs.length === t3 || (0, B.throwConcurrentModificationError)(childConfigs), ++_i) {
        childConfig = childConfigs[_i];
        t4 = childConfig._tagsForChildren;
        t4 = t4 == null ? _null : t4.contains$1(0, D.SemanticsTag_sot);
        if (t4 === true) {
          if (prefixMergeGroup == null)
            prefixMergeGroup = B._setArrayType([], t1);
          prefixMergeGroup.push(childConfig);
        } else {
          t4 = childConfig._tagsForChildren;
          t4 = t4 == null ? _null : t4.contains$1(0, D.SemanticsTag_mk5);
          if (t4 === true) {
            if (suffixMergeGroup == null)
              suffixMergeGroup = B._setArrayType([], t1);
            suffixMergeGroup.push(childConfig);
          } else
            t2.push(childConfig);
        }
      }
      if (prefixMergeGroup != null)
        builder._siblingMergeGroups.push(prefixMergeGroup);
      if (suffixMergeGroup != null)
        builder._siblingMergeGroups.push(suffixMergeGroup);
      return new B.ChildSemanticsConfigurationsResult(t2, builder._siblingMergeGroups);
    },
    describeSemanticsConfiguration$1(config) {
      config._childConfigurationsDelegate = this.get$_childSemanticsConfigurationDelegate();
    }
  };
  A._Decorator.prototype = {
    childForSlot$1(slot) {
      var t1, _this = this;
      switch (slot.index) {
        case 0:
          t1 = _this.decoration.icon;
          break;
        case 1:
          t1 = _this.decoration.input;
          break;
        case 2:
          t1 = _this.decoration.label;
          break;
        case 3:
          t1 = _this.decoration.hint;
          break;
        case 4:
          t1 = _this.decoration.prefix;
          break;
        case 5:
          t1 = _this.decoration.suffix;
          break;
        case 6:
          t1 = _this.decoration.prefixIcon;
          break;
        case 7:
          t1 = _this.decoration.suffixIcon;
          break;
        case 8:
          t1 = _this.decoration.helperError;
          break;
        case 9:
          t1 = _this.decoration.counter;
          break;
        case 10:
          t1 = _this.decoration.container;
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    createRenderObject$1(context) {
      var t1, _this = this;
      B.Theme_of(context);
      t1 = new A._RenderDecoration(_this.decoration, _this.textDirection, _this.textBaseline, _this.textAlignVertical, _this.isFocused, false, true, B.LinkedHashMap_LinkedHashMap$_empty(type$._DecorationSlot, type$.RenderBox), new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var _this = this;
      renderObject.set$decoration(_this.decoration);
      renderObject.set$expands(false);
      renderObject.set$isFocused(_this.isFocused);
      renderObject.set$textAlignVertical(_this.textAlignVertical);
      renderObject.set$textBaseline(_this.textBaseline);
      renderObject.set$textDirection(_this.textDirection);
    }
  };
  A.InputDecorator.prototype = {
    get$_labelShouldWithdraw() {
      if (this.isEmpty)
        var t1 = this.isFocused || this.decoration.floatingLabelBehavior === D.FloatingLabelBehavior_2;
      else
        t1 = true;
      return t1;
    },
    createState$0() {
      return new A._InputDecoratorState(new A._InputBorderGap($.$get$ChangeNotifier__emptyListeners()), null, null);
    }
  };
  A._InputDecoratorState.prototype = {
    initState$0() {
      var t1, t2, _this = this, _null = null;
      _this.super$State$initState();
      t1 = _this._widget;
      t2 = B.AnimationController$(_null, C.Duration_167000, _null, t1.decoration.floatingLabelBehavior !== D.FloatingLabelBehavior_0 && t1.get$_labelShouldWithdraw() ? 1 : 0, _this);
      _this.___InputDecoratorState__floatingLabelController_F !== $ && B.throwUnnamedLateFieldAI();
      _this.___InputDecoratorState__floatingLabelController_F = t2;
      t2.didRegisterListener$0();
      t2.AnimationLocalListenersMixin__listeners.add$1(0, _this.get$_input_decorator$_handleChange());
      t2 = B.CurvedAnimation$(C.Cubic_Dkk, t2, new B.FlippedCurve(C.Cubic_Dkk));
      _this.___InputDecoratorState__floatingLabelAnimation_F !== $ && B.throwUnnamedLateFieldAI();
      _this.___InputDecoratorState__floatingLabelAnimation_F = t2;
      t2 = B.AnimationController$(_null, C.Duration_167000, _null, _null, _this);
      _this.___InputDecoratorState__shakingLabelController_F !== $ && B.throwUnnamedLateFieldAI();
      _this.___InputDecoratorState__shakingLabelController_F = t2;
    },
    didChangeDependencies$0() {
      this.super$State$didChangeDependencies();
      this._effectiveDecoration = null;
    },
    dispose$0() {
      var _this = this,
        t1 = _this.___InputDecoratorState__floatingLabelController_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.___InputDecoratorState__floatingLabelAnimation_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.___InputDecoratorState__shakingLabelController_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this._borderGap;
      t1.ChangeNotifier__listeners = $.$get$ChangeNotifier__emptyListeners();
      t1.ChangeNotifier__count = 0;
      t1 = _this._input_decorator$_curvedAnimation;
      if (t1 != null)
        t1.dispose$0();
      _this.super$__InputDecoratorState_State_TickerProviderStateMixin$dispose();
    },
    _input_decorator$_handleChange$0() {
      this.setState$1(new A._InputDecoratorState__handleChange_closure());
    },
    get$decoration() {
      var t2, _this = this,
        t1 = _this._effectiveDecoration;
      if (t1 == null) {
        t1 = _this._widget.decoration;
        t2 = _this._framework$_element;
        t2.toString;
        t2 = _this._effectiveDecoration = t1.applyDefaults$1(B.Theme_of(t2).inputDecorationTheme);
        t1 = t2;
      }
      return t1;
    },
    get$_input_decorator$_hasError() {
      var t1 = this.get$decoration().errorText == null;
      if (t1)
        this.get$decoration();
      return !t1;
    },
    didUpdateWidget$1(old) {
      var t1, t2, floatBehaviorChanged, t3, errorText, _this = this;
      _this.super$State$didUpdateWidget(old);
      t1 = old.decoration;
      if (!_this._widget.decoration.$eq(0, t1))
        _this._effectiveDecoration = null;
      t2 = _this._widget;
      floatBehaviorChanged = t2.decoration.floatingLabelBehavior != t1.floatingLabelBehavior;
      if (t2.get$_labelShouldWithdraw() !== old.get$_labelShouldWithdraw() || floatBehaviorChanged) {
        t2 = _this.get$decoration().floatingLabelBehavior !== D.FloatingLabelBehavior_0 && _this._widget.get$_labelShouldWithdraw();
        t3 = _this.___InputDecoratorState__floatingLabelController_F;
        if (t2) {
          t3 === $ && B.throwUnnamedLateFieldNI();
          t3.forward$0();
        } else {
          t3 === $ && B.throwUnnamedLateFieldNI();
          t3.reverse$0();
        }
      }
      errorText = _this.get$decoration().errorText;
      t2 = _this.___InputDecoratorState__floatingLabelController_F;
      t2 === $ && B.throwUnnamedLateFieldNI();
      if (t2.get$status() === C.AnimationStatus_3 && errorText != null && errorText !== t1.errorText) {
        t1 = _this.___InputDecoratorState__shakingLabelController_F;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t1.set$value(0);
        t1.forward$0();
      }
    },
    _getFillColor$2(themeData, defaults) {
      var t1, _this = this;
      if (_this.get$decoration().filled !== true)
        return C.Color_Edl;
      if (_this.get$decoration().fillColor != null) {
        t1 = _this.get$decoration().fillColor;
        t1.toString;
        return B.WidgetStateProperty_resolveAs(t1, _this.get$materialState(), type$.Color);
      }
      return B.WidgetStateProperty_resolveAs(defaults.get$fillColor(), _this.get$materialState(), type$.Color);
    },
    _getHoverColor$1(themeData) {
      var t1, _this = this;
      if (_this.get$decoration().filled != null) {
        t1 = _this.get$decoration().filled;
        t1.toString;
        if (t1)
          _this.get$decoration();
        t1 = !t1;
      } else
        t1 = true;
      if (t1)
        return C.Color_Edl;
      _this.get$decoration();
      return themeData.hoverColor;
    },
    _getPrefixIconColor$3(inputDecorationTheme, iconButtonTheme, defaults) {
      var _this = this,
        t1 = type$.nullable_Color,
        t2 = B.WidgetStateProperty_resolveAs(_this.get$decoration().prefixIconColor, _this.get$materialState(), t1);
      t1 = t2 == null ? B.WidgetStateProperty_resolveAs(null, _this.get$materialState(), t1) : t2;
      if (t1 == null) {
        t1 = iconButtonTheme.style;
        if (t1 == null)
          t1 = null;
        else {
          t1 = t1.get$foregroundColor();
          t1 = t1 == null ? null : t1.resolve$1(_this.get$materialState());
        }
      }
      return t1 == null ? B.WidgetStateProperty_resolveAs(defaults.get$prefixIconColor(), _this.get$materialState(), type$.Color) : t1;
    },
    _getSuffixIconColor$3(inputDecorationTheme, iconButtonTheme, defaults) {
      var _this = this,
        t1 = type$.nullable_Color,
        t2 = B.WidgetStateProperty_resolveAs(_this.get$decoration().suffixIconColor, _this.get$materialState(), t1);
      t1 = t2 == null ? B.WidgetStateProperty_resolveAs(null, _this.get$materialState(), t1) : t2;
      if (t1 == null) {
        t1 = iconButtonTheme.style;
        if (t1 == null)
          t1 = null;
        else {
          t1 = t1.get$foregroundColor();
          t1 = t1 == null ? null : t1.resolve$1(_this.get$materialState());
        }
      }
      return t1 == null ? B.WidgetStateProperty_resolveAs(defaults.get$suffixIconColor(), _this.get$materialState(), type$.Color) : t1;
    },
    get$_hasInlineLabel() {
      if (!this._widget.get$_labelShouldWithdraw()) {
        var t1 = this.get$decoration().labelText == null;
        if (t1)
          this.get$decoration();
        t1 = !t1;
      } else
        t1 = false;
      return t1;
    },
    _getHelperStyle$2(themeData, defaults) {
      return B.WidgetStateProperty_resolveAs(defaults.get$helperStyle(), this.get$materialState(), type$.TextStyle).merge$1(B.WidgetStateProperty_resolveAs(this.get$decoration().helperStyle, this.get$materialState(), type$.nullable_TextStyle));
    },
    get$materialState() {
      var t2, _this = this,
        t1 = B.LinkedHashSet_LinkedHashSet$_empty(type$.WidgetState);
      _this.get$decoration();
      if (_this._widget.isFocused)
        t1.add$1(0, C.WidgetState_1);
      t2 = _this._widget.isHovering;
      if (t2)
        _this.get$decoration();
      if (t2)
        t1.add$1(0, C.WidgetState_0);
      if (_this.get$_input_decorator$_hasError())
        t1.add$1(0, D.WidgetState_7);
      return t1;
    },
    _getDefaultBorder$2(themeData, defaults) {
      var t1, t2, _this = this,
        border = B.WidgetStateProperty_resolveAs(_this.get$decoration().border, _this.get$materialState(), type$.nullable_InputBorder);
      if (border == null)
        border = D.UnderlineInputBorder_x70;
      _this.get$decoration();
      if (border.borderSide.$eq(0, C.BorderSide_Ah5))
        return border;
      t1 = _this.get$decoration().filled;
      t1.toString;
      t2 = type$.nullable_BorderSide;
      if (t1)
        return border.copyWith$1$borderSide(B.WidgetStateProperty_resolveAs(defaults.get$activeIndicatorBorder(), _this.get$materialState(), t2));
      else
        return border.copyWith$1$borderSide(B.WidgetStateProperty_resolveAs(defaults.get$outlineBorder(), _this.get$materialState(), t2));
    },
    build$1(context) {
      var defaults, inputDecorationTheme, iconButtonTheme, t1, defaultStyle, t2, style, t3, t4, labelStyle, t5, hintStyle, hintText, showHint, t6, t7, hintTextWidget, hint, border, t8, t9, t10, t11, defaultTextStyle, t12, label, input, decorationIsDense, iconSize, prefixIcon, suffixIcon, t13, t14, t15, t16, counter, t17, t18, textDirection, resolvedPadding, decorationContentPadding, floatingLabelHeight, contentPadding, t19, t20, t21, t22, _this = this, _null = null,
        themeData = B.Theme_of(context);
      B.Theme_of(context);
      defaults = new A._InputDecoratorDefaultsM3(context);
      inputDecorationTheme = themeData.inputDecorationTheme;
      iconButtonTheme = B.IconButtonTheme_of(context);
      t1 = type$.TextStyle;
      defaultStyle = B.WidgetStateProperty_resolveAs(defaults.get$labelStyle(), _this.get$materialState(), t1);
      t2 = type$.nullable_TextStyle;
      style = B.WidgetStateProperty_resolveAs(_this.get$decoration().labelStyle, _this.get$materialState(), t2);
      if (style == null)
        style = B.WidgetStateProperty_resolveAs(_null, _this.get$materialState(), t2);
      t3 = themeData.textTheme;
      t4 = t3.titleMedium;
      t4.toString;
      labelStyle = t4.merge$1(_this._widget.baseStyle).merge$1(defaultStyle).merge$1(style).copyWith$1$height(1);
      t5 = labelStyle.textBaseline;
      t5.toString;
      defaultStyle = B.WidgetStateProperty_resolveAs(defaults.get$hintStyle(), _this.get$materialState(), t1);
      style = B.WidgetStateProperty_resolveAs(_this.get$decoration().hintStyle, _this.get$materialState(), t2);
      if (style == null)
        style = B.WidgetStateProperty_resolveAs(_null, _this.get$materialState(), t2);
      t3 = t3.bodyLarge;
      t3.toString;
      hintStyle = t3.merge$1(_this._widget.baseStyle).merge$1(defaultStyle).merge$1(style);
      hintText = _this.get$decoration().hintText;
      _this.get$decoration();
      if (hintText != null) {
        showHint = _this._widget.isEmpty && !_this.get$_hasInlineLabel();
        t3 = _this.get$decoration();
        t6 = hintStyle.overflow;
        t6 = _this.get$decoration().hintMaxLines == null ? _null : C.TextOverflow_2;
        t7 = _this._widget.textAlign;
        hintTextWidget = B.Text$(hintText, _this.get$decoration().hintMaxLines, t6, _null, hintStyle, t7, t3.hintTextDirection);
        t3 = showHint ? 1 : 0;
        _this.get$decoration();
        hint = B.AnimatedOpacity$(hintTextWidget, C.Cubic_Dkk, C.Duration_20000, t3);
      } else
        hint = _null;
      _this.get$decoration();
      if (_this._widget.isFocused)
        border = _this.get$_input_decorator$_hasError() ? _this.get$decoration().focusedErrorBorder : _this.get$decoration().focusedBorder;
      else
        border = _this.get$_input_decorator$_hasError() ? _this.get$decoration().errorBorder : _this.get$decoration().enabledBorder;
      if (border == null)
        border = _this._getDefaultBorder$2(themeData, defaults);
      t3 = _this._borderGap;
      t6 = _this.___InputDecoratorState__floatingLabelAnimation_F;
      t6 === $ && B.throwUnnamedLateFieldNI();
      t7 = _this._getFillColor$2(themeData, defaults);
      t8 = _this._getHoverColor$1(themeData);
      t9 = _this._widget.isHovering;
      if (t9)
        _this.get$decoration();
      t10 = _this.get$decoration().labelText;
      if ((t10 == null ? _this.get$decoration().label : t10) != null) {
        t10 = _this.___InputDecoratorState__shakingLabelController_F;
        t10 === $ && B.throwUnnamedLateFieldNI();
        t11 = _this.get$_hasInlineLabel() || _this.get$decoration().floatingLabelBehavior !== D.FloatingLabelBehavior_0 ? 1 : 0;
        if (_this._widget.get$_labelShouldWithdraw()) {
          defaultTextStyle = B.WidgetStateProperty_resolveAs(defaults.get$floatingLabelStyle(), _this.get$materialState(), t1);
          if (_this.get$_input_decorator$_hasError())
            _this.get$decoration();
          _this.get$decoration();
          t12 = _this.get$decoration();
          defaultTextStyle = defaultTextStyle.merge$1(t12.labelStyle);
          style = B.WidgetStateProperty_resolveAs(_this.get$decoration().floatingLabelStyle, _this.get$materialState(), t2);
          if (style == null)
            style = B.WidgetStateProperty_resolveAs(_null, _this.get$materialState(), t2);
          t4 = t4.merge$1(_this._widget.baseStyle).merge$1(defaultTextStyle).merge$1(style).copyWith$1$height(1);
        } else
          t4 = labelStyle;
        _this.get$decoration();
        t12 = _this.get$decoration().labelText;
        t12.toString;
        t12 = B.Text$(t12, _null, C.TextOverflow_2, _null, _null, _this._widget.textAlign, _null);
        label = new B.MatrixTransition(new A._InputDecoratorState_build_closure(), C.Alignment_0_0, _null, B.AnimatedOpacity$(B.AnimatedDefaultTextStyle$(t12, C.Cubic_Dkk, C.Duration_167000, t4), C.Cubic_Dkk, C.Duration_167000, t11), t10, _null);
      } else
        label = _null;
      _this.get$decoration();
      _this.get$decoration();
      _this.get$decoration();
      _this.get$decoration();
      t4 = _this._widget;
      input = t4.child;
      t4.get$_labelShouldWithdraw();
      t4 = _this.get$decoration();
      decorationIsDense = t4.isDense === true;
      iconSize = decorationIsDense ? 18 : 24;
      _this.get$decoration();
      if (_this.get$decoration().prefixIcon == null)
        prefixIcon = _null;
      else {
        _this.get$decoration();
        t4 = themeData.visualDensity.effectiveConstraints$1(C.BoxConstraints_0pa);
        t10 = _this._getPrefixIconColor$3(inputDecorationTheme, iconButtonTheme, defaults);
        t11 = B.ButtonStyle$(_null, _null, _null, _null, _null, _null, _null, _null, new B.WidgetStatePropertyAll(_this._getPrefixIconColor$3(inputDecorationTheme, iconButtonTheme, defaults), type$.WidgetStatePropertyAll_Color), _null, _null, new B.WidgetStatePropertyAll(iconSize, type$.WidgetStatePropertyAll_double), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null).merge$1(iconButtonTheme.style);
        prefixIcon = B.Center$(B.MouseRegion$(new B.ConstrainedBox(t4, B.IconTheme_merge(B.IconButtonTheme$(B.Semantics$(_null, _this.get$decoration().prefixIcon, false, _null, _null, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), new B.IconButtonThemeData(t11)), new B.IconThemeData(iconSize, _null, _null, _null, _null, t10, _null, _null, _null)), _null), C.SystemMouseCursor_basic, _null, _null, _null, _null), 1, 1);
      }
      if (_this.get$decoration().suffixIcon == null)
        suffixIcon = _null;
      else {
        _this.get$decoration();
        t4 = themeData.visualDensity.effectiveConstraints$1(C.BoxConstraints_0pa);
        t10 = _this._getSuffixIconColor$3(inputDecorationTheme, iconButtonTheme, defaults);
        t11 = B.ButtonStyle$(_null, _null, _null, _null, _null, _null, _null, _null, new B.WidgetStatePropertyAll(_this._getSuffixIconColor$3(inputDecorationTheme, iconButtonTheme, defaults), type$.WidgetStatePropertyAll_Color), _null, _null, new B.WidgetStatePropertyAll(iconSize, type$.WidgetStatePropertyAll_double), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null).merge$1(iconButtonTheme.style);
        suffixIcon = B.Center$(B.MouseRegion$(new B.ConstrainedBox(t4, B.IconTheme_merge(B.IconButtonTheme$(B.Semantics$(_null, _this.get$decoration().suffixIcon, false, _null, _null, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), new B.IconButtonThemeData(t11)), new B.IconThemeData(iconSize, _null, _null, _null, _null, t10, _null, _null, _null)), _null), C.SystemMouseCursor_basic, _null, _null, _null, _null), 1, 1);
      }
      t4 = _this._widget.textAlign;
      t10 = _this.get$decoration();
      t11 = _this.get$decoration();
      t12 = _this._getHelperStyle$2(themeData, defaults);
      t13 = _this.get$decoration();
      t14 = _this.get$decoration();
      t15 = _this.get$decoration();
      t1 = B.WidgetStateProperty_resolveAs(defaults.get$errorStyle(), _this.get$materialState(), t1).merge$1(_this.get$decoration().errorStyle);
      t16 = _this.get$decoration();
      if (_this.get$decoration().counter != null)
        counter = _this.get$decoration().counter;
      else if (_this.get$decoration().counterText != null && _this.get$decoration().counterText !== "") {
        t17 = _this._widget.isFocused;
        t18 = _this.get$decoration().counterText;
        t18.toString;
        t2 = _this._getHelperStyle$2(themeData, defaults).merge$1(B.WidgetStateProperty_resolveAs(_this.get$decoration().counterStyle, _this.get$materialState(), t2));
        counter = B.Semantics$(_null, B.Text$(t18, _null, C.TextOverflow_2, _this.get$decoration().semanticCounterText, t2, _null, _null), true, _null, _null, false, _null, _null, _null, _null, t17, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      } else
        counter = _null;
      textDirection = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection;
      switch (textDirection.index) {
        case 1:
          t2 = false;
          break;
        case 0:
          t2 = true;
          break;
        default:
          t2 = _null;
      }
      resolvedPadding = _this.get$decoration().contentPadding;
      if (resolvedPadding == null)
        resolvedPadding = _null;
      if (resolvedPadding == null)
        decorationContentPadding = _null;
      else {
        t17 = t2 ? resolvedPadding.right : resolvedPadding.left;
        t18 = resolvedPadding.top;
        t2 = t2 ? resolvedPadding.left : resolvedPadding.right;
        decorationContentPadding = new B.EdgeInsetsDirectional(t17, t18, t2, resolvedPadding.bottom);
      }
      t2 = _this.get$decoration();
      floatingLabelHeight = 0;
      if (t2.isCollapsed === true)
        contentPadding = decorationContentPadding == null ? D.EdgeInsetsDirectional_0_0_0_0 : decorationContentPadding;
      else if (!border.get$isOutline()) {
        t2 = B.MediaQuery__maybeOf(context, C._MediaQueryAspect_4);
        t2 = t2 == null ? _null : t2.get$textScaler();
        if (t2 == null)
          t2 = C._LinearTextScaler_1;
        t17 = labelStyle.fontSize;
        t17.toString;
        floatingLabelHeight = (4 + 0.75 * t17) * t2.textScaleFactor;
        t2 = _this.get$decoration();
        if (t2.filled === true)
          if (decorationContentPadding == null) {
            B.Theme_of(context);
            t2 = decorationIsDense ? D.EdgeInsetsDirectional_12_4_12_4 : D.EdgeInsetsDirectional_12_8_12_8;
            contentPadding = t2;
          } else
            contentPadding = decorationContentPadding;
        else if (decorationContentPadding == null) {
          B.Theme_of(context);
          t2 = decorationIsDense ? D.EdgeInsetsDirectional_0_4_0_4 : D.EdgeInsetsDirectional_0_8_0_8;
          contentPadding = t2;
        } else
          contentPadding = decorationContentPadding;
      } else if (decorationContentPadding == null) {
        B.Theme_of(context);
        t2 = decorationIsDense ? D.EdgeInsetsDirectional_12_16_12_8 : D.EdgeInsetsDirectional_12_20_12_12;
        contentPadding = t2;
      } else
        contentPadding = decorationContentPadding;
      t2 = _this.get$decoration();
      t17 = _this.get$decoration().floatingLabelAlignment;
      t17.toString;
      t18 = t6.get$value();
      t19 = _this.get$decoration();
      t20 = _this.get$decoration();
      t21 = _this._widget;
      t22 = t21.textAlignVertical;
      t21 = t21.isFocused;
      _this.get$decoration();
      return new A._Decorator(new A._Decoration(contentPadding, t2.isCollapsed === true, floatingLabelHeight, t18, t17, border, t3, t19.alignLabelWithHint === true, t20.isDense, themeData.visualDensity, _null, input, label, hint, _null, _null, prefixIcon, suffixIcon, new A._HelperError(t4, t10.helper, t11.helperText, t12, t13.helperMaxLines, t14.error, t15.errorText, t1, t16.errorMaxLines, _null), counter, new A._BorderContainer(border, t3, t6, t7, t8, t9, _null)), textDirection, t5, t22, t21, false, _null);
    }
  };
  A.InputDecoration.prototype = {
    copyWith$39$alignLabelWithHint$border$constraints$contentPadding$counter$counterStyle$counterText$disabledBorder$enabled$enabledBorder$errorBorder$errorMaxLines$errorStyle$errorText$fillColor$filled$floatingLabelAlignment$floatingLabelBehavior$floatingLabelStyle$focusColor$focusedBorder$focusedErrorBorder$helperMaxLines$helperStyle$hintFadeDuration$hintMaxLines$hintStyle$hoverColor$iconColor$isCollapsed$isDense$labelStyle$prefixIconColor$prefixIconConstraints$prefixStyle$semanticCounterText$suffixIconColor$suffixIconConstraints$suffixStyle(alignLabelWithHint, border, constraints, contentPadding, counter, counterStyle, counterText, disabledBorder, enabled, enabledBorder, errorBorder, errorMaxLines, errorStyle, errorText, fillColor, filled, floatingLabelAlignment, floatingLabelBehavior, floatingLabelStyle, focusColor, focusedBorder, focusedErrorBorder, helperMaxLines, helperStyle, hintFadeDuration, hintMaxLines, hintStyle, hoverColor, iconColor, isCollapsed, isDense, labelStyle, prefixIconColor, prefixIconConstraints, prefixStyle, semanticCounterText, suffixIconColor, suffixIconConstraints, suffixStyle) {
      var _this = this,
        t1 = hintStyle == null ? _this.hintStyle : hintStyle,
        t2 = hintMaxLines == null ? _this.hintMaxLines : hintMaxLines,
        t3 = errorText == null ? _this.errorText : errorText,
        t4 = floatingLabelBehavior == null ? _this.floatingLabelBehavior : floatingLabelBehavior,
        t5 = floatingLabelAlignment == null ? _this.floatingLabelAlignment : floatingLabelAlignment,
        t6 = isCollapsed == null ? _this.isCollapsed : isCollapsed,
        t7 = isDense == null ? _this.isDense : isDense,
        t8 = contentPadding == null ? _this.contentPadding : contentPadding,
        t9 = counter == null ? _this.counter : counter,
        t10 = counterText == null ? _this.counterText : counterText,
        t11 = counterStyle == null ? _this.counterStyle : counterStyle,
        t12 = filled == null ? _this.filled : filled,
        t13 = fillColor == null ? _this.fillColor : fillColor,
        t14 = focusedBorder == null ? _this.focusedBorder : focusedBorder,
        t15 = enabledBorder == null ? _this.enabledBorder : enabledBorder,
        t16 = border == null ? _this.border : border,
        t17 = semanticCounterText == null ? _this.semanticCounterText : semanticCounterText,
        t18 = alignLabelWithHint == null ? _this.alignLabelWithHint : alignLabelWithHint;
      return A.InputDecoration$(t18, t16, _this.constraints, t8, t9, t11, t10, _this.disabledBorder, enabled !== false, t15, _this.error, _this.errorBorder, _this.errorMaxLines, _this.errorStyle, t3, t13, t12, t5, t4, _this.floatingLabelStyle, _this.focusColor, t14, _this.focusedErrorBorder, _this.helper, _this.helperMaxLines, _this.helperStyle, _this.helperText, _this.hintFadeDuration, t2, t1, _this.hintText, _this.hintTextDirection, _this.hoverColor, _this.icon, _this.iconColor, t6, t7, _this.label, _this.labelStyle, _this.labelText, true, _this.prefix, _this.prefixIcon, _this.prefixIconColor, _this.prefixIconConstraints, _this.prefixStyle, _this.prefixText, t17, _this.suffix, _this.suffixIcon, _this.suffixIconColor, _this.suffixIconConstraints, _this.suffixStyle, _this.suffixText);
    },
    copyWith$33$alignLabelWithHint$border$constraints$contentPadding$counterStyle$disabledBorder$enabledBorder$errorBorder$errorMaxLines$errorStyle$fillColor$filled$floatingLabelAlignment$floatingLabelBehavior$floatingLabelStyle$focusColor$focusedBorder$focusedErrorBorder$helperMaxLines$helperStyle$hintFadeDuration$hintStyle$hoverColor$iconColor$isCollapsed$isDense$labelStyle$prefixIconColor$prefixIconConstraints$prefixStyle$suffixIconColor$suffixIconConstraints$suffixStyle(alignLabelWithHint, border, constraints, contentPadding, counterStyle, disabledBorder, enabledBorder, errorBorder, errorMaxLines, errorStyle, fillColor, filled, floatingLabelAlignment, floatingLabelBehavior, floatingLabelStyle, focusColor, focusedBorder, focusedErrorBorder, helperMaxLines, helperStyle, hintFadeDuration, hintStyle, hoverColor, iconColor, isCollapsed, isDense, labelStyle, prefixIconColor, prefixIconConstraints, prefixStyle, suffixIconColor, suffixIconConstraints, suffixStyle) {
      var _null = null;
      return this.copyWith$39$alignLabelWithHint$border$constraints$contentPadding$counter$counterStyle$counterText$disabledBorder$enabled$enabledBorder$errorBorder$errorMaxLines$errorStyle$errorText$fillColor$filled$floatingLabelAlignment$floatingLabelBehavior$floatingLabelStyle$focusColor$focusedBorder$focusedErrorBorder$helperMaxLines$helperStyle$hintFadeDuration$hintMaxLines$hintStyle$hoverColor$iconColor$isCollapsed$isDense$labelStyle$prefixIconColor$prefixIconConstraints$prefixStyle$semanticCounterText$suffixIconColor$suffixIconConstraints$suffixStyle(alignLabelWithHint, border, constraints, contentPadding, _null, counterStyle, _null, disabledBorder, _null, enabledBorder, errorBorder, errorMaxLines, errorStyle, _null, fillColor, filled, floatingLabelAlignment, floatingLabelBehavior, floatingLabelStyle, focusColor, focusedBorder, focusedErrorBorder, helperMaxLines, helperStyle, hintFadeDuration, _null, hintStyle, hoverColor, iconColor, isCollapsed, isDense, labelStyle, prefixIconColor, prefixIconConstraints, prefixStyle, _null, suffixIconColor, suffixIconConstraints, suffixStyle);
    },
    copyWith$2$enabled$hintMaxLines(enabled, hintMaxLines) {
      var _null = null;
      return this.copyWith$39$alignLabelWithHint$border$constraints$contentPadding$counter$counterStyle$counterText$disabledBorder$enabled$enabledBorder$errorBorder$errorMaxLines$errorStyle$errorText$fillColor$filled$floatingLabelAlignment$floatingLabelBehavior$floatingLabelStyle$focusColor$focusedBorder$focusedErrorBorder$helperMaxLines$helperStyle$hintFadeDuration$hintMaxLines$hintStyle$hoverColor$iconColor$isCollapsed$isDense$labelStyle$prefixIconColor$prefixIconConstraints$prefixStyle$semanticCounterText$suffixIconColor$suffixIconConstraints$suffixStyle(_null, _null, _null, _null, _null, _null, _null, _null, enabled, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, hintMaxLines, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    copyWith$1$errorText(errorText) {
      var _null = null;
      return this.copyWith$39$alignLabelWithHint$border$constraints$contentPadding$counter$counterStyle$counterText$disabledBorder$enabled$enabledBorder$errorBorder$errorMaxLines$errorStyle$errorText$fillColor$filled$floatingLabelAlignment$floatingLabelBehavior$floatingLabelStyle$focusColor$focusedBorder$focusedErrorBorder$helperMaxLines$helperStyle$hintFadeDuration$hintMaxLines$hintStyle$hoverColor$iconColor$isCollapsed$isDense$labelStyle$prefixIconColor$prefixIconConstraints$prefixStyle$semanticCounterText$suffixIconColor$suffixIconConstraints$suffixStyle(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, errorText, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    applyDefaults$1(theme) {
      var t2, t3, t4, t5, t6, t7, t8, t9, _this = this, _null = null,
        t1 = _this.hintStyle;
      if (t1 == null)
        t1 = _null;
      t2 = _this.floatingLabelBehavior;
      if (t2 == null)
        t2 = C.FloatingLabelBehavior_1;
      t3 = _this.floatingLabelAlignment;
      if (t3 == null)
        t3 = C.C_FloatingLabelAlignment;
      t4 = _this.contentPadding;
      if (t4 == null)
        t4 = _null;
      t5 = _this.counterStyle;
      if (t5 == null)
        t5 = _null;
      t6 = _this.fillColor;
      if (t6 == null)
        t6 = _null;
      t7 = _this.focusedBorder;
      if (t7 == null)
        t7 = _null;
      t8 = _this.enabledBorder;
      if (t8 == null)
        t8 = _null;
      t9 = _this.border;
      if (t9 == null)
        t9 = _null;
      return _this.copyWith$33$alignLabelWithHint$border$constraints$contentPadding$counterStyle$disabledBorder$enabledBorder$errorBorder$errorMaxLines$errorStyle$fillColor$filled$floatingLabelAlignment$floatingLabelBehavior$floatingLabelStyle$focusColor$focusedBorder$focusedErrorBorder$helperMaxLines$helperStyle$hintFadeDuration$hintStyle$hoverColor$iconColor$isCollapsed$isDense$labelStyle$prefixIconColor$prefixIconConstraints$prefixStyle$suffixIconColor$suffixIconConstraints$suffixStyle(_this.alignLabelWithHint === true, t9, _null, t4, t5, _null, t8, _null, _null, _null, t6, _this.filled === true, t3, t2, _null, _null, t7, _null, _null, _null, _null, t1, _null, _null, _this.isCollapsed === true, _this.isDense === true, _null, _null, _null, _null, _null, _null, _null);
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeTypeOfDartObject(_this))
        return false;
      t1 = false;
      if (other instanceof A.InputDecoration)
        if (other.labelText == _this.labelText)
          if (other.hintText == _this.hintText)
            if (J.$eq$(other.hintStyle, _this.hintStyle))
              if (other.hintMaxLines == _this.hintMaxLines)
                if (other.errorText == _this.errorText)
                  if (other.floatingLabelBehavior == _this.floatingLabelBehavior)
                    if (J.$eq$(other.floatingLabelAlignment, _this.floatingLabelAlignment))
                      if (other.isDense == _this.isDense)
                        if (J.$eq$(other.contentPadding, _this.contentPadding))
                          if (other.isCollapsed == _this.isCollapsed)
                            if (J.$eq$(other.prefixIcon, _this.prefixIcon))
                              if (J.$eq$(other.suffixIcon, _this.suffixIcon))
                                if (J.$eq$(other.counter, _this.counter))
                                  if (other.counterText == _this.counterText)
                                    if (J.$eq$(other.counterStyle, _this.counterStyle))
                                      if (other.filled == _this.filled)
                                        if (J.$eq$(other.fillColor, _this.fillColor))
                                          if (J.$eq$(other.focusedBorder, _this.focusedBorder))
                                            if (J.$eq$(other.enabledBorder, _this.enabledBorder))
                                              if (J.$eq$(other.border, _this.border))
                                                if (other.semanticCounterText == _this.semanticCounterText)
                                                  t1 = other.alignLabelWithHint == _this.alignLabelWithHint;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return B.Object_hashAll([_this.icon, _this.iconColor, _this.label, _this.labelText, _this.floatingLabelStyle, _this.labelStyle, _this.helper, _this.helperText, _this.helperStyle, _this.helperMaxLines, _this.hintText, _this.hintStyle, _this.hintTextDirection, _this.hintMaxLines, _this.hintFadeDuration, true, _this.error, _this.errorText, _this.errorStyle, _this.errorMaxLines, _this.floatingLabelBehavior, _this.floatingLabelAlignment, _this.isDense, _this.contentPadding, _this.isCollapsed, _this.filled, _this.fillColor, _this.focusColor, _this.hoverColor, _this.prefixIcon, _this.prefixIconColor, _this.prefix, _this.prefixText, _this.prefixStyle, _this.prefixIconConstraints, _this.suffixIcon, _this.suffixIconColor, _this.suffix, _this.suffixText, _this.suffixStyle, _this.suffixIconConstraints, _this.counter, _this.counterText, _this.counterStyle, _this.errorBorder, _this.focusedBorder, _this.focusedErrorBorder, _this.disabledBorder, _this.enabledBorder, _this.border, true, _this.semanticCounterText, _this.alignLabelWithHint, _this.constraints]);
    },
    toString$0(_) {
      var _this = this,
        t1 = B._setArrayType([], type$.JSArray_String),
        t2 = _this.labelText;
      if (t2 != null)
        t1.push('labelText: "' + t2 + '"');
      t2 = _this.hintText;
      if (t2 != null)
        t1.push('hintText: "' + t2 + '"');
      t2 = _this.hintMaxLines;
      if (t2 != null)
        t1.push('hintMaxLines: "' + B.S(t2) + '"');
      t2 = _this.errorText;
      if (t2 != null)
        t1.push('errorText: "' + t2 + '"');
      t2 = _this.floatingLabelBehavior;
      if (t2 != null)
        t1.push("floatingLabelBehavior: " + t2.toString$0(0));
      t2 = _this.floatingLabelAlignment;
      if (t2 != null)
        t1.push("floatingLabelAlignment: " + t2.toString$0(0));
      t2 = _this.isDense;
      if (t2 === true)
        t1.push("isDense: " + B.S(t2));
      t2 = _this.contentPadding;
      if (t2 != null)
        t1.push("contentPadding: " + t2.toString$0(0));
      t2 = _this.isCollapsed;
      if (t2 === true)
        t1.push("isCollapsed: " + B.S(t2));
      t2 = _this.prefixIcon;
      if (t2 != null)
        t1.push("prefixIcon: " + t2.toString$0(0));
      t2 = _this.suffixIcon;
      if (t2 != null)
        t1.push("suffixIcon: " + t2.toString$0(0));
      t2 = _this.counter;
      if (t2 != null)
        t1.push("counter: " + t2.toString$0(0));
      t2 = _this.counterText;
      if (t2 != null)
        t1.push("counterText: " + t2);
      t2 = _this.counterStyle;
      if (t2 != null)
        t1.push("counterStyle: " + t2.toString$0(0));
      if (_this.filled === true)
        t1.push("filled: true");
      t2 = _this.fillColor;
      if (t2 != null)
        t1.push("fillColor: " + t2.toString$0(0));
      t2 = _this.focusedBorder;
      if (t2 != null)
        t1.push("focusedBorder: " + t2.toString$0(0));
      t2 = _this.enabledBorder;
      if (t2 != null)
        t1.push("enabledBorder: " + t2.toString$0(0));
      t2 = _this.border;
      if (t2 != null)
        t1.push("border: " + t2.toString$0(0));
      t2 = _this.semanticCounterText;
      if (t2 != null)
        t1.push("semanticCounterText: " + t2);
      t2 = _this.alignLabelWithHint;
      if (t2 != null)
        t1.push("alignLabelWithHint: " + B.S(t2));
      return "InputDecoration(" + C.JSArray_methods.join$1(t1, ", ") + ")";
    }
  };
  A._InputDecoratorDefaultsM3.prototype = {
    get$_input_decorator$_colors() {
      var t1, _this = this,
        value = _this.___InputDecoratorDefaultsM3__colors_FI;
      if (value === $) {
        t1 = B.Theme_of(_this.context);
        _this.___InputDecoratorDefaultsM3__colors_FI !== $ && B.throwUnnamedLateFieldADI();
        value = _this.___InputDecoratorDefaultsM3__colors_FI = t1.colorScheme;
      }
      return value;
    },
    get$_input_decorator$_textTheme() {
      var t1, _this = this,
        value = _this.___InputDecoratorDefaultsM3__textTheme_FI;
      if (value === $) {
        t1 = B.Theme_of(_this.context);
        _this.___InputDecoratorDefaultsM3__textTheme_FI !== $ && B.throwUnnamedLateFieldADI();
        value = _this.___InputDecoratorDefaultsM3__textTheme_FI = t1.textTheme;
      }
      return value;
    },
    get$hintStyle() {
      return A._WidgetStateTextStyle$(new A._InputDecoratorDefaultsM3_hintStyle_closure(this));
    },
    get$fillColor() {
      return B._WidgetStateColor$(new A._InputDecoratorDefaultsM3_fillColor_closure(this));
    },
    get$activeIndicatorBorder() {
      return A._WidgetStateBorderSide$(new A._InputDecoratorDefaultsM3_activeIndicatorBorder_closure(this));
    },
    get$outlineBorder() {
      return A._WidgetStateBorderSide$(new A._InputDecoratorDefaultsM3_outlineBorder_closure(this));
    },
    get$iconColor() {
      var t1 = this.get$_input_decorator$_colors(),
        t2 = t1._onSurfaceVariant;
      return t2 == null ? t1.onSurface : t2;
    },
    get$prefixIconColor() {
      return B._WidgetStateColor$(new A._InputDecoratorDefaultsM3_prefixIconColor_closure(this));
    },
    get$suffixIconColor() {
      return B._WidgetStateColor$(new A._InputDecoratorDefaultsM3_suffixIconColor_closure(this));
    },
    get$labelStyle() {
      return A._WidgetStateTextStyle$(new A._InputDecoratorDefaultsM3_labelStyle_closure(this));
    },
    get$floatingLabelStyle() {
      return A._WidgetStateTextStyle$(new A._InputDecoratorDefaultsM3_floatingLabelStyle_closure(this));
    },
    get$helperStyle() {
      return A._WidgetStateTextStyle$(new A._InputDecoratorDefaultsM3_helperStyle_closure(this));
    },
    get$errorStyle() {
      return A._WidgetStateTextStyle$(new A._InputDecoratorDefaultsM3_errorStyle_closure(this));
    }
  };
  A.__BorderContainerState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTickers());
      _this.TickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    }
  };
  A.__HelperErrorState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0() {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTicker());
      _this.SingleTickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  A.__InputDecoratorState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTickers());
      _this.TickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    }
  };
  A.__RenderDecoration_RenderBox_SlottedContainerRenderObjectMixin.prototype = {
    attach$1(owner) {
      var t1, t2, _i;
      this.super$RenderObject$attach(owner);
      for (t1 = this.get$children(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].attach$1(owner);
    },
    detach$0() {
      var t1, t2, _i;
      this.super$RenderObject$detach();
      for (t1 = this.get$children(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].detach$0();
    }
  };
  A.TextMagnifier.prototype = {
    createState$0() {
      return new A._TextMagnifierState(C.Offset_0_0);
    }
  };
  A._TextMagnifierState.prototype = {
    initState$0() {
      this.super$State$initState();
      this._widget.magnifierInfo.addListener$1(this.get$_determineMagnifierPositionAndFocalPoint());
    },
    dispose$0() {
      var t1, _this = this;
      _this._widget.magnifierInfo.removeListener$1(_this.get$_determineMagnifierPositionAndFocalPoint());
      t1 = _this._positionShouldBeAnimatedTimer;
      if (t1 != null)
        t1.cancel$0();
      _this.super$State$dispose();
    },
    didChangeDependencies$0() {
      this._determineMagnifierPositionAndFocalPoint$0();
      this.super$State$didChangeDependencies();
    },
    didUpdateWidget$1(oldWidget) {
      var t2, _this = this,
        t1 = oldWidget.magnifierInfo;
      if (t1 !== _this._widget.magnifierInfo) {
        t2 = _this.get$_determineMagnifierPositionAndFocalPoint();
        t1.removeListener$1(t2);
        _this._widget.magnifierInfo.addListener$1(t2);
      }
      _this.super$State$didUpdateWidget(oldWidget);
    },
    _determineMagnifierPositionAndFocalPoint$0() {
      var t3, t4, screenBoundsAdjustedMagnifierRect, t5, t6, newGlobalFocalPointX, positionShouldBeAnimated, _this = this, t1 = {},
        selectionInfo = _this._widget.magnifierInfo.get$value(),
        t2 = _this._framework$_element;
      t2.toString;
      t2 = B.InheritedModel_inheritFrom(t2, C._MediaQueryAspect_0, type$.MediaQuery).data.size;
      t3 = selectionInfo.globalGesturePosition;
      t4 = selectionInfo.currentLineBoundaries;
      t4 = new B.Offset(B.clampDouble(t3._dx, t4.left, t4.right), selectionInfo.caretRect.get$center()._dy).$sub(0, new B.Offset(38.685, 59.9));
      t3 = t4._dx;
      t4 = t4._dy;
      screenBoundsAdjustedMagnifierRect = A.MagnifierController_shiftWithinBounds(new B.Rect(0, 0, 0 + t2._dx, 0 + t2._dy), new B.Rect(t3, t4, t3 + 77.37, t4 + 37.9));
      t3 = screenBoundsAdjustedMagnifierRect.top;
      t2 = selectionInfo.fieldBounds;
      t5 = t2.right;
      t6 = t2.left;
      newGlobalFocalPointX = t5 - t6 < 61.896 ? t2.get$center()._dx : B.clampDouble(screenBoundsAdjustedMagnifierRect.get$center()._dx, t6 + 30.948, t5 - 30.948);
      t2 = screenBoundsAdjustedMagnifierRect.get$center();
      positionShouldBeAnimated = t1.positionShouldBeAnimated = _this._positionShouldBeAnimatedTimer;
      t5 = _this._magnifierPosition;
      if (t5 != null && t3 !== t5._dy) {
        if (positionShouldBeAnimated != null && positionShouldBeAnimated._handle != null)
          positionShouldBeAnimated.cancel$0();
        t1.positionShouldBeAnimated = B.Timer_Timer(D.Duration_70000, new A._TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure(_this));
      }
      _this.setState$1(new A._TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure0(t1, _this, new B.Offset(screenBoundsAdjustedMagnifierRect.left, t3), new B.Offset(newGlobalFocalPointX - t2._dx, t4 - t3)));
    },
    build$1(context) {
      var t3,
        t1 = this._magnifierPosition,
        t2 = t1._dy;
      t1 = t1._dx;
      t3 = this._positionShouldBeAnimatedTimer != null ? D.Duration_70000 : C.Duration_0;
      return A.AnimatedPositioned$(new A.Magnifier(this._extraFocalPointOffset, null), C.C__Linear, t3, t1, t2);
    }
  };
  A.Magnifier.prototype = {
    build$1(context) {
      return A.RawMagnifier$(new B.ColoredBox(D.Color_rYE, null, null), C.Clip_1, new A.MagnifierDecoration(1, D.List_jWK, new B.RoundedRectangleBorder(D.BorderRadius_4BW, C.BorderSide_Ah5)), this.additionalFocalPointOffset.$add(0, new B.Offset(0, 40.95)), 1.25, D.Size_qTB);
    }
  };
  A.TextButton.prototype = {
    defaultStyleOf$1(context) {
      var _null = null;
      B.Theme_of(context);
      B.Theme_of(context);
      return new A._TextButtonDefaultsM3(context, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, C.Duration_200000, true, C.Alignment_0_0, _null, _null, _null);
    },
    themeStyleOf$1(context) {
      var buttonTheme = context.dependOnInheritedWidgetOfExactType$1$0(type$.TextButtonTheme),
        t1 = buttonTheme == null ? null : buttonTheme.data;
      return (t1 == null ? B.Theme_of(context).textButtonTheme : t1).style;
    }
  };
  A._TextButtonDefaultsM3.prototype = {
    get$_text_button$_colors() {
      var t1, _this = this,
        value = _this.___TextButtonDefaultsM3__colors_FI;
      if (value === $) {
        t1 = B.Theme_of(_this.context);
        _this.___TextButtonDefaultsM3__colors_FI !== $ && B.throwUnnamedLateFieldADI();
        value = _this.___TextButtonDefaultsM3__colors_FI = t1.colorScheme;
      }
      return value;
    },
    get$textStyle() {
      return new B.WidgetStatePropertyAll(B.Theme_of(this.context).textTheme.labelLarge, type$.WidgetStatePropertyAll_nullable_TextStyle);
    },
    get$backgroundColor() {
      return C.WidgetStatePropertyAll_G5s;
    },
    get$foregroundColor() {
      return new B._WidgetStatePropertyWith(new A._TextButtonDefaultsM3_foregroundColor_closure(this), type$._WidgetStatePropertyWith_nullable_Color);
    },
    get$overlayColor() {
      return new B._WidgetStatePropertyWith(new A._TextButtonDefaultsM3_overlayColor_closure(this), type$._WidgetStatePropertyWith_nullable_Color);
    },
    get$shadowColor() {
      return C.WidgetStatePropertyAll_G5s;
    },
    get$surfaceTintColor() {
      return C.WidgetStatePropertyAll_G5s;
    },
    get$elevation() {
      return C.WidgetStatePropertyAll_0;
    },
    get$padding() {
      return new B.WidgetStatePropertyAll(A._scaledPadding(this.context), type$.WidgetStatePropertyAll_EdgeInsetsGeometry);
    },
    get$minimumSize() {
      return D.WidgetStatePropertyAll_Size_64_40;
    },
    get$iconSize() {
      return D.WidgetStatePropertyAll_18;
    },
    get$iconColor() {
      return new B._WidgetStatePropertyWith(new A._TextButtonDefaultsM3_iconColor_closure(this), type$._WidgetStatePropertyWith_Color);
    },
    get$maximumSize() {
      return C.WidgetStatePropertyAll_HBn;
    },
    get$shape() {
      return C.WidgetStatePropertyAll_oQi;
    },
    get$mouseCursor() {
      return new B._WidgetStatePropertyWith(new A._TextButtonDefaultsM3_mouseCursor_closure(), type$._WidgetStatePropertyWith_nullable_MouseCursor);
    },
    get$visualDensity() {
      return B.Theme_of(this.context).visualDensity;
    },
    get$tapTargetSize() {
      return B.Theme_of(this.context).materialTapTargetSize;
    },
    get$splashFactory() {
      return B.Theme_of(this.context).splashFactory;
    }
  };
  A._TextFieldSelectionGestureDetectorBuilder.prototype = {
    onUserTap$0() {
      this._text_field$_state._widget.toString;
    }
  };
  A.TextField.prototype = {
    createState$0() {
      var _null = null;
      return new A._TextFieldState(new B.LabeledGlobalKey(_null, type$.LabeledGlobalKey_EditableTextState), _null, B.LinkedHashMap_LinkedHashMap$_empty(type$.RestorableProperty_nullable_Object, type$.void_Function), _null, true, _null);
    }
  };
  A._TextFieldState.prototype = {
    get$_effectiveController() {
      var t1 = this._widget.controller;
      return t1;
    },
    get$_effectiveFocusNode() {
      var t1 = this._widget.focusNode,
        t2 = this._focusNode;
      if (t2 == null) {
        t1 = B.FocusNode$(true, null, true, true, null, null, false);
        this._focusNode = t1;
      } else
        t1 = t2;
      return t1;
    },
    get$_effectiveMaxLengthEnforcement() {
      this._widget.toString;
      var t1 = this._framework$_element;
      t1.toString;
      B.Theme_of(t1);
      return D.MaxLengthEnforcement_2;
    },
    get$_isEnabled() {
      var t1 = this._widget.enabled;
      if (t1 == null)
        t1 = true;
      return t1;
    },
    get$_hasIntrinsicError() {
      this._widget.toString;
      return false;
    },
    get$_hasError() {
      var t1 = this._widget.decoration;
      if (t1.errorText == null)
        t1 = this.get$_hasIntrinsicError();
      else
        t1 = true;
      return t1;
    },
    get$_errorColor() {
      this._widget.toString;
      this._getEffectiveDecoration$0();
      var t1 = this._framework$_element;
      t1.toString;
      t1 = B.Theme_of(t1);
      return t1.colorScheme.error;
    },
    _getEffectiveDecoration$0() {
      var themeData, t2, t3, effectiveDecoration, _this = this,
        t1 = _this._framework$_element;
      t1.toString;
      B.Localizations_of(t1, C.Type_MaterialLocalizations_nEU, type$.MaterialLocalizations).toString;
      t1 = _this._framework$_element;
      t1.toString;
      themeData = B.Theme_of(t1);
      t1 = _this._widget.decoration;
      t1 = t1.applyDefaults$1(themeData.inputDecorationTheme);
      _this.get$_isEnabled();
      t2 = _this._widget;
      t3 = t2.decoration.hintMaxLines;
      effectiveDecoration = t1.copyWith$2$enabled$hintMaxLines(true, t3 == null ? t2.maxLines : t3);
      t1 = effectiveDecoration.counter == null;
      if (!t1 || effectiveDecoration.counterText != null)
        return effectiveDecoration;
      t2 = _this.get$_effectiveController()._change_notifier$_value.text;
      (t2.length === 0 ? C.StringCharacters_GVp : new B.StringCharacters(t2)).get$length(0);
      if (t1)
        if (effectiveDecoration.counterText == null)
          _this._widget.toString;
      _this._widget.toString;
      return effectiveDecoration;
    },
    initState$0() {
      var t1, _this = this;
      _this.super$State$initState();
      _this.___TextFieldState__selectionGestureDetectorBuilder_A = new A._TextFieldSelectionGestureDetectorBuilder(_this, _this);
      _this._widget.toString;
      t1 = _this.get$_effectiveFocusNode();
      _this._widget.toString;
      _this.get$_isEnabled();
      t1.set$canRequestFocus(true);
      _this.get$_effectiveFocusNode().addListener$1(_this.get$_text_field$_handleFocusChanged());
      _this._initStatesController$0();
    },
    get$_text_field$_canRequestFocus() {
      var mode,
        t1 = this._framework$_element;
      t1.toString;
      t1 = B.MediaQuery__maybeOf(t1, C._MediaQueryAspect_17);
      mode = t1 == null ? null : t1.navigationMode;
      t1 = true;
      switch ((mode == null ? C.NavigationMode_0 : mode).index) {
        case 0:
          this._widget.toString;
          this.get$_isEnabled();
          break;
        case 1:
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    didChangeDependencies$0() {
      this.super$__TextFieldState_State_RestorationMixin$didChangeDependencies();
      this.get$_effectiveFocusNode().set$canRequestFocus(this.get$_text_field$_canRequestFocus());
    },
    didUpdateWidget$1(oldWidget) {
      var t1, _this = this;
      _this.super$__TextFieldState_State_RestorationMixin$didUpdateWidget(oldWidget);
      _this._widget.toString;
      _this.get$_effectiveFocusNode().set$canRequestFocus(_this.get$_text_field$_canRequestFocus());
      if (_this.get$_effectiveFocusNode().get$hasFocus())
        _this._widget.toString;
      _this._widget.toString;
      t1 = _this.get$_statesController();
      _this.get$_isEnabled();
      t1.update$2(C.WidgetState_6, false);
      _this.get$_statesController().update$2(C.WidgetState_0, _this._text_field$_isHovering);
      _this.get$_statesController().update$2(C.WidgetState_1, _this.get$_effectiveFocusNode().get$hasFocus());
      _this.get$_statesController().update$2(D.WidgetState_7, _this.get$_hasError());
    },
    restoreState$2(oldBucket, initialRestore) {
      var t1 = this._text_field$_controller;
      if (t1 != null)
        this.registerForRestoration$2(t1, "controller");
    },
    get$restorationId() {
      return this._widget.restorationId;
    },
    dispose$0() {
      var t1, _this = this;
      _this.get$_effectiveFocusNode().removeListener$1(_this.get$_text_field$_handleFocusChanged());
      t1 = _this._focusNode;
      if (t1 != null)
        t1.dispose$0();
      t1 = _this._text_field$_controller;
      if (t1 != null) {
        t1._disposeOldValue$0();
        t1.super$RestorableListenable$dispose();
      }
      _this.get$_statesController().removeListener$1(_this.get$_handleStatesControllerChange());
      t1 = _this._internalStatesController;
      if (t1 != null) {
        t1.ChangeNotifier__listeners = $.$get$ChangeNotifier__emptyListeners();
        t1.ChangeNotifier__count = 0;
      }
      _this.super$__TextFieldState_State_RestorationMixin$dispose();
    },
    _requestKeyboard$0() {
      var t1 = this.editableTextKey.get$currentState();
      if (t1 != null)
        t1.requestKeyboard$0();
    },
    _shouldShowSelectionHandles$1(cause) {
      var _this = this,
        t1 = _this.___TextFieldState__selectionGestureDetectorBuilder_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      if (!t1._shouldShowSelectionToolbar)
        return false;
      if (cause === C.SelectionChangedCause_4)
        return false;
      _this._widget.toString;
      _this.get$_isEnabled();
      if (cause === D.SelectionChangedCause_2 || cause === D.SelectionChangedCause_7)
        return true;
      if (_this.get$_effectiveController()._change_notifier$_value.text.length !== 0)
        return true;
      return false;
    },
    _text_field$_handleFocusChanged$0() {
      this.setState$1(new A._TextFieldState__handleFocusChanged_closure());
      this.get$_statesController().update$2(C.WidgetState_1, this.get$_effectiveFocusNode().get$hasFocus());
    },
    _text_field$_handleSelectionChanged$2(selection, cause) {
      var t1, _this = this,
        willShowSelectionHandles = _this._shouldShowSelectionHandles$1(cause);
      if (willShowSelectionHandles !== _this._showSelectionHandles)
        _this.setState$1(new A._TextFieldState__handleSelectionChanged_closure(_this, willShowSelectionHandles));
      t1 = _this._framework$_element;
      t1.toString;
      switch (B.Theme_of(t1).platform.index) {
        case 2:
        case 4:
        case 3:
        case 5:
        case 1:
        case 0:
          if (cause === D.SelectionChangedCause_2) {
            t1 = _this.editableTextKey.get$currentState();
            if (t1 != null)
              t1.bringIntoView$1(selection.get$extent());
          }
          break;
      }
      t1 = _this._framework$_element;
      t1.toString;
      switch (B.Theme_of(t1).platform.index) {
        case 2:
        case 1:
        case 0:
          break;
        case 4:
        case 3:
        case 5:
          if (cause === D.SelectionChangedCause_6) {
            t1 = _this.editableTextKey.get$currentState();
            if (t1 != null)
              t1.hideToolbar$0();
          }
          break;
      }
    },
    _handleSelectionHandleTapped$0() {
      var t1 = this.get$_effectiveController()._change_notifier$_value.selection;
      if (t1.start === t1.end)
        this.editableTextKey.get$currentState().toggleToolbar$0();
    },
    _handleHover$1(hovering) {
      var _this = this;
      if (hovering !== _this._text_field$_isHovering) {
        _this.setState$1(new A._TextFieldState__handleHover_closure(_this, hovering));
        _this.get$_statesController().update$2(C.WidgetState_0, _this._text_field$_isHovering);
      }
    },
    _handleStatesControllerChange$0() {
      this.setState$1(new A._TextFieldState__handleStatesControllerChange_closure());
    },
    get$_statesController() {
      this._widget.toString;
      var t1 = this._internalStatesController;
      t1.toString;
      return t1;
    },
    _initStatesController$0() {
      var t1, _this = this;
      _this._widget.toString;
      _this._internalStatesController = B.WidgetStatesController$(null);
      t1 = _this.get$_statesController();
      _this.get$_isEnabled();
      t1.update$2(C.WidgetState_6, false);
      _this.get$_statesController().update$2(C.WidgetState_0, _this._text_field$_isHovering);
      _this.get$_statesController().update$2(C.WidgetState_1, _this.get$_effectiveFocusNode().get$hasFocus());
      _this.get$_statesController().update$2(D.WidgetState_7, _this.get$_hasError());
      _this.get$_statesController().addListener$1(_this.get$_handleStatesControllerChange());
    },
    get$textInputConfiguration() {
      var autofillHints, t2, t3, autofillConfiguration, _this = this,
        t1 = _this._widget.autofillHints;
      if (t1 == null)
        autofillHints = null;
      else
        autofillHints = J.JSArray_JSArray$markFixed(t1.slice(0), B._arrayInstanceType(t1)._precomputed1);
      if (autofillHints != null) {
        t1 = _this.editableTextKey.get$currentState();
        t1.toString;
        t1 = B.Primitives_objectHashCode(t1);
        t2 = _this.get$_effectiveController()._change_notifier$_value;
        t3 = _this._widget.decoration;
        autofillConfiguration = new A.AutofillConfiguration(true, "EditableText-" + t1, autofillHints, t2, t3.hintText);
      } else
        autofillConfiguration = D.AutofillConfiguration_JoX;
      t1 = _this.editableTextKey.get$currentState().get$textInputConfiguration();
      return A.TextInputConfiguration$(t1.allowedMimeTypes, true, autofillConfiguration, false, true, t1.enableInteractiveSelection, true, t1.inputAction, t1.inputType, t1.keyboardAppearance, t1.obscureText, t1.readOnly, t1.smartDashesType, t1.smartQuotesType, t1.textCapitalization, t1.viewId);
    },
    build$1(context) {
      var providedStyle, t1, t2, t3, stateStyle, style, controller, focusNode, t4, spellCheckConfiguration, textSelectionControls, cursorOpacityAnimates, cursorRadius, paintCursorAboveText, cursorOpacityAnimates0, cursorOffset, autocorrectionTextRectColor, cupertinoTheme, cursorColor, selectionColor, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, child, effectiveMouseCursor, _this = this, _null = null, _box_0 = {},
        theme = B.Theme_of(context),
        selectionStyle = context.dependOnInheritedWidgetOfExactType$1$0(type$.DefaultSelectionStyle);
      if (selectionStyle == null)
        selectionStyle = C.DefaultSelectionStyle_gwC;
      providedStyle = B.WidgetStateProperty_resolveAs(_this._widget.style, _this.get$_statesController()._change_notifier$_value, type$.nullable_TextStyle);
      t1 = B.Theme_of(context).textTheme.bodyLarge;
      t1.toString;
      t2 = _this._framework$_element;
      t2.toString;
      B.Theme_of(t2);
      t2 = _this._framework$_element;
      t2.toString;
      t2 = A._m3StateInputStyle(t2);
      t3 = type$.TextStyle;
      stateStyle = B.WidgetStateProperty_resolveAs(t2, _this.get$_statesController()._change_notifier$_value, t3);
      style = B.WidgetStateProperty_resolveAs(t1, _this.get$_statesController()._change_notifier$_value, t3).merge$1(stateStyle).merge$1(providedStyle);
      _this._widget.toString;
      t1 = theme.colorScheme;
      controller = _this.get$_effectiveController();
      focusNode = _this.get$_effectiveFocusNode();
      t2 = type$.JSArray_TextInputFormatter;
      t3 = B._setArrayType([], t2);
      t4 = _this._widget;
      t4.toString;
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
          spellCheckConfiguration = A.CupertinoTextField_inferIOSSpellCheckConfiguration(t4.spellCheckConfiguration);
          break;
        case 0:
        case 1:
        case 3:
        case 5:
          spellCheckConfiguration = A.TextField_inferAndroidSpellCheckConfiguration(t4.spellCheckConfiguration);
          break;
        default:
          spellCheckConfiguration = _null;
      }
      t4 = _this._widget;
      textSelectionControls = t4.selectionControls;
      cursorOpacityAnimates = t4.cursorOpacityAnimates;
      cursorRadius = t4.cursorRadius;
      _box_0.handleDidLoseAccessibilityFocus = _box_0.handleDidGainAccessibilityFocus = null;
      paintCursorAboveText = false;
      cursorOpacityAnimates0 = false;
      cursorOffset = _null;
      autocorrectionTextRectColor = _null;
      switch (theme.platform.index) {
        case 2:
          cupertinoTheme = A.CupertinoTheme_of(context);
          _this.___TextFieldState_forcePressEnabled_A = true;
          textSelectionControls = $.$get$cupertinoTextSelectionHandleControls();
          if (_this.get$_hasError())
            cursorColor = _this.get$_errorColor();
          else {
            t4 = _this._widget.cursorColor;
            if (t4 == null)
              t4 = selectionStyle.cursorColor;
            cursorColor = t4 == null ? cupertinoTheme.get$primaryColor() : t4;
          }
          selectionColor = selectionStyle.selectionColor;
          if (selectionColor == null)
            selectionColor = cupertinoTheme.get$primaryColor().withOpacity$1(0.4);
          cursorOffset = new B.Offset(-2 / B.InheritedModel_inheritFrom(context, C._MediaQueryAspect_2, type$.MediaQuery).data.devicePixelRatio, 0);
          autocorrectionTextRectColor = selectionColor;
          paintCursorAboveText = true;
          cursorOpacityAnimates = true;
          cursorRadius = C.Radius_2_2;
          break;
        case 4:
          cupertinoTheme = A.CupertinoTheme_of(context);
          cursorOpacityAnimates = _this.___TextFieldState_forcePressEnabled_A = false;
          textSelectionControls = $.$get$cupertinoDesktopTextSelectionHandleControls();
          if (_this.get$_hasError())
            cursorColor = _this.get$_errorColor();
          else {
            t4 = _this._widget.cursorColor;
            if (t4 == null)
              t4 = selectionStyle.cursorColor;
            cursorColor = t4 == null ? cupertinoTheme.get$primaryColor() : t4;
          }
          selectionColor = selectionStyle.selectionColor;
          if (selectionColor == null)
            selectionColor = cupertinoTheme.get$primaryColor().withOpacity$1(0.4);
          cursorOffset = new B.Offset(-2 / B.InheritedModel_inheritFrom(context, C._MediaQueryAspect_2, type$.MediaQuery).data.devicePixelRatio, 0);
          _box_0.handleDidGainAccessibilityFocus = new A._TextFieldState_build_closure(_this);
          _box_0.handleDidLoseAccessibilityFocus = new A._TextFieldState_build_closure0(_this);
          paintCursorAboveText = true;
          cursorRadius = C.Radius_2_2;
          break;
        case 0:
        case 1:
          _this.___TextFieldState_forcePressEnabled_A = false;
          textSelectionControls = $.$get$materialTextSelectionHandleControls();
          if (_this.get$_hasError())
            cursorColor = _this.get$_errorColor();
          else {
            t4 = _this._widget.cursorColor;
            if (t4 == null)
              t4 = selectionStyle.cursorColor;
            cursorColor = t4 == null ? t1.primary : t4;
          }
          selectionColor = selectionStyle.selectionColor;
          if (selectionColor == null)
            selectionColor = t1.primary.withOpacity$1(0.4);
          cursorOpacityAnimates = cursorOpacityAnimates0;
          break;
        case 3:
          _this.___TextFieldState_forcePressEnabled_A = false;
          textSelectionControls = $.$get$desktopTextSelectionHandleControls();
          if (_this.get$_hasError())
            cursorColor = _this.get$_errorColor();
          else {
            t4 = _this._widget.cursorColor;
            if (t4 == null)
              t4 = selectionStyle.cursorColor;
            cursorColor = t4 == null ? t1.primary : t4;
          }
          selectionColor = selectionStyle.selectionColor;
          if (selectionColor == null)
            selectionColor = t1.primary.withOpacity$1(0.4);
          _box_0.handleDidGainAccessibilityFocus = new A._TextFieldState_build_closure1(_this);
          _box_0.handleDidLoseAccessibilityFocus = new A._TextFieldState_build_closure2(_this);
          cursorOpacityAnimates = cursorOpacityAnimates0;
          break;
        case 5:
          _this.___TextFieldState_forcePressEnabled_A = false;
          textSelectionControls = $.$get$desktopTextSelectionHandleControls();
          if (_this.get$_hasError())
            cursorColor = _this.get$_errorColor();
          else {
            t4 = _this._widget.cursorColor;
            if (t4 == null)
              t4 = selectionStyle.cursorColor;
            cursorColor = t4 == null ? t1.primary : t4;
          }
          selectionColor = selectionStyle.selectionColor;
          if (selectionColor == null)
            selectionColor = t1.primary.withOpacity$1(0.4);
          _box_0.handleDidGainAccessibilityFocus = new A._TextFieldState_build_closure3(_this);
          _box_0.handleDidLoseAccessibilityFocus = new A._TextFieldState_build_closure4(_this);
          cursorOpacityAnimates = cursorOpacityAnimates0;
          break;
        default:
          selectionColor = _null;
          cursorColor = selectionColor;
          paintCursorAboveText = cursorColor;
      }
      t4 = _this.RestorationMixin__bucket;
      _this._widget.toString;
      _this.get$_isEnabled();
      t5 = _this._widget;
      t6 = t5.toolbarOptions;
      t7 = _this._showSelectionHandles;
      t8 = t5.undoController;
      t9 = t5.keyboardType;
      t10 = t5.textInputAction;
      t11 = t5.textCapitalization;
      t12 = t5.strutStyle;
      t13 = t5.textAlign;
      t14 = t5.textDirection;
      t15 = t5.autofocus;
      t16 = t5.obscuringCharacter;
      t17 = t5.obscureText;
      t18 = t5.smartDashesType;
      t19 = t5.smartQuotesType;
      t20 = t5.maxLines;
      t5 = t5.minLines;
      t21 = focusNode.get$hasFocus() ? selectionColor : _null;
      t22 = _this._widget;
      t23 = t22.enableInteractiveSelection;
      t24 = t23 ? textSelectionControls : _null;
      t25 = t22.onChanged;
      t26 = t22.onEditingComplete;
      t27 = t22.onSubmitted;
      t28 = t22.onAppPrivateCommand;
      t29 = t22.groupId;
      t30 = t22.onTapOutside;
      t31 = t22.onTapUpOutside;
      t32 = t22.cursorWidth;
      t33 = t22.cursorHeight;
      t34 = t22.selectionHeightStyle;
      t35 = t22.selectionWidthStyle;
      t36 = t22.scrollPadding;
      t37 = t22.dragStartBehavior;
      t38 = t22.scrollController;
      t39 = t22.scrollPhysics;
      t40 = t22.clipBehavior;
      t41 = t22.contentInsertionConfiguration;
      t22 = t22.contextMenuBuilder;
      t42 = $.$get$TextMagnifier_adaptiveMagnifierConfiguration();
      if (type$.TextSelectionHandleControls._is(t24))
        t6 = D.ToolbarOptions_false_false_false_false;
      else if (t17)
        t6 = D.ToolbarOptions_false_false_true_true;
      else
        t6 = D.ToolbarOptions_true_true_true_true;
      if (t20 === 1) {
        t2 = B._setArrayType([$.$get$FilteringTextInputFormatter_singleLineFormatter()], t2);
        C.JSArray_methods.addAll$1(t2, t3);
      } else
        t2 = t3;
      t1 = B.UnmanagedRestorationScope$(t4, new A.EditableText(controller, focusNode, t16, t17, false, t6, t7, true, true, t18, t19, true, style, t8, t12, t13, t14, t11, cursorColor, autocorrectionTextRectColor, C.CupertinoDynamicColor_yWg, t20, t5, false, t15, t21, t24, t9, t10, t25, t26, t27, t28, _this.get$_text_field$_handleSelectionChanged(), _this.get$_handleSelectionHandleTapped(), t29, t30, t31, t2, C.C__DeferringMouseCursor, true, t32, t33, cursorRadius, cursorOpacityAnimates, cursorOffset, paintCursorAboveText, t34, t35, t1.brightness, t36, t23, t37, t38, t39, true, true, _this, t40, "editable", true, t41, t22, spellCheckConfiguration, t42, _this.editableTextKey));
      _this._widget.toString;
      child = B.AnimatedBuilder$(new B._MergingListenable(B._setArrayType([focusNode, controller], type$.JSArray_Listenable)), new A._TextFieldState_build_closure5(_this, focusNode, controller), new B.RepaintBoundary(t1, _null));
      _this._widget.toString;
      effectiveMouseCursor = B.WidgetStateProperty_resolveAs(D._WidgetStateMouseCursor_zKm, _this.get$_statesController()._change_notifier$_value, type$.MouseCursor);
      _box_0.semanticsMaxValueLength = null;
      if (_this.get$_effectiveMaxLengthEnforcement() !== D.MaxLengthEnforcement_0)
        _this._widget.toString;
      _this._widget.toString;
      _this.get$_isEnabled();
      t1 = _this.___TextFieldState__selectionGestureDetectorBuilder_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t2 = t1.delegate.___TextFieldState_forcePressEnabled_A;
      t2 === $ && B.throwUnnamedLateFieldNI();
      t3 = t2 ? t1.get$onForcePressStart() : _null;
      t2 = t2 ? t1.get$onForcePressEnd() : _null;
      t1._text_field$_state._widget.toString;
      return B.MouseRegion$(A.TextFieldTapRegion$(B.IgnorePointer$(B.AnimatedBuilder$(controller, new A._TextFieldState_build_closure6(_box_0, _this), new A.TextSelectionGestureDetector(t1.get$onTapTrackStart(), t1.get$onTapTrackReset(), t1.get$onTapDown(), t3, t2, t1.get$onSecondaryTap(), t1.get$onSecondaryTapDown(), t1.get$onSingleTapUp(), t1.get$onSingleTapCancel(), t1.get$onUserTap(), t1.get$onSingleLongTapStart(), t1.get$onSingleLongTapMoveUpdate(), t1.get$onSingleLongTapEnd(), t1.get$onDoubleTapDown(), t1.get$onTripleTapDown(), t1.get$onDragSelectionStart(), t1.get$onDragSelectionUpdate(), t1.get$onDragSelectionEnd(), false, C.HitTestBehavior_2, child, _null)), false, _null), _null, D.Type_EditableText_O5i, _null, _null), effectiveMouseCursor, _null, new A._TextFieldState_build_closure7(_this), new A._TextFieldState_build_closure8(_this), _null);
    }
  };
  A.__TextFieldState_State_RestorationMixin.prototype = {
    didUpdateWidget$1(oldWidget) {
      this.super$State$didUpdateWidget(oldWidget);
      this.didUpdateRestorationId$0();
    },
    didChangeDependencies$0() {
      var oldBucket, needsRestore, t1, didReplaceBucket, _this = this;
      _this.super$State$didChangeDependencies();
      oldBucket = _this.RestorationMixin__bucket;
      needsRestore = _this.get$restorePending();
      t1 = _this._framework$_element;
      t1.toString;
      t1 = B.RestorationScope_maybeOf(t1);
      _this.RestorationMixin__currentParent = t1;
      didReplaceBucket = _this._updateBucketIfNecessary$2$parent$restorePending(t1, needsRestore);
      if (needsRestore) {
        _this.restoreState$2(oldBucket, _this.RestorationMixin__firstRestorePending);
        _this.RestorationMixin__firstRestorePending = false;
      }
      if (didReplaceBucket)
        if (oldBucket != null)
          oldBucket.dispose$0();
    },
    dispose$0() {
      var t1, _this = this;
      _this.RestorationMixin__properties.forEach$1(0, new A.__TextFieldState_State_RestorationMixin_dispose_closure());
      t1 = _this.RestorationMixin__bucket;
      if (t1 != null)
        t1.dispose$0();
      _this.RestorationMixin__bucket = null;
      _this.super$State$dispose();
    }
  };
  A.MaterialTextSelectionHandleControls.prototype = {};
  A.MaterialTextSelectionControls.prototype = {
    getHandleSize$1(textLineHeight) {
      return D.Size_22_22;
    },
    buildHandle$4(context, type, textHeight, onTap) {
      var t1, handleColor, handle, _null = null,
        theme = B.Theme_of(context);
      context.dependOnInheritedWidgetOfExactType$1$0(type$.TextSelectionTheme);
      t1 = B.Theme_of(context);
      handleColor = t1.textSelectionTheme.selectionHandleColor;
      if (handleColor == null)
        handleColor = theme.colorScheme.primary;
      handle = B.SizedBox$(B.CustomPaint$(B.GestureDetector$(C.HitTestBehavior_2, _null, C.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, onTap, _null, _null, _null, _null, _null, _null), _null, _null, new A._TextSelectionHandlePainter(handleColor, _null), C.Size_0_0), 22, 22);
      switch (type.index) {
        case 0:
          t1 = A.Transform$rotate(1.5707963267948966, handle);
          break;
        case 1:
          t1 = handle;
          break;
        case 2:
          t1 = A.Transform$rotate(0.7853981633974483, handle);
          break;
        default:
          t1 = _null;
      }
      return t1;
    },
    getHandleAnchor$2(type, textLineHeight) {
      var t1;
      switch (type.index) {
        case 2:
          t1 = D.Offset_11_m4;
          break;
        case 0:
          t1 = D.Offset_22_0;
          break;
        case 1:
          t1 = C.Offset_0_0;
          break;
        default:
          t1 = null;
      }
      return t1;
    }
  };
  A._TextSelectionHandlePainter.prototype = {
    paint$2(canvas, size) {
      var radius, circle, t2, path,
        t1 = $.$get$_renderer(),
        paint = t1.createPaint$0();
      paint.set$color(this.color);
      radius = size._dx / 2;
      circle = B.Rect$fromCircle(new B.Offset(radius, radius), radius);
      t2 = 0 + radius;
      path = t1.createPath$0();
      path.addOval$1(circle);
      path.addRect$1(new B.Rect(0, 0, t2, t2));
      canvas.drawPath$2(path, paint);
    },
    shouldRepaint$1(oldPainter) {
      return !this.color.$eq(0, oldPainter.color);
    }
  };
  A._MaterialTextSelectionHandleControls_MaterialTextSelectionControls_TextSelectionHandleControls.prototype = {};
  A.TextSelectionToolbar.prototype = {
    build$1(context) {
      var anchorAbovePadded = this.anchorAbove.$sub(0, D.Offset_0_8),
        anchorBelowPadded = this.anchorBelow.$add(0, D.Offset_0_20),
        paddingAbove = B.InheritedModel_inheritFrom(context, C._MediaQueryAspect_6, type$.MediaQuery).data.padding.top + 8,
        fitsAbove = 44 <= anchorAbovePadded._dy - 8 - paddingAbove,
        localAdjustment = new B.Offset(8, paddingAbove);
      return new B.Padding(new B.EdgeInsets(8, paddingAbove, 8, 8), new B.CustomSingleChildLayout(new A.TextSelectionToolbarLayoutDelegate(anchorAbovePadded.$sub(0, localAdjustment), anchorBelowPadded.$sub(0, localAdjustment), fitsAbove), new A._TextSelectionToolbarOverflowable(this.children, fitsAbove, A.text_selection_toolbar_TextSelectionToolbar__defaultToolbarBuilder$closure(), null), null), null);
    }
  };
  A._TextSelectionToolbarOverflowable.prototype = {
    createState$0() {
      return new A._TextSelectionToolbarOverflowableState(new B.UniqueKey(), null, null);
    },
    toolbarBuilder$2(arg0, arg1) {
      return this.toolbarBuilder.call$2(arg0, arg1);
    }
  };
  A._TextSelectionToolbarOverflowableState.prototype = {
    didUpdateWidget$1(oldWidget) {
      var _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      if (!B.listEquals(_this._widget.children, oldWidget.children)) {
        _this._containerKey = new B.UniqueKey();
        _this._overflowOpen = false;
      }
    },
    build$1(context) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, _this = this, _null = null;
      B.Localizations_of(context, C.Type_MaterialLocalizations_nEU, type$.MaterialLocalizations).toString;
      t1 = _this._containerKey;
      t2 = _this._overflowOpen;
      t3 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection;
      t4 = _this._widget;
      t5 = t4.isAbove;
      t6 = _this._overflowOpen;
      t7 = type$.ValueKey_StandardComponentType;
      t7 = t6 ? new B.ValueKey(C.StandardComponentType_0, t7) : new B.ValueKey(D.StandardComponentType_2, t7);
      t8 = B.Icon$(t6 ? C.IconData_57490_true : D.IconData_58372_false, _null, _null, _null, _null);
      t9 = t6 ? "Back" : "More";
      t7 = B._setArrayType([new A._TextSelectionToolbarOverflowButton(t8, new A._TextSelectionToolbarOverflowableState_build_closure(_this), t9, t7)], type$.JSArray_Widget);
      C.JSArray_methods.addAll$1(t7, _this._widget.children);
      return new A._TextSelectionToolbarTrailingEdgeAlign(t2, t3, A.AnimatedSize$(t4.toolbarBuilder$2(context, new A._TextSelectionToolbarItemsLayout(t5, t6, t7, _null)), C.C__Linear, D.Duration_140000), t1);
    }
  };
  A._TextSelectionToolbarTrailingEdgeAlign.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._TextSelectionToolbarTrailingEdgeAlignRenderBox(this.overflowOpen, this.textDirection, null, new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$overflowOpen(this.overflowOpen);
      renderObject.set$textDirection(this.textDirection);
    }
  };
  A._TextSelectionToolbarTrailingEdgeAlignRenderBox.prototype = {
    set$overflowOpen(value) {
      if (value === this._overflowOpen)
        return;
      this._overflowOpen = value;
      this.markNeedsLayout$0();
    },
    set$textDirection(value) {
      if (value === this._text_selection_toolbar$_textDirection)
        return;
      this._text_selection_toolbar$_textDirection = value;
      this.markNeedsLayout$0();
    },
    performLayout$0() {
      var t2, t3, _this = this,
        t1 = _this.RenderObjectWithChildMixin__child;
      t1.toString;
      t2 = type$.BoxConstraints;
      t3 = t2._as(B.RenderObject.prototype.get$constraints.call(_this));
      t1.layout$2$parentUsesSize(new B.BoxConstraints(0, t3.maxWidth, 0, t3.maxHeight), true);
      if (!_this._overflowOpen && _this._closedWidth == null)
        _this._closedWidth = _this.RenderObjectWithChildMixin__child.get$size()._dx;
      t1 = t2._as(B.RenderObject.prototype.get$constraints.call(_this));
      t2 = _this._closedWidth;
      if (t2 != null) {
        t2 = _this.RenderObjectWithChildMixin__child.get$size();
        t3 = _this._closedWidth;
        t3.toString;
        t2 = t2._dx > t3;
      } else {
        t3 = t2;
        t2 = true;
      }
      if (t2)
        t2 = _this.RenderObjectWithChildMixin__child.get$size()._dx;
      else {
        t3.toString;
        t2 = t3;
      }
      _this._box$_size = t1.constrain$1(new B.Size(t2, _this.RenderObjectWithChildMixin__child.get$size()._dy));
      t2 = _this.RenderObjectWithChildMixin__child.parentData;
      t2.toString;
      type$.ToolbarItemsParentData._as(t2);
      t2.offset = new B.Offset(_this._text_selection_toolbar$_textDirection === C.TextDirection_0 ? 0 : _this.get$size()._dx - _this.RenderObjectWithChildMixin__child.get$size()._dx, 0);
    },
    paint$2(context, offset) {
      var t1 = this.RenderObjectWithChildMixin__child,
        t2 = t1.parentData;
      t2.toString;
      context.paintChild$2(t1, type$.ToolbarItemsParentData._as(t2).offset.$add(0, offset));
    },
    hitTestChildren$2$position(result, position) {
      var t1 = this.RenderObjectWithChildMixin__child.parentData;
      t1.toString;
      return result.addWithPaintOffset$3$hitTest$offset$position(new A._TextSelectionToolbarTrailingEdgeAlignRenderBox_hitTestChildren_closure(this), type$.ToolbarItemsParentData._as(t1).offset, position);
    },
    setupParentData$1(child) {
      if (!(child.parentData instanceof A.ToolbarItemsParentData))
        child.parentData = new A.ToolbarItemsParentData(null, null, C.Offset_0_0);
    },
    applyPaintTransform$2(child, transform) {
      var t1 = child.parentData;
      t1.toString;
      t1 = type$.ToolbarItemsParentData._as(t1).offset;
      transform.translate$2(t1._dx, t1._dy);
      this.super$RenderProxyBoxMixin$applyPaintTransform(child, transform);
    }
  };
  A._TextSelectionToolbarItemsLayout.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._RenderTextSelectionToolbarItemsLayout(this.isAbove, this.overflowOpen, 0, null, null, new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$isAbove(this.isAbove);
      renderObject.set$overflowOpen(this.overflowOpen);
    },
    createElement$0() {
      return new A._TextSelectionToolbarItemsLayoutElement(B.HashSet_HashSet(type$.Element), this, C._ElementLifecycle_0);
    }
  };
  A._TextSelectionToolbarItemsLayoutElement.prototype = {};
  A._RenderTextSelectionToolbarItemsLayout.prototype = {
    set$isAbove(value) {
      if (value === this._isAbove)
        return;
      this._isAbove = value;
      this.markNeedsLayout$0();
    },
    set$overflowOpen(value) {
      if (value === this._overflowOpen)
        return;
      this._overflowOpen = value;
      this.markNeedsLayout$0();
    },
    _layoutChildren$0() {
      var t3, _this = this, t1 = {},
        t2 = type$.BoxConstraints,
        sizedConstraints = _this._overflowOpen ? t2._as(B.RenderObject.prototype.get$constraints.call(_this)) : B.BoxConstraints$loose(new B.Size(t2._as(B.RenderObject.prototype.get$constraints.call(_this)).maxWidth, 44));
      t1.i = -1;
      t1.width = 0;
      _this.visitChildren$1(new A._RenderTextSelectionToolbarItemsLayout__layoutChildren_closure(t1, _this, sizedConstraints));
      t2 = _this.ContainerRenderObjectMixin__firstChild;
      t2.toString;
      t3 = _this._lastIndexThatFits;
      if (t3 !== -1 && t3 === _this.ContainerRenderObjectMixin__childCount - 2 && t1.width - t2.get$size()._dx <= sizedConstraints.maxWidth)
        _this._lastIndexThatFits = -1;
    },
    _shouldPaintChild$2(renderObjectChild, index) {
      var t1, _this = this;
      if (renderObjectChild === _this.ContainerRenderObjectMixin__firstChild)
        return _this._lastIndexThatFits !== -1;
      t1 = _this._lastIndexThatFits;
      if (t1 === -1)
        return true;
      return index > t1 === _this._overflowOpen;
    },
    _placeChildren$0() {
      var t2, t3, t4, t5, _this = this, t1 = {};
      t1.i = -1;
      t1.nextSize = C.Size_0_0;
      t1.fitWidth = 0;
      t2 = _this.ContainerRenderObjectMixin__firstChild;
      t2.toString;
      t1.overflowHeight = _this._overflowOpen && !_this._isAbove ? t2.get$size()._dy : 0;
      _this.visitChildren$1(new A._RenderTextSelectionToolbarItemsLayout__placeChildren_closure(t1, _this, t2));
      t3 = t2.parentData;
      t3.toString;
      type$.ToolbarItemsParentData._as(t3);
      t4 = _this.ContainerRenderObjectMixin__firstChild;
      t4.toString;
      if (_this._shouldPaintChild$2(t4, 0)) {
        t3.shouldPaint = true;
        if (_this._overflowOpen) {
          t4 = _this._isAbove;
          t3.offset = t4 ? new B.Offset(0, t1.overflowHeight) : C.Offset_0_0;
          t3 = t1.nextSize;
          t5 = t3._dy;
          t2 = t4 ? t5 + t2.get$size()._dy : t5;
          t1.nextSize = new B.Size(t3._dx, t2);
        } else {
          t3.offset = new B.Offset(t1.fitWidth, 0);
          t1.nextSize = new B.Size(t1.nextSize._dx + t2.get$size()._dx, t1.nextSize._dy);
        }
      } else
        t3.shouldPaint = false;
      _this._box$_size = t1.nextSize;
    },
    _resizeChildrenWhenOverflow$0() {
      var t2, _this = this, t1 = {};
      if (!_this._overflowOpen)
        return;
      t2 = _this.ContainerRenderObjectMixin__firstChild;
      t2.toString;
      t1.i = -1;
      _this.visitChildren$1(new A._RenderTextSelectionToolbarItemsLayout__resizeChildrenWhenOverflow_closure(t1, _this, t2));
    },
    performLayout$0() {
      var t1, _this = this;
      _this._lastIndexThatFits = -1;
      if (_this.ContainerRenderObjectMixin__firstChild == null) {
        t1 = type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this));
        _this._box$_size = new B.Size(B.clampDouble(0, t1.minWidth, t1.maxWidth), B.clampDouble(0, t1.minHeight, t1.maxHeight));
        return;
      }
      _this._layoutChildren$0();
      _this._placeChildren$0();
      _this._resizeChildrenWhenOverflow$0();
    },
    paint$2(context, offset) {
      this.visitChildren$1(new A._RenderTextSelectionToolbarItemsLayout_paint_closure(context, offset));
    },
    setupParentData$1(child) {
      if (!(child.parentData instanceof A.ToolbarItemsParentData))
        child.parentData = new A.ToolbarItemsParentData(null, null, C.Offset_0_0);
    },
    hitTestChildren$2$position(result, position) {
      var t2, child, _box_0 = {},
        t1 = _box_0.child = this.ContainerRenderObjectMixin__lastChild;
      for (t2 = type$.ToolbarItemsParentData; t1 != null;) {
        t1 = t1.parentData;
        t1.toString;
        t2._as(t1);
        if (!t1.shouldPaint) {
          child = t1.ContainerParentDataMixin_previousSibling;
          _box_0.child = child;
          t1 = child;
          continue;
        }
        if (result.addWithPaintOffset$3$hitTest$offset$position(new A._RenderTextSelectionToolbarItemsLayout_hitTestChildren_closure(_box_0), t1.offset, position))
          return true;
        child = t1.ContainerParentDataMixin_previousSibling;
        _box_0.child = child;
        t1 = child;
      }
      return false;
    },
    visitChildrenForSemantics$1(visitor) {
      this.visitChildren$1(new A._RenderTextSelectionToolbarItemsLayout_visitChildrenForSemantics_closure(visitor));
    }
  };
  A._TextSelectionToolbarContainer.prototype = {
    build$1(context) {
      var _null = null;
      return B.Material$(C.Duration_200000, D.BorderRadius_QJL, this.child, C.Clip_2, A._TextSelectionToolbarContainer__getColor(B.Theme_of(context).colorScheme), 1, _null, _null, _null, _null, _null, C.MaterialType_1);
    }
  };
  A._TextSelectionToolbarOverflowButton.prototype = {
    build$1(context) {
      var _null = null;
      return B.Material$(C.Duration_200000, _null, B.IconButton$(_null, _null, this.icon, _null, _null, this.onPressed, _null, _null, this.tooltip), C.Clip_0, C.Color_Edl, 0, _null, _null, _null, _null, _null, C.MaterialType_1);
    }
  };
  A.__RenderTextSelectionToolbarItemsLayout_RenderBox_ContainerRenderObjectMixin.prototype = {
    attach$1(owner) {
      var child, t1, t2;
      this.super$RenderObject$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.ToolbarItemsParentData; child != null;) {
        child.attach$1(owner);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0() {
      var child, t1, t2;
      this.super$RenderObject$detach();
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.ToolbarItemsParentData; child != null;) {
        child.detach$0();
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    }
  };
  A.__TextSelectionToolbarOverflowableState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTickers());
      _this.TickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    }
  };
  A._TextSelectionToolbarItemPosition.prototype = {
    _enumToString$0() {
      return "_TextSelectionToolbarItemPosition." + this._name;
    }
  };
  A.TextSelectionToolbarTextButton.prototype = {
    build$1(context) {
      var _this = this, _null = null;
      return A.TextButton$(_this.child, _this.onPressed, B.TextButton_styleFrom(_this.alignment, _null, C.Color_Edl, _null, _null, _null, _null, _null, _null, A.TextSelectionToolbarTextButton__getForegroundColor(B.Theme_of(context).colorScheme), _null, D.Size_48_48, _this.padding, _null, C.RoundedRectangleBorder_Ggx, _null, _null, D.TextStyle_IHC, _null));
    }
  };
  A.TextAlignVertical.prototype = {
    toString$0(_) {
      return "TextAlignVertical(y: " + this.y + ")";
    }
  };
  A.PlaceholderSpan.prototype = {
    computeToPlainText$3$includePlaceholders$includeSemanticsLabels(buffer, includePlaceholders, includeSemanticsLabels) {
      var t1 = B.Primitives_stringFromCharCode(65532);
      buffer._contents += t1;
    },
    computeSemanticsInformation$1(collector) {
      collector.push(D.InlineSpanSemanticsInformation_fFW);
    }
  };
  A.ShapeDecoration.prototype = {
    getClipPath$2(rect, textDirection) {
      return this.shape.getOuterPath$2$textDirection(rect, textDirection);
    },
    get$padding() {
      return this.shape.get$dimensions();
    },
    get$isComplex() {
      return this.shadows != null;
    },
    lerpFrom$2(a, t) {
      var t1;
      $label0$0: {
        if (a instanceof B.BoxDecoration) {
          t1 = A.ShapeDecoration_lerp(A.ShapeDecoration_ShapeDecoration$fromBoxDecoration(a), this, t);
          break $label0$0;
        }
        if (type$.nullable_ShapeDecoration._is(a)) {
          t1 = A.ShapeDecoration_lerp(a, this, t);
          break $label0$0;
        }
        t1 = this.super$Decoration$lerpFrom(a, t);
        break $label0$0;
      }
      return t1;
    },
    lerpTo$2(b, t) {
      var t1;
      $label0$0: {
        if (b instanceof B.BoxDecoration) {
          t1 = A.ShapeDecoration_lerp(this, A.ShapeDecoration_ShapeDecoration$fromBoxDecoration(b), t);
          break $label0$0;
        }
        if (type$.nullable_ShapeDecoration._is(b)) {
          t1 = A.ShapeDecoration_lerp(this, b, t);
          break $label0$0;
        }
        t1 = this.super$Decoration$lerpTo(b, t);
        break $label0$0;
      }
      return t1;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeTypeOfDartObject(_this))
        return false;
      return other instanceof A.ShapeDecoration && J.$eq$(other.color, _this.color) && J.$eq$(other.gradient, _this.gradient) && J.$eq$(other.image, _this.image) && B.listEquals(other.shadows, _this.shadows) && other.shape.$eq(0, _this.shape);
    },
    get$hashCode(_) {
      var _this = this,
        t1 = _this.shadows;
      t1 = t1 == null ? null : B.Object_hashAll(t1);
      return B.Object_hash(_this.color, _this.gradient, _this.image, _this.shape, t1, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    hitTest$3$textDirection(size, position, textDirection) {
      return this.shape.getOuterPath$2$textDirection(new B.Rect(0, 0, 0 + size._dx, 0 + size._dy), textDirection).contains$1(0, position);
    },
    createBoxPainter$1(onChanged) {
      return new A._ShapeDecorationPainter(this, onChanged);
    }
  };
  A._ShapeDecorationPainter.prototype = {
    _precache$2(rect, textDirection) {
      var t1, t2, t3, _this = this;
      if (rect.$eq(0, _this._lastRect) && textDirection == _this._lastTextDirection)
        return;
      if (_this._interiorPaint == null) {
        t1 = _this._shape_decoration$_decoration;
        t1 = t1.color != null || t1.gradient != null;
      } else
        t1 = false;
      if (t1) {
        t1 = $.$get$_renderer().createPaint$0();
        _this._interiorPaint = t1;
        t2 = _this._shape_decoration$_decoration.color;
        if (t2 != null)
          t1.set$color(t2);
      }
      t1 = _this._shape_decoration$_decoration;
      t2 = t1.gradient;
      if (t2 != null) {
        t3 = _this._interiorPaint;
        t3.toString;
        t3.set$shader(t2.createShader$2$textDirection(rect, textDirection));
      }
      t2 = t1.shadows;
      if (t2 != null) {
        if (_this._shadowCount == null) {
          _this._shadowCount = t2.length;
          _this.___ShapeDecorationPainter__shadowPaints_A = B.List_List$of(new B.MappedListIterable(t2, new A._ShapeDecorationPainter__precache_closure(), B._arrayInstanceType(t2)._eval$1("MappedListIterable<1,Paint>")), true, type$.Paint);
        }
        if (t1.shape.get$preferPaintInterior())
          _this.___ShapeDecorationPainter__shadowBounds_A = B.List_List$of(new B.MappedListIterable(t2, new A._ShapeDecorationPainter__precache_closure0(rect), B._arrayInstanceType(t2)._eval$1("MappedListIterable<1,Rect>")), true, type$.Rect);
        else
          _this.___ShapeDecorationPainter__shadowPaths_A = B.List_List$of(new B.MappedListIterable(t2, new A._ShapeDecorationPainter__precache_closure1(_this, rect, textDirection), B._arrayInstanceType(t2)._eval$1("MappedListIterable<1,Path>")), true, type$.Path);
      }
      t2 = t1.shape;
      if (!t2.get$preferPaintInterior())
        t3 = _this._interiorPaint != null || _this._shadowCount != null;
      else
        t3 = false;
      if (t3)
        _this.___ShapeDecorationPainter__outerPath_A = t2.getOuterPath$2$textDirection(rect, textDirection);
      if (t1.image != null)
        _this._innerPath = t2.getInnerPath$2$textDirection(rect, textDirection);
      _this._lastRect = rect;
      _this._lastTextDirection = textDirection;
    },
    _paintShadows$3(canvas, rect, textDirection) {
      var t1, index, t2, t3, _this = this;
      if (_this._shadowCount != null) {
        t1 = _this._shape_decoration$_decoration.shape;
        if (t1.get$preferPaintInterior()) {
          index = 0;
          while (true) {
            t2 = _this._shadowCount;
            t2.toString;
            if (!(index < t2))
              break;
            t2 = _this.___ShapeDecorationPainter__shadowBounds_A;
            t2 === $ && B.throwUnnamedLateFieldNI();
            t2 = t2[index];
            t3 = _this.___ShapeDecorationPainter__shadowPaints_A;
            t3 === $ && B.throwUnnamedLateFieldNI();
            t1.paintInterior$4$textDirection(canvas, t2, t3[index], textDirection);
            ++index;
          }
        } else {
          index = 0;
          while (true) {
            t1 = _this._shadowCount;
            t1.toString;
            if (!(index < t1))
              break;
            t1 = _this.___ShapeDecorationPainter__shadowPaths_A;
            t1 === $ && B.throwUnnamedLateFieldNI();
            t1 = t1[index];
            t2 = _this.___ShapeDecorationPainter__shadowPaints_A;
            t2 === $ && B.throwUnnamedLateFieldNI();
            canvas.drawPath$2(t1, t2[index]);
            ++index;
          }
        }
      }
    },
    _adjustedRectOnOutlinedBorder$1(rect) {
      var side,
        t1 = this._shape_decoration$_decoration,
        t2 = t1.shape;
      if (t2 instanceof B.OutlinedBorder && t1.color != null) {
        side = type$.OutlinedBorder._as(t2).side;
        if (side.color.get$alpha() === 255 && side.style === C.BorderStyle_1)
          return rect.inflate$1(-(side.get$strokeInset() / 2));
      }
      return rect;
    },
    _paintImage$2(canvas, configuration) {
      var t2, _this = this,
        t1 = _this._shape_decoration$_decoration.image;
      if (t1 == null)
        return;
      t2 = _this._imagePainter;
      if (t2 == null) {
        t2 = _this.onChanged;
        t2.toString;
        t2 = _this._imagePainter = t1.createPainter$1(t2);
        t1 = t2;
      } else
        t1 = t2;
      t2 = _this._lastRect;
      t2.toString;
      t1.paint$4(canvas, t2, _this._innerPath, configuration);
    },
    dispose$0() {
      var t1 = this._imagePainter;
      if (t1 != null)
        t1.dispose$0();
      this.super$BoxPainter$dispose();
    },
    paint$3(canvas, offset, configuration) {
      var adjustedRect, _this = this,
        t1 = configuration.size,
        t2 = offset._dx,
        t3 = offset._dy,
        rect = new B.Rect(t2, t3, t2 + t1._dx, t3 + t1._dy),
        textDirection = configuration.textDirection;
      _this._precache$2(rect, textDirection);
      _this._paintShadows$3(canvas, rect, textDirection);
      if (_this._interiorPaint != null) {
        t1 = _this._shape_decoration$_decoration.shape;
        if (t1.get$preferPaintInterior()) {
          adjustedRect = _this._adjustedRectOnOutlinedBorder$1(rect);
          t2 = _this._interiorPaint;
          t2.toString;
          t1.paintInterior$4$textDirection(canvas, adjustedRect, t2, textDirection);
        } else {
          t1 = _this.___ShapeDecorationPainter__outerPath_A;
          t1 === $ && B.throwUnnamedLateFieldNI();
          t2 = _this._interiorPaint;
          t2.toString;
          canvas.drawPath$2(t1, t2);
        }
      }
      _this._paintImage$2(canvas, configuration);
      _this._shape_decoration$_decoration.shape.paint$3$textDirection(canvas, rect, textDirection);
    }
  };
  A.RenderAnimatedSizeState.prototype = {
    _enumToString$0() {
      return "RenderAnimatedSizeState." + this._name;
    }
  };
  A.RenderAnimatedSize.prototype = {
    RenderAnimatedSize$9$alignment$child$clipBehavior$curve$duration$onEnd$reverseDuration$textDirection$vsync(alignment, child, clipBehavior, curve, duration, onEnd, reverseDuration, textDirection, vsync) {
      var _this = this,
        t1 = B.AnimationController$(null, duration, reverseDuration, null, vsync);
      t1.didRegisterListener$0();
      t1.AnimationLocalListenersMixin__listeners.add$1(0, new A.RenderAnimatedSize_closure(_this));
      _this.__RenderAnimatedSize__controller_F !== $ && B.throwUnnamedLateFieldAI();
      _this.__RenderAnimatedSize__controller_F = t1;
      t1 = B.CurvedAnimation$(curve, t1, null);
      _this.__RenderAnimatedSize__animation_F !== $ && B.throwUnnamedLateFieldAI();
      _this.__RenderAnimatedSize__animation_F = t1;
      _this._onEnd = onEnd;
    },
    set$duration(value) {
      var t1 = this.__RenderAnimatedSize__controller_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      if (value.$eq(0, t1.duration))
        return;
      t1.duration = value;
    },
    set$reverseDuration(value) {
      var t1 = this.__RenderAnimatedSize__controller_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      if (value == t1.reverseDuration)
        return;
      t1.reverseDuration = value;
    },
    set$curve(value) {
      var t1 = this.__RenderAnimatedSize__animation_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      if (value === t1.curve)
        return;
      t1.curve = value;
    },
    set$vsync(value) {
      var t1, t2, t3;
      if (value === this._vsync)
        return;
      this._vsync = value;
      t1 = this.__RenderAnimatedSize__controller_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t2 = t1._ticker;
      t2.toString;
      t1 = t1._ticker = value.createTicker$1(t1.get$_animation_controller$_tick());
      t3 = t2._ticker$_future;
      if (t3 != null) {
        t1._ticker$_future = t3;
        t1._startTime = t2._startTime;
        if (!t1._muted)
          t3 = t1._animationId == null;
        else
          t3 = false;
        if (t3)
          t1._animationId = $.SchedulerBinding__instance.scheduleFrameCallback$2$rescheduling(t1.get$_ticker$_tick(), false);
        t2._ticker$_future = null;
        t2.unscheduleTick$0();
      }
      t2.dispose$0();
    },
    set$onEnd(value) {
      return;
    },
    attach$1(owner) {
      var t1, _this = this;
      _this.super$_RenderShiftedBox_RenderBox_RenderObjectWithChildMixin$attach(owner);
      switch (_this._animated_size$_state.index) {
        case 0:
        case 1:
          break;
        case 2:
        case 3:
          _this.markNeedsLayout$0();
          break;
      }
      t1 = _this.__RenderAnimatedSize__controller_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.didRegisterListener$0();
      t1 = t1.AnimationLocalStatusListenersMixin__statusListeners;
      t1._isDirty = true;
      t1._list.push(_this.get$_animationStatusListener());
    },
    detach$0() {
      var t1 = this.__RenderAnimatedSize__controller_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.stop$0();
      t1.removeStatusListener$1(this.get$_animationStatusListener());
      this.super$_RenderShiftedBox_RenderBox_RenderObjectWithChildMixin$detach();
    },
    performLayout$0() {
      var t2, constraints, t3, _this = this,
        t1 = _this.__RenderAnimatedSize__controller_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t2 = t1.__AnimationController__value_A;
      t2 === $ && B.throwUnnamedLateFieldNI();
      _this._animated_size$_lastValue = t2;
      _this.__RenderAnimatedSize__hasVisualOverflow_A = false;
      constraints = type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this));
      t2 = _this.RenderObjectWithChildMixin__child;
      if (t2 != null)
        t3 = constraints.minWidth >= constraints.maxWidth && constraints.minHeight >= constraints.maxHeight;
      else
        t3 = true;
      if (t3) {
        t1.stop$0();
        t1 = _this._sizeTween;
        _this._box$_size = t1.begin = t1.end = new B.Size(B.clampDouble(0, constraints.minWidth, constraints.maxWidth), B.clampDouble(0, constraints.minHeight, constraints.maxHeight));
        _this._animated_size$_state = D.RenderAnimatedSizeState_0;
        t1 = _this.RenderObjectWithChildMixin__child;
        if (t1 != null)
          t1.layout$1(constraints);
        return;
      }
      t2.layout$2$parentUsesSize(constraints, true);
      switch (_this._animated_size$_state.index) {
        case 0:
          t1 = _this._sizeTween;
          t1.begin = t1.end = _this.RenderObjectWithChildMixin__child.get$size();
          _this._animated_size$_state = D.RenderAnimatedSizeState_1;
          break;
        case 1:
          t2 = _this._sizeTween;
          if (!J.$eq$(t2.end, _this.RenderObjectWithChildMixin__child.get$size())) {
            t2.begin = _this.get$size();
            t2.end = _this.RenderObjectWithChildMixin__child.get$size();
            _this._animated_size$_lastValue = 0;
            t1.forward$1$from(0);
            _this._animated_size$_state = D.RenderAnimatedSizeState_2;
          } else {
            t3 = t1.__AnimationController__value_A;
            t3 === $ && B.throwUnnamedLateFieldNI();
            if (t3 === t1.upperBound)
              t2.begin = t2.end = _this.RenderObjectWithChildMixin__child.get$size();
            else {
              t2 = t1._ticker;
              if (!(t2 != null && t2._ticker$_future != null))
                t1.forward$0();
            }
          }
          break;
        case 2:
          t2 = _this._sizeTween;
          if (!J.$eq$(t2.end, _this.RenderObjectWithChildMixin__child.get$size())) {
            t2.begin = t2.end = _this.RenderObjectWithChildMixin__child.get$size();
            _this._animated_size$_lastValue = 0;
            t1.forward$1$from(0);
            _this._animated_size$_state = D.RenderAnimatedSizeState_3;
          } else {
            _this._animated_size$_state = D.RenderAnimatedSizeState_1;
            t2 = t1._ticker;
            if (!(t2 != null && t2._ticker$_future != null))
              t1.forward$0();
          }
          break;
        case 3:
          t2 = _this._sizeTween;
          if (!J.$eq$(t2.end, _this.RenderObjectWithChildMixin__child.get$size())) {
            t2.begin = t2.end = _this.RenderObjectWithChildMixin__child.get$size();
            _this._animated_size$_lastValue = 0;
            t1.forward$1$from(0);
          } else {
            t1.stop$0();
            _this._animated_size$_state = D.RenderAnimatedSizeState_1;
          }
          break;
      }
      t1 = _this._sizeTween;
      t2 = _this.__RenderAnimatedSize__animation_F;
      t2 === $ && B.throwUnnamedLateFieldNI();
      t2 = t1.transform$1(t2.get$value());
      t2.toString;
      _this._box$_size = constraints.constrain$1(t2);
      _this.alignChild$0();
      if (_this.get$size()._dx < t1.end._dx || _this.get$size()._dy < t1.end._dy)
        _this.__RenderAnimatedSize__hasVisualOverflow_A = true;
    },
    computeDryLayout$1(constraints) {
      var t2, childSize, _this = this,
        t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t2 = constraints.minWidth >= constraints.maxWidth && constraints.minHeight >= constraints.maxHeight;
      else
        t2 = true;
      if (t2)
        return new B.Size(B.clampDouble(0, constraints.minWidth, constraints.maxWidth), B.clampDouble(0, constraints.minHeight, constraints.maxHeight));
      childSize = t1._computeIntrinsics$3(C.C__DryLayout, constraints, t1.get$_box$_computeDryLayout());
      switch (_this._animated_size$_state.index) {
        case 0:
          return constraints.constrain$1(childSize);
        case 1:
          if (!J.$eq$(_this._sizeTween.end, childSize))
            return constraints.constrain$1(_this.get$size());
          else {
            t1 = _this.__RenderAnimatedSize__controller_F;
            t1 === $ && B.throwUnnamedLateFieldNI();
            t2 = t1.__AnimationController__value_A;
            t2 === $ && B.throwUnnamedLateFieldNI();
            if (t2 === t1.upperBound)
              return constraints.constrain$1(childSize);
          }
          break;
        case 3:
        case 2:
          if (!J.$eq$(_this._sizeTween.end, childSize))
            return constraints.constrain$1(childSize);
          break;
      }
      t1 = _this.__RenderAnimatedSize__animation_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1 = _this._sizeTween.transform$1(t1.get$value());
      t1.toString;
      return constraints.constrain$1(t1);
    },
    _animationStatusListener$1($status) {
    },
    paint$2(context, offset) {
      var t1, t2, t3, _this = this;
      if (_this.RenderObjectWithChildMixin__child != null) {
        t1 = _this.__RenderAnimatedSize__hasVisualOverflow_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t1 = t1 && _this._animated_size$_clipBehavior !== C.Clip_0;
      } else
        t1 = false;
      t2 = _this._animated_size$_clipRectLayer;
      if (t1) {
        t1 = _this.get$size();
        t3 = _this.__RenderObject__needsCompositing_A;
        t3 === $ && B.throwUnnamedLateFieldNI();
        t2.set$layer(context.pushClipRect$6$clipBehavior$oldLayer(t3, offset, new B.Rect(0, 0, 0 + t1._dx, 0 + t1._dy), B.RenderShiftedBox.prototype.get$paint.call(_this), _this._animated_size$_clipBehavior, t2._layer));
      } else {
        t2.set$layer(null);
        _this.super$RenderShiftedBox$paint(context, offset);
      }
    },
    dispose$0() {
      var t1, _this = this;
      _this._animated_size$_clipRectLayer.set$layer(null);
      t1 = _this.__RenderAnimatedSize__controller_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.__RenderAnimatedSize__animation_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      _this.super$RenderObject$dispose();
    }
  };
  A.TextSelectionPoint.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeTypeOfDartObject(_this))
        return false;
      return other instanceof A.TextSelectionPoint && other.point.$eq(0, _this.point) && other.direction == _this.direction;
    },
    toString$0(_) {
      var t1, _this = this;
      switch (_this.direction) {
        case C.TextDirection_1:
          t1 = _this.point.toString$0(0) + "-ltr";
          break;
        case C.TextDirection_0:
          t1 = _this.point.toString$0(0) + "-rtl";
          break;
        case null:
        case void 0:
          t1 = _this.point.toString$0(0);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    get$hashCode(_) {
      return B.Object_hash(this.point, this.direction, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A.VerticalCaretMovementRun.prototype = {
    get$isValid() {
      var _this = this;
      if (!_this._isValid)
        return false;
      if (_this._editable._editable$_textPainter.computeLineMetrics$0() !== _this._lineMetrics)
        _this._isValid = false;
      return _this._isValid;
    },
    _getTextPositionForLine$1(lineNumber) {
      var newOffset, position, _this = this,
        t1 = _this._positionCache,
        cachedPosition = t1.$index(0, lineNumber);
      if (cachedPosition != null)
        return cachedPosition;
      newOffset = new B.Offset(_this._currentOffset._dx, _this._lineMetrics[lineNumber].get$baseline());
      position = new B.MapEntry(newOffset, _this._editable._editable$_textPainter.getPositionForOffset$1(newOffset), type$.MapEntry_Offset_TextPosition);
      t1.$indexSet(0, lineNumber, position);
      return position;
    },
    get$current() {
      return this._currentTextPosition;
    },
    moveNext$0() {
      var position, _this = this,
        t1 = _this._editable$_currentLine + 1;
      if (t1 >= _this._lineMetrics.length)
        return false;
      position = _this._getTextPositionForLine$1(t1);
      ++_this._editable$_currentLine;
      _this._currentOffset = position.key;
      _this._currentTextPosition = position.value;
      return true;
    },
    movePrevious$0() {
      var position, _this = this,
        t1 = _this._editable$_currentLine;
      if (t1 <= 0)
        return false;
      position = _this._getTextPositionForLine$1(t1 - 1);
      --_this._editable$_currentLine;
      _this._currentOffset = position.key;
      _this._currentTextPosition = position.value;
      return true;
    },
    moveByOffset$1(offset) {
      var t1, _this = this,
        initialOffset = _this._currentOffset;
      if (offset >= 0) {
        for (t1 = initialOffset._dy + offset; _this._currentOffset._dy < t1;)
          if (!_this.moveNext$0())
            break;
      } else
        for (t1 = initialOffset._dy + offset; _this._currentOffset._dy > t1;)
          if (!_this.movePrevious$0())
            break;
      return !initialOffset.$eq(0, _this._currentOffset);
    }
  };
  A.RenderEditable.prototype = {
    dispose$0() {
      var t1, t2, _this = this, _null = null;
      _this._leaderLayerHandler.set$layer(_null);
      t1 = _this._foregroundRenderObject;
      if (t1 != null)
        t1._layerHandle.set$layer(_null);
      _this._foregroundRenderObject = null;
      t1 = _this._backgroundRenderObject;
      if (t1 != null)
        t1._layerHandle.set$layer(_null);
      _this._backgroundRenderObject = null;
      _this._editable$_clipRectLayer.set$layer(_null);
      t1 = _this._cachedBuiltInForegroundPainters;
      if (t1 != null) {
        t1.ChangeNotifier__listeners = $.$get$ChangeNotifier__emptyListeners();
        t1.ChangeNotifier__count = 0;
      }
      t1 = _this._cachedBuiltInPainters;
      if (t1 != null) {
        t1.ChangeNotifier__listeners = $.$get$ChangeNotifier__emptyListeners();
        t1.ChangeNotifier__count = 0;
      }
      t1 = _this._selectionStartInViewport;
      t2 = t1.ChangeNotifier__listeners = $.$get$ChangeNotifier__emptyListeners();
      t1.ChangeNotifier__count = 0;
      t1 = _this._selectionEndInViewport;
      t1.ChangeNotifier__listeners = t2;
      t1.ChangeNotifier__count = 0;
      t1 = _this._autocorrectHighlightPainter;
      t1.ChangeNotifier__listeners = t2;
      t1.ChangeNotifier__count = 0;
      t1 = _this._selectionPainter;
      t1.ChangeNotifier__listeners = t2;
      t1.ChangeNotifier__count = 0;
      t1 = _this.get$_caretPainter();
      t1.ChangeNotifier__listeners = t2;
      t1.ChangeNotifier__count = 0;
      _this._editable$_textPainter.dispose$0();
      t1 = _this._textIntrinsicsCache;
      if (t1 != null)
        t1.dispose$0();
      if (_this._disposeShowCursor) {
        t1 = _this._showCursor;
        t1.ChangeNotifier__listeners = t2;
        t1.ChangeNotifier__count = 0;
        _this._disposeShowCursor = false;
      }
      _this.super$RenderObject$dispose();
    },
    _updateForegroundPainter$1(newPainter) {
      var foregroundRenderObject, _this = this,
        effectivePainter = _this.get$_builtInForegroundPainters(),
        t1 = _this._foregroundRenderObject;
      if (t1 == null) {
        foregroundRenderObject = A._RenderEditableCustomPaint$(effectivePainter);
        _this.adoptChild$1(foregroundRenderObject);
        _this._foregroundRenderObject = foregroundRenderObject;
      } else
        t1.set$painter(effectivePainter);
      _this._editable$_foregroundPainter = newPainter;
    },
    _updatePainter$1(newPainter) {
      var backgroundRenderObject, _this = this,
        effectivePainter = _this.get$_builtInPainters(),
        t1 = _this._backgroundRenderObject;
      if (t1 == null) {
        backgroundRenderObject = A._RenderEditableCustomPaint$(effectivePainter);
        _this.adoptChild$1(backgroundRenderObject);
        _this._backgroundRenderObject = backgroundRenderObject;
      } else
        t1.set$painter(effectivePainter);
      _this._editable$_painter = newPainter;
    },
    get$_caretPainter() {
      var t1, t2,
        value = this.__RenderEditable__caretPainter_FI;
      if (value === $) {
        t1 = $.$get$_renderer().createPaint$0();
        t2 = $.$get$ChangeNotifier__emptyListeners();
        this.__RenderEditable__caretPainter_FI !== $ && B.throwUnnamedLateFieldADI();
        value = this.__RenderEditable__caretPainter_FI = new A._CaretPainter(t1, C.Offset_0_0, t2);
      }
      return value;
    },
    get$_builtInForegroundPainters() {
      var _this = this,
        t1 = _this._cachedBuiltInForegroundPainters;
      if (t1 == null) {
        t1 = B._setArrayType([], type$.JSArray_RenderEditablePainter);
        if (_this._paintCursorOnTop)
          t1.push(_this.get$_caretPainter());
        t1 = _this._cachedBuiltInForegroundPainters = new A._CompositeRenderEditablePainter(t1, $.$get$ChangeNotifier__emptyListeners());
      }
      return t1;
    },
    get$_builtInPainters() {
      var _this = this,
        t1 = _this._cachedBuiltInPainters;
      if (t1 == null) {
        t1 = B._setArrayType([_this._autocorrectHighlightPainter, _this._selectionPainter], type$.JSArray_RenderEditablePainter);
        if (!_this._paintCursorOnTop)
          t1.push(_this.get$_caretPainter());
        t1 = _this._cachedBuiltInPainters = new A._CompositeRenderEditablePainter(t1, $.$get$ChangeNotifier__emptyListeners());
      }
      return t1;
    },
    set$textHeightBehavior(value) {
      return;
    },
    set$textWidthBasis(value) {
      var t1 = this._editable$_textPainter;
      if (t1._textWidthBasis === value)
        return;
      t1.set$textWidthBasis(value);
      this.markNeedsLayout$0();
    },
    set$devicePixelRatio(value) {
      if (this._devicePixelRatio === value)
        return;
      this._devicePixelRatio = value;
      this.markNeedsLayout$0();
    },
    set$obscuringCharacter(value) {
      if (this._obscuringCharacter === value)
        return;
      this._obscuringCharacter = value;
      this.markNeedsLayout$0();
    },
    set$obscureText(value) {
      var _this = this;
      if (_this._obscureText === value)
        return;
      _this._obscureText = value;
      _this._cachedAttributedValue = null;
      _this.markNeedsSemanticsUpdate$0();
    },
    getLineAtOffset$1(position) {
      var t1 = this._editable$_textPainter,
        line = t1._layoutCache.layout._paragraph.getLineBoundary$1(position);
      if (this._obscureText)
        return B.TextSelection$(C.TextAffinity_1, 0, t1.get$plainText().length, false);
      return B.TextSelection$(C.TextAffinity_1, line.start, line.end, false);
    },
    _updateSelectionExtentsVisibility$1(effectiveOffset) {
      var t1, visibleRegion, t2, t3, startOffset, endOffset, _this = this;
      if (!_this._selection.get$isValid()) {
        _this._selectionStartInViewport.set$value(false);
        _this._selectionEndInViewport.set$value(false);
        return;
      }
      t1 = _this.get$size();
      visibleRegion = new B.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
      t1 = _this._editable$_textPainter;
      t2 = _this._selection;
      t3 = _this.__RenderEditable__caretPrototype_A;
      t3 === $ && B.throwUnnamedLateFieldNI();
      startOffset = t1.getOffsetForCaret$2(new B.TextPosition(t2.start, t2.affinity), t3);
      _this._selectionStartInViewport.set$value(visibleRegion.inflate$1(0.5).contains$1(0, startOffset.$add(0, effectiveOffset)));
      t3 = _this._selection;
      endOffset = t1.getOffsetForCaret$2(new B.TextPosition(t3.end, t3.affinity), _this.__RenderEditable__caretPrototype_A);
      _this._selectionEndInViewport.set$value(visibleRegion.inflate$1(0.5).contains$1(0, endOffset.$add(0, effectiveOffset)));
    },
    _setSelection$2(nextSelection, cause) {
      var textLength, t1;
      if (nextSelection.get$isValid()) {
        textLength = this.textSelectionDelegate._widget.controller._change_notifier$_value.text.length;
        nextSelection = nextSelection.copyWith$2$baseOffset$extentOffset(Math.min(nextSelection.baseOffset, textLength), Math.min(nextSelection.extentOffset, textLength));
      }
      t1 = this.textSelectionDelegate._widget.controller._change_notifier$_value.copyWith$1$selection(nextSelection);
      this.textSelectionDelegate.userUpdateTextEditingValue$2(t1, cause);
    },
    markNeedsPaint$0() {
      this.super$RenderObject$markNeedsPaint();
      var t1 = this._foregroundRenderObject;
      if (t1 != null)
        t1.markNeedsPaint$0();
      t1 = this._backgroundRenderObject;
      if (t1 != null)
        t1.markNeedsPaint$0();
    },
    systemFontsDidChange$0() {
      this.super$RelayoutWhenSystemFontsChangeMixin$systemFontsDidChange();
      this._editable$_textPainter.markNeedsLayout$0();
    },
    set$text(value) {
      var _this = this,
        t1 = _this._editable$_textPainter;
      if (J.$eq$(t1._text_painter$_text, value))
        return;
      _this._cachedLineBreakCount = null;
      t1.set$text(value);
      _this._editable$_cachedCombinedSemanticsInfos = _this._cachedAttributedValue = null;
      _this.markNeedsLayout$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    get$_textIntrinsics() {
      var t2, _null = null,
        t1 = this._textIntrinsicsCache;
      if (t1 == null)
        t1 = this._textIntrinsicsCache = B.TextPainter$(_null, _null, _null, _null, _null, C.TextAlign_4, _null, _null, C._LinearTextScaler_1, C.TextWidthBasis_0);
      t2 = this._editable$_textPainter;
      t1.set$text(t2._text_painter$_text);
      t1.set$textAlign(t2._textAlign);
      t1.set$textDirection(t2._text_painter$_textDirection);
      t1.set$textScaler(t2._text_painter$_textScaler);
      t1.set$maxLines(t2._maxLines);
      t1.set$ellipsis(t2._ellipsis);
      t1.set$locale(t2._text_painter$_locale);
      t1.set$strutStyle(t2._strutStyle);
      t1.set$textWidthBasis(t2._textWidthBasis);
      t1.set$textHeightBehavior(t2._text_painter$_textHeightBehavior);
      return t1;
    },
    set$textAlign(value) {
      var t1 = this._editable$_textPainter;
      if (t1._textAlign === value)
        return;
      t1.set$textAlign(value);
      this.markNeedsLayout$0();
    },
    set$textDirection(value) {
      var t1 = this._editable$_textPainter;
      if (t1._text_painter$_textDirection === value)
        return;
      t1.set$textDirection(value);
      this.markNeedsLayout$0();
      this.markNeedsSemanticsUpdate$0();
    },
    set$locale(value) {
      var t1 = this._editable$_textPainter;
      if (J.$eq$(t1._text_painter$_locale, value))
        return;
      t1.set$locale(value);
      this.markNeedsLayout$0();
    },
    set$strutStyle(value) {
      var t1 = this._editable$_textPainter;
      if (J.$eq$(t1._strutStyle, value))
        return;
      t1.set$strutStyle(value);
      this.markNeedsLayout$0();
    },
    set$showCursor(value) {
      var _this = this,
        t1 = _this._showCursor;
      if (t1 === value)
        return;
      if (_this._object$_owner != null)
        t1.removeListener$1(_this.get$_showHideCursor());
      if (_this._disposeShowCursor) {
        t1 = _this._showCursor;
        t1.ChangeNotifier__listeners = $.$get$ChangeNotifier__emptyListeners();
        t1.ChangeNotifier__count = 0;
        _this._disposeShowCursor = false;
      }
      _this._showCursor = value;
      if (_this._object$_owner != null) {
        _this.get$_caretPainter().set$shouldPaint(_this._showCursor._change_notifier$_value);
        _this._showCursor.addListener$1(_this.get$_showHideCursor());
      }
    },
    _showHideCursor$0() {
      this.get$_caretPainter().set$shouldPaint(this._showCursor._change_notifier$_value);
    },
    set$hasFocus(value) {
      if (this._editable$_hasFocus === value)
        return;
      this._editable$_hasFocus = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$forceLine(value) {
      if (this._forceLine)
        return;
      this._forceLine = true;
      this.markNeedsLayout$0();
    },
    set$readOnly(value) {
      if (this._readOnly === value)
        return;
      this._readOnly = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$maxLines(value) {
      var t1, _this = this;
      if (_this._editable$_maxLines === value)
        return;
      _this._editable$_maxLines = value;
      t1 = value === 1 ? 1 : null;
      _this._editable$_textPainter.set$maxLines(t1);
      _this.markNeedsLayout$0();
    },
    set$minLines(value) {
      return;
    },
    set$expands(value) {
      return;
    },
    set$textScaler(value) {
      var t1 = this._editable$_textPainter;
      if (t1._text_painter$_textScaler.$eq(0, value))
        return;
      t1.set$textScaler(value);
      this.markNeedsLayout$0();
    },
    set$selection(value) {
      var _this = this;
      if (_this._selection.$eq(0, value))
        return;
      _this._selection = value;
      _this._selectionPainter.set$highlightedRange(value);
      _this.markNeedsPaint$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    set$offset(value) {
      var _this = this,
        t1 = _this._editable$_offset;
      if (t1 === value)
        return;
      if (_this._object$_owner != null)
        t1.removeListener$1(_this.get$markNeedsPaint());
      _this._editable$_offset = value;
      if (_this._object$_owner != null)
        value.addListener$1(_this.get$markNeedsPaint());
      _this.markNeedsLayout$0();
    },
    set$cursorWidth(value) {
      if (this._cursorWidth === value)
        return;
      this._cursorWidth = value;
      this.markNeedsLayout$0();
    },
    set$cursorHeight(value) {
      return;
    },
    set$paintCursorAboveText(value) {
      var _this = this;
      if (_this._paintCursorOnTop === value)
        return;
      _this._paintCursorOnTop = value;
      _this._cachedBuiltInPainters = _this._cachedBuiltInForegroundPainters = null;
      _this._updateForegroundPainter$1(_this._editable$_foregroundPainter);
      _this._updatePainter$1(_this._editable$_painter);
    },
    set$startHandleLayerLink(value) {
      if (this._editable$_startHandleLayerLink === value)
        return;
      this._editable$_startHandleLayerLink = value;
      this.markNeedsPaint$0();
    },
    set$endHandleLayerLink(value) {
      if (this._editable$_endHandleLayerLink === value)
        return;
      this._editable$_endHandleLayerLink = value;
      this.markNeedsPaint$0();
    },
    set$enableInteractiveSelection(value) {
      var _this = this;
      if (_this._enableInteractiveSelection === value)
        return;
      _this._enableInteractiveSelection = value;
      _this.markNeedsLayout$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    get$selectionEnabled() {
      var t1 = this._enableInteractiveSelection;
      return t1;
    },
    getBoxesForSelection$1(selection) {
      var t1, t2;
      this._computeTextMetricsIfNeeded$0();
      t1 = this._editable$_textPainter.getBoxesForSelection$1(selection);
      t2 = B._arrayInstanceType(t1)._eval$1("MappedListIterable<1,TextBox>");
      return B.List_List$of(new B.MappedListIterable(t1, new A.RenderEditable_getBoxesForSelection_closure(this), t2), true, t2._eval$1("ListIterable.E"));
    },
    describeSemanticsConfiguration$1(config) {
      var t1, t2, collector, buffer, attributes, t3, offset, _i, t4, info, label, t5, _i0, infoAttribute, originalRange, _this = this;
      _this.super$RenderObject$describeSemanticsConfiguration(config);
      t1 = _this._editable$_textPainter;
      t2 = t1._text_painter$_text;
      t2.toString;
      collector = B._setArrayType([], type$.JSArray_InlineSpanSemanticsInformation);
      t2.computeSemanticsInformation$1(collector);
      _this._editable$_semanticsInfo = collector;
      if (C.JSArray_methods.any$1(collector, new A.RenderEditable_describeSemanticsConfiguration_closure()) && B.defaultTargetPlatform() !== C.TargetPlatform_4) {
        config.explicitChildNodes = config._isSemanticBoundary = true;
        return;
      }
      t2 = _this._cachedAttributedValue;
      if (t2 == null)
        if (_this._obscureText) {
          t2 = new B.AttributedString(C.JSString_methods.$mul(_this._obscuringCharacter, t1.get$plainText().length), C.List_empty2);
          _this._cachedAttributedValue = t2;
        } else {
          buffer = new B.StringBuffer("");
          attributes = B._setArrayType([], type$.JSArray_StringAttribute);
          for (t2 = _this._editable$_semanticsInfo, t3 = t2.length, offset = 0, _i = 0, t4 = ""; _i < t2.length; t2.length === t3 || (0, B.throwConcurrentModificationError)(t2), ++_i) {
            info = t2[_i];
            label = info.semanticsLabel;
            if (label == null)
              label = info.text;
            for (t4 = info.stringAttributes, t5 = t4.length, _i0 = 0; _i0 < t4.length; t4.length === t5 || (0, B.throwConcurrentModificationError)(t4), ++_i0) {
              infoAttribute = t4[_i0];
              originalRange = infoAttribute.range;
              attributes.push(infoAttribute.copy$1$range(new B.TextRange(offset + originalRange.start, offset + originalRange.end)));
            }
            t4 = buffer._contents += label;
            offset += label.length;
          }
          t2 = new B.AttributedString(t4.charCodeAt(0) == 0 ? t4 : t4, attributes);
          _this._cachedAttributedValue = t2;
        }
      config._semantics$_attributedValue = t2;
      config._hasBeenAnnotated = true;
      config._setFlag$2(C.SemanticsFlag_1024_isObscured, _this._obscureText);
      config._setFlag$2(C.SemanticsFlag_524288_isMultiline, _this._editable$_maxLines !== 1);
      t2 = t1._text_painter$_textDirection;
      t2.toString;
      config._semantics$_textDirection = t2;
      config._hasBeenAnnotated = true;
      config._setFlag$2(C.SemanticsFlag_32_isFocused, _this._editable$_hasFocus);
      config._setFlag$2(C.SemanticsFlag_16_isTextField, true);
      config._setFlag$2(C.SemanticsFlag_1048576_isReadOnly, _this._readOnly);
      if (_this._editable$_hasFocus && _this.get$selectionEnabled())
        config.set$onSetSelection(_this.get$_handleSetSelection());
      if (_this._editable$_hasFocus && !_this._readOnly)
        config.set$onSetText(_this.get$_handleSetText());
      if (_this.get$selectionEnabled())
        t2 = _this._selection.get$isValid();
      else
        t2 = false;
      if (t2) {
        t2 = _this._selection;
        config._textSelection = t2;
        config._hasBeenAnnotated = true;
        if (t1.getOffsetBefore$1(t2.extentOffset) != null) {
          config.set$onMoveCursorBackwardByWord(_this.get$_handleMoveCursorBackwardByWord());
          config.set$onMoveCursorBackwardByCharacter(_this.get$_handleMoveCursorBackwardByCharacter());
        }
        if (t1.getOffsetAfter$1(_this._selection.extentOffset) != null) {
          config.set$onMoveCursorForwardByWord(_this.get$_handleMoveCursorForwardByWord());
          config.set$onMoveCursorForwardByCharacter(_this.get$_handleMoveCursorForwardByCharacter());
        }
      }
    },
    _handleSetText$1(text) {
      this.textSelectionDelegate.userUpdateTextEditingValue$2(new B.TextEditingValue(text, A.TextSelection$collapsed(C.TextAffinity_1, text.length), C.TextRange_m1_m1), C.SelectionChangedCause_4);
    },
    assembleSemanticsNode$3(node, config, children) {
      var child, newChildCache, t3, t4, t5, t6, t7, currentDirection, ordinal, start, placeholderIndex, childIndex, _i, info, start0, t8, t9, childNode, rects, rect, currentDirection0, t10, t11, t12, t13, currentRect, configuration, ordinal0, paintRect, newChild, it, key, _this = this, _null = null,
        newChildren = B._setArrayType([], type$.JSArray_SemanticsNode),
        t1 = _this._editable$_textPainter,
        t2 = t1._text_painter$_textDirection;
      t2.toString;
      child = _this.ContainerRenderObjectMixin__firstChild;
      newChildCache = B.LinkedHashMap_LinkedHashMap(type$.Key, type$.SemanticsNode);
      t3 = _this._editable$_cachedCombinedSemanticsInfos;
      if (t3 == null) {
        t3 = _this._editable$_semanticsInfo;
        t3.toString;
        t3 = _this._editable$_cachedCombinedSemanticsInfos = B.combineSemanticsInfo(t3);
      }
      for (t4 = t3.length, t5 = type$.BoxConstraints, t6 = B._instanceType(_this)._eval$1("ContainerRenderObjectMixin.1"), t7 = type$.TextParentData, currentDirection = t2, ordinal = 0, start = 0, placeholderIndex = 0, childIndex = 0, _i = 0; _i < t3.length; t3.length === t4 || (0, B.throwConcurrentModificationError)(t3), ++_i, start = start0) {
        info = t3[_i];
        t2 = info.text;
        start0 = start + t2.length;
        t8 = start < start0;
        t9 = t8 ? start : start0;
        t8 = t8 ? start0 : start;
        if (info.isPlaceholder) {
          t2 = "PlaceholderSpanIndexSemanticsTag(" + placeholderIndex + ")";
          while (true) {
            if (children.length > childIndex) {
              t8 = children[childIndex].tags;
              t8 = t8 != null && t8.contains$1(0, new B.PlaceholderSpanIndexSemanticsTag(placeholderIndex, t2));
            } else
              t8 = false;
            if (!t8)
              break;
            childNode = children[childIndex];
            t8 = child.parentData;
            t8.toString;
            t7._as(t8);
            newChildren.push(childNode);
            ++childIndex;
          }
          t2 = child.parentData;
          t2.toString;
          child = t6._as(t2).ContainerParentDataMixin_nextSibling;
          ++placeholderIndex;
        } else {
          rects = t1.getBoxesForSelection$1(new B.TextSelection(start, start0, C.TextAffinity_1, false, t9, t8));
          if (rects.length === 0)
            continue;
          t8 = C.JSArray_methods.get$first(rects);
          rect = new B.Rect(t8.left, t8.top, t8.right, t8.bottom);
          currentDirection0 = C.JSArray_methods.get$first(rects).direction;
          for (t8 = B._arrayInstanceType(rects), t9 = t8._eval$1("SubListIterable<1>"), t10 = new B.SubListIterable(rects, 1, _null, t9), t10.SubListIterable$3(rects, 1, _null, t8._precomputed1), t10 = new B.ListIterator(t10, t10.get$length(0), t9._eval$1("ListIterator<ListIterable.E>")), t9 = t9._eval$1("ListIterable.E"); t10.moveNext$0();) {
            t8 = t10.__internal$_current;
            if (t8 == null)
              t8 = t9._as(t8);
            rect = rect.expandToInclude$1(new B.Rect(t8.left, t8.top, t8.right, t8.bottom));
            currentDirection0 = t8.direction;
          }
          t8 = rect.left;
          t9 = Math.max(0, t8);
          t10 = rect.top;
          t11 = Math.max(0, t10);
          t8 = Math.min(rect.right - t8, t5._as(B.RenderObject.prototype.get$constraints.call(_this)).maxWidth);
          t10 = Math.min(rect.bottom - t10, t5._as(B.RenderObject.prototype.get$constraints.call(_this)).maxHeight);
          t12 = Math.floor(t9) - 4;
          t13 = Math.floor(t11) - 4;
          t8 = Math.ceil(t9 + t8) + 4;
          t10 = Math.ceil(t11 + t10) + 4;
          currentRect = new B.Rect(t12, t13, t8, t10);
          configuration = B.SemanticsConfiguration$();
          ordinal0 = ordinal + 1;
          configuration._sortKey = new B.OrdinalSortKey(ordinal, _null);
          configuration._hasBeenAnnotated = true;
          configuration._semantics$_textDirection = currentDirection;
          t11 = info.semanticsLabel;
          t2 = t11 == null ? t2 : t11;
          configuration._semantics$_attributedLabel = new B.AttributedString(t2, info.stringAttributes);
          $label0$1: {
            break $label0$1;
          }
          t2 = node.parentPaintClipRect;
          if (t2 != null) {
            paintRect = t2.intersect$1(currentRect);
            if (paintRect.left >= paintRect.right || paintRect.top >= paintRect.bottom)
              t2 = !(t12 >= t8 || t13 >= t10);
            else
              t2 = false;
            configuration._setFlag$2(C.SemanticsFlag_8192_isHidden, t2);
          }
          newChild = B._Cell$named("newChild");
          t2 = _this._editable$_cachedChildNodes;
          t8 = t2 == null ? _null : t2.__js_helper$_length !== 0;
          if (t8 === true) {
            t2.toString;
            it = new B.LinkedHashMapKeysIterable(t2, B._instanceType(t2)._eval$1("LinkedHashMapKeysIterable<1>")).get$iterator(0);
            if (!it.moveNext$0())
              B.throwExpression(B.IterableElementError_noElement());
            t2 = t2.remove$1(0, it.get$current());
            t2.toString;
            if (newChild._value !== newChild)
              B.throwExpression(B.LateError$localAI(newChild.__late_helper$_name));
            newChild._value = t2;
          } else {
            key = new B.UniqueKey();
            t2 = B.SemanticsNode$(key, _this._createShowOnScreenFor$1(key));
            if (newChild._value !== newChild)
              B.throwExpression(B.LateError$localAI(newChild.__late_helper$_name));
            newChild._value = t2;
          }
          t2.updateWith$1$config(configuration);
          if (!t2._semantics$_rect.$eq(0, currentRect)) {
            t2._semantics$_rect = currentRect;
            t2._semantics$_markDirty$0();
          }
          t2 = newChild._value;
          if (t2 === newChild)
            B.throwExpression(B.LateError$localNI(newChild.__late_helper$_name));
          t8 = t2.key;
          t8.toString;
          newChildCache.$indexSet(0, t8, t2);
          t2 = newChild._value;
          if (t2 === newChild)
            B.throwExpression(B.LateError$localNI(newChild.__late_helper$_name));
          newChildren.push(t2);
          ordinal = ordinal0;
          currentDirection = currentDirection0;
        }
      }
      _this._editable$_cachedChildNodes = newChildCache;
      node.updateWith$2$childrenInInversePaintOrder$config(newChildren, config);
    },
    _createShowOnScreenFor$1(key) {
      return new A.RenderEditable__createShowOnScreenFor_closure(this, key);
    },
    _handleSetSelection$1(selection) {
      this._setSelection$2(selection, C.SelectionChangedCause_4);
    },
    _handleMoveCursorForwardByCharacter$1(extendSelection) {
      var _this = this,
        extentOffset = _this._editable$_textPainter.getOffsetAfter$1(_this._selection.extentOffset);
      if (extentOffset == null)
        return;
      _this._setSelection$2(B.TextSelection$(C.TextAffinity_1, !extendSelection ? extentOffset : _this._selection.baseOffset, extentOffset, false), C.SelectionChangedCause_4);
    },
    _handleMoveCursorBackwardByCharacter$1(extendSelection) {
      var _this = this,
        extentOffset = _this._editable$_textPainter.getOffsetBefore$1(_this._selection.extentOffset);
      if (extentOffset == null)
        return;
      _this._setSelection$2(B.TextSelection$(C.TextAffinity_1, !extendSelection ? extentOffset : _this._selection.baseOffset, extentOffset, false), C.SelectionChangedCause_4);
    },
    _handleMoveCursorForwardByWord$1(extendSelection) {
      var baseOffset, _this = this,
        t1 = _this._selection.get$extent(),
        nextWord = _this._getNextWord$1(_this._editable$_textPainter._layoutCache.layout._paragraph.getWordBoundary$1(t1).end);
      if (nextWord == null)
        return;
      baseOffset = extendSelection ? _this._selection.baseOffset : nextWord.start;
      _this._setSelection$2(B.TextSelection$(C.TextAffinity_1, baseOffset, nextWord.start, false), C.SelectionChangedCause_4);
    },
    _handleMoveCursorBackwardByWord$1(extendSelection) {
      var baseOffset, _this = this,
        t1 = _this._selection.get$extent(),
        previousWord = _this._getPreviousWord$1(_this._editable$_textPainter._layoutCache.layout._paragraph.getWordBoundary$1(t1).start - 1);
      if (previousWord == null)
        return;
      baseOffset = extendSelection ? _this._selection.baseOffset : previousWord.start;
      _this._setSelection$2(B.TextSelection$(C.TextAffinity_1, baseOffset, previousWord.start, false), C.SelectionChangedCause_4);
    },
    _getNextWord$1(offset) {
      var t1, range, t2;
      for (t1 = this._editable$_textPainter; true;) {
        range = t1._layoutCache.layout._paragraph.getWordBoundary$1(new B.TextPosition(offset, C.TextAffinity_1));
        t2 = range.start;
        if (!(t2 >= 0 && range.end >= 0) || t2 === range.end)
          return null;
        if (!this._onlyWhitespace$1(range))
          return range;
        offset = range.end;
      }
    },
    _getPreviousWord$1(offset) {
      var t1, range, t2;
      for (t1 = this._editable$_textPainter; offset >= 0;) {
        range = t1._layoutCache.layout._paragraph.getWordBoundary$1(new B.TextPosition(offset, C.TextAffinity_1));
        t2 = range.start;
        if (!(t2 >= 0 && range.end >= 0) || t2 === range.end)
          return null;
        if (!this._onlyWhitespace$1(range))
          return range;
        offset = t2 - 1;
      }
      return null;
    },
    _onlyWhitespace$1(range) {
      var i, t1, t2, t3;
      for (i = range.start, t1 = range.end, t2 = this._editable$_textPainter; i < t1; ++i) {
        t3 = t2._text_painter$_text.codeUnitAt$1(0, i);
        t3.toString;
        if (!A.TextLayoutMetrics_isWhitespace(t3))
          return false;
      }
      return true;
    },
    attach$1(owner) {
      var t1, _this = this;
      _this.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin$attach(owner);
      t1 = _this._foregroundRenderObject;
      if (t1 != null)
        t1.attach$1(owner);
      t1 = _this._backgroundRenderObject;
      if (t1 != null)
        t1.attach$1(owner);
      t1 = B.TapGestureRecognizer$(_this, null);
      t1.onTapDown = _this.get$_editable$_handleTapDown();
      t1.onTap = _this.get$_editable$_handleTap();
      _this.__RenderEditable__tap_A = t1;
      t1 = B.LongPressGestureRecognizer$(_this, null);
      t1.onLongPress = _this.get$_editable$_handleLongPress();
      _this.__RenderEditable__longPress_A = t1;
      _this._editable$_offset.addListener$1(_this.get$markNeedsPaint());
      _this.get$_caretPainter().set$shouldPaint(_this._showCursor._change_notifier$_value);
      _this._showCursor.addListener$1(_this.get$_showHideCursor());
    },
    detach$0() {
      var _this = this,
        t1 = _this.__RenderEditable__tap_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1._stopTimer$0();
      t1.super$OneSequenceGestureRecognizer$dispose();
      t1 = _this.__RenderEditable__longPress_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1._stopTimer$0();
      t1.super$OneSequenceGestureRecognizer$dispose();
      _this._editable$_offset.removeListener$1(_this.get$markNeedsPaint());
      _this._showCursor.removeListener$1(_this.get$_showHideCursor());
      _this.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin$detach();
      t1 = _this._foregroundRenderObject;
      if (t1 != null)
        t1.detach$0();
      t1 = _this._backgroundRenderObject;
      if (t1 != null)
        t1.detach$0();
    },
    redepthChildren$0() {
      var _this = this,
        foregroundChild = _this._foregroundRenderObject,
        backgroundChild = _this._backgroundRenderObject;
      if (foregroundChild != null)
        _this.redepthChild$1(foregroundChild);
      if (backgroundChild != null)
        _this.redepthChild$1(backgroundChild);
      _this.super$ContainerRenderObjectMixin$redepthChildren();
    },
    visitChildren$1(visitor) {
      var foregroundChild = this._foregroundRenderObject,
        backgroundChild = this._backgroundRenderObject;
      if (foregroundChild != null)
        visitor.call$1(foregroundChild);
      if (backgroundChild != null)
        visitor.call$1(backgroundChild);
      this.super$ContainerRenderObjectMixin$visitChildren(visitor);
    },
    get$_paintOffset() {
      switch ((this._editable$_maxLines !== 1 ? C.Axis_1 : C.Axis_0).index) {
        case 0:
          var t1 = this._editable$_offset._pixels;
          t1.toString;
          t1 = new B.Offset(-t1, 0);
          break;
        case 1:
          t1 = this._editable$_offset._pixels;
          t1.toString;
          t1 = new B.Offset(0, -t1);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    get$_editable$_viewportExtent() {
      switch ((this._editable$_maxLines !== 1 ? C.Axis_1 : C.Axis_0).index) {
        case 0:
          var t1 = this.get$size()._dx;
          break;
        case 1:
          t1 = this.get$size()._dy;
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    _getMaxScrollExtent$1(contentSize) {
      var t1;
      switch ((this._editable$_maxLines !== 1 ? C.Axis_1 : C.Axis_0).index) {
        case 0:
          t1 = Math.max(0, contentSize._dx - this.get$size()._dx);
          break;
        case 1:
          t1 = Math.max(0, contentSize._dy - this.get$size()._dy);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    getEndpointsForSelection$1(selection) {
      var paintOffset, boxes, t1, t2, t3, caretOffset, t4, start, end, _this = this;
      _this._computeTextMetricsIfNeeded$0();
      paintOffset = _this.get$_paintOffset();
      if (selection.start === selection.end)
        boxes = B._setArrayType([], type$.JSArray_TextBox);
      else {
        t1 = _this._selectionPainter;
        boxes = _this._editable$_textPainter.getBoxesForSelection$3$boxHeightStyle$boxWidthStyle(selection, t1._selectionHeightStyle, t1._selectionWidthStyle);
      }
      if (boxes.length === 0) {
        t1 = _this._editable$_textPainter;
        t2 = selection.get$extent();
        t3 = _this.__RenderEditable__caretPrototype_A;
        t3 === $ && B.throwUnnamedLateFieldNI();
        caretOffset = t1.getOffsetForCaret$2(t2, t3);
        return B._setArrayType([new A.TextSelectionPoint(new B.Offset(0, t1._getOrCreateLayoutTemplate$0().get$height()).$add(0, caretOffset).$add(0, paintOffset), null)], type$.JSArray_TextSelectionPoint);
      } else {
        t1 = C.JSArray_methods.get$first(boxes);
        t1 = t1.direction === C.TextDirection_1 ? t1.left : t1.right;
        t2 = _this._editable$_textPainter;
        t3 = t2._layoutCache;
        t4 = t3.contentWidth;
        t3.layout._paragraph.get$height();
        start = new B.Offset(B.clampDouble(t1, 0, t4), C.JSArray_methods.get$first(boxes).bottom).$add(0, paintOffset);
        t4 = C.JSArray_methods.get$last(boxes);
        t1 = t4.direction === C.TextDirection_1 ? t4.right : t4.left;
        t2 = t2._layoutCache;
        t3 = t2.contentWidth;
        t2.layout._paragraph.get$height();
        end = new B.Offset(B.clampDouble(t1, 0, t3), C.JSArray_methods.get$last(boxes).bottom).$add(0, paintOffset);
        return B._setArrayType([new A.TextSelectionPoint(start, C.JSArray_methods.get$first(boxes).direction), new A.TextSelectionPoint(end, C.JSArray_methods.get$last(boxes).direction)], type$.JSArray_TextSelectionPoint);
      }
    },
    getRectForComposingRange$1(range) {
      var t1, _this = this;
      if (!range.get$isValid() || range.start === range.end)
        return null;
      _this._computeTextMetricsIfNeeded$0();
      t1 = _this._selectionPainter;
      t1 = C.JSArray_methods.fold$2(_this._editable$_textPainter.getBoxesForSelection$3$boxHeightStyle$boxWidthStyle(B.TextSelection$(C.TextAffinity_1, range.start, range.end, false), t1._selectionHeightStyle, t1._selectionWidthStyle), null, new A.RenderEditable_getRectForComposingRange_closure());
      return t1 == null ? null : t1.shift$1(_this.get$_paintOffset());
    },
    getPositionForPoint$1(globalPosition) {
      var _this = this;
      _this._computeTextMetricsIfNeeded$0();
      return _this._editable$_textPainter.getPositionForOffset$1(_this.globalToLocal$1(globalPosition).$sub(0, _this.get$_paintOffset()));
    },
    getLocalRectForCaret$1(caretPosition) {
      var t1, t2, caretRect, t3, caretX, t4, t5, fullHeight, caretHeight, globalOffset, pixelMultiple, _this = this;
      _this._computeTextMetricsIfNeeded$0();
      t1 = _this.__RenderEditable__caretPrototype_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t2 = _this._editable$_textPainter;
      caretRect = t1.shift$1(t2.getOffsetForCaret$2(caretPosition, t1).$add(0, _this.get$_caretPainter()._cursorOffset));
      t3 = caretRect.left;
      caretX = B.clampDouble(t3, 0, Math.max(Math.max(t2._layoutCache.contentWidth + (1 + _this._cursorWidth), _this.get$size()._dx) - (1 + _this._cursorWidth), 0));
      t4 = caretRect.top;
      t3 = caretX + (caretRect.right - t3);
      t5 = t4 + (caretRect.bottom - t4);
      caretRect = new B.Rect(caretX, t4, t3, t5);
      fullHeight = t2.getFullHeightForCaret$2(caretPosition, t1);
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
          t1 = t5 - t4;
          t4 += (fullHeight - t1) / 2;
          caretRect = new B.Rect(caretX, t4, caretX + (t3 - caretX), t4 + t1);
          break;
        case 0:
        case 1:
        case 3:
        case 5:
          caretHeight = t2._getOrCreateLayoutTemplate$0().get$height();
          t1 = t4 - 2 + (fullHeight - caretHeight) / 2;
          caretRect = new B.Rect(caretX, t1, caretX + (t3 - caretX), t1 + caretHeight);
          break;
      }
      caretRect = caretRect.shift$1(_this.get$_paintOffset());
      globalOffset = B.MatrixUtils_transformPoint(_this.getTransformTo$1(null), new B.Offset(caretRect.left, caretRect.top));
      pixelMultiple = 1 / _this._devicePixelRatio;
      t1 = globalOffset._dx;
      t1 = isFinite(t1) ? C.JSNumber_methods.round$0(t1 / pixelMultiple) * pixelMultiple - t1 : 0;
      t2 = globalOffset._dy;
      return caretRect.shift$1(new B.Offset(t1, isFinite(t2) ? C.JSNumber_methods.round$0(t2 / pixelMultiple) * pixelMultiple - t2 : 0));
    },
    computeMinIntrinsicWidth$1(height) {
      var minWidth, t1,
        placeholderDimensions = this.layoutInlineChildren$3(1 / 0, new A.RenderEditable_computeMinIntrinsicWidth_closure(), B.layout_helper_ChildLayoutHelper_getDryBaseline$closure()),
        _0_0 = this._adjustConstraints$0(),
        _0_1 = _0_0._0,
        maxWidth = null,
        _0_2 = _0_0._1;
      maxWidth = _0_2;
      minWidth = _0_1;
      t1 = this.get$_textIntrinsics();
      t1.setPlaceholderDimensions$1(placeholderDimensions);
      t1.layout$2$maxWidth$minWidth(maxWidth, minWidth);
      return t1._layoutCache.layout._paragraph.get$minIntrinsicWidth();
    },
    computeMaxIntrinsicWidth$1(height) {
      var minWidth, t1, _this = this,
        placeholderDimensions = _this.layoutInlineChildren$3(1 / 0, new A.RenderEditable_computeMaxIntrinsicWidth_closure(), B.layout_helper_ChildLayoutHelper_getDryBaseline$closure()),
        _0_0 = _this._adjustConstraints$0(),
        _0_1 = _0_0._0,
        maxWidth = null,
        _0_2 = _0_0._1;
      maxWidth = _0_2;
      minWidth = _0_1;
      t1 = _this.get$_textIntrinsics();
      t1.setPlaceholderDimensions$1(placeholderDimensions);
      t1.layout$2$maxWidth$minWidth(maxWidth, minWidth);
      return t1._layoutCache.layout._paragraph.get$maxIntrinsicWidth() + (1 + _this._cursorWidth);
    },
    _preferredHeight$1(width) {
      var _1_0, maxWidth, _1_2, _this = this,
        maxLines = _this._editable$_maxLines,
        t1 = _this._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height();
      if (maxLines === 1) {
        _1_0 = _this._adjustConstraints$1$maxWidth(width);
        maxWidth = null;
        _1_2 = _1_0._1;
        maxWidth = _1_2;
        t1 = _this.get$_textIntrinsics();
        t1.layout$2$maxWidth$minWidth(maxWidth, _1_0._0);
        return t1._layoutCache.layout._paragraph.get$height();
      }
      return t1 * maxLines;
    },
    computeMinIntrinsicHeight$1(width) {
      return this._computeIntrinsics$3(C._IntrinsicDimension_3, width, this.get$computeMaxIntrinsicHeight());
    },
    computeMaxIntrinsicHeight$1(width) {
      this.get$_textIntrinsics().setPlaceholderDimensions$1(this.layoutInlineChildren$3(width, B.layout_helper_ChildLayoutHelper_dryLayoutChild$closure(), B.layout_helper_ChildLayoutHelper_getDryBaseline$closure()));
      return this._preferredHeight$1(width);
    },
    computeDistanceToActualBaseline$1(baseline) {
      this._computeTextMetricsIfNeeded$0();
      return this._editable$_textPainter._layoutCache.layout.getDistanceToBaseline$1(baseline);
    },
    hitTestSelf$1(position) {
      return true;
    },
    hitTestChildren$2$position(result, position) {
      var spanHit, span,
        effectivePosition = position.$sub(0, this.get$_paintOffset()),
        t1 = this._editable$_textPainter,
        glyph = t1.getClosestGlyphForOffset$1(effectivePosition);
      if (glyph != null && glyph.graphemeClusterLayoutBounds.contains$1(0, effectivePosition)) {
        t1 = t1._text_painter$_text;
        t1.toString;
        spanHit = t1.getSpanForPosition$1(new B.TextPosition(glyph.graphemeClusterCodeUnitRange.start, C.TextAffinity_1));
      } else
        spanHit = null;
      t1 = type$.HitTestTarget._is(spanHit);
      span = t1 ? spanHit : null;
      if (t1) {
        result.add$1(0, new B.HitTestEntry(span, type$.HitTestEntry_HitTestTarget));
        return true;
      }
      return this.hitTestInlineChildren$2(result, effectivePosition);
    },
    handleEvent$2($event, entry) {
    },
    _editable$_handleTapDown$1(details) {
      this._lastTapDownPosition = details.globalPosition;
    },
    _editable$_handleTap$0() {
      var t1 = this._lastTapDownPosition;
      t1.toString;
      this.selectPositionAt$2$cause$from(D.SelectionChangedCause_0, t1);
    },
    _editable$_handleLongPress$0() {
      var t1 = this._lastTapDownPosition;
      t1.toString;
      this.selectWordsInRange$2$cause$from(D.SelectionChangedCause_2, t1);
    },
    selectPositionAt$3$cause$from$to(cause, from, to) {
      var t1, fromPosition, toPosition, baseOffset, extentOffset, _this = this;
      _this._computeTextMetricsIfNeeded$0();
      t1 = _this._editable$_textPainter;
      fromPosition = t1.getPositionForOffset$1(_this.globalToLocal$1(from).$sub(0, _this.get$_paintOffset()));
      toPosition = to == null ? null : t1.getPositionForOffset$1(_this.globalToLocal$1(to).$sub(0, _this.get$_paintOffset()));
      baseOffset = fromPosition.offset;
      extentOffset = toPosition == null ? null : toPosition.offset;
      if (extentOffset == null)
        extentOffset = baseOffset;
      _this._setSelection$2(B.TextSelection$(fromPosition.affinity, baseOffset, extentOffset, false), cause);
    },
    selectPositionAt$2$cause$from(cause, from) {
      return this.selectPositionAt$3$cause$from$to(cause, from, null);
    },
    selectWordsInRange$3$cause$from$to(cause, from, to) {
      var t1, fromPosition, fromWord, toPosition, toWord, isFromWordBeforeToWord, t2, _this = this;
      _this._computeTextMetricsIfNeeded$0();
      t1 = _this._editable$_textPainter;
      fromPosition = t1.getPositionForOffset$1(_this.globalToLocal$1(from).$sub(0, _this.get$_paintOffset()));
      fromWord = _this.getWordAtOffset$1(fromPosition);
      toPosition = to == null ? fromPosition : t1.getPositionForOffset$1(_this.globalToLocal$1(to).$sub(0, _this.get$_paintOffset()));
      toWord = toPosition.$eq(0, fromPosition) ? fromWord : _this.getWordAtOffset$1(toPosition);
      isFromWordBeforeToWord = fromWord.start < toWord.end;
      t1 = isFromWordBeforeToWord ? fromWord.get$base().offset : fromWord.get$extent().offset;
      t2 = isFromWordBeforeToWord ? toWord.get$extent().offset : toWord.get$base().offset;
      _this._setSelection$2(B.TextSelection$(fromWord.affinity, t1, t2, false), cause);
    },
    selectWordsInRange$2$cause$from(cause, from) {
      return this.selectWordsInRange$3$cause$from$to(cause, from, null);
    },
    getWordAtOffset$1(position) {
      var word, effectiveOffset0, previousWord, nextWord, _this = this,
        effectiveOffset = position.offset,
        t1 = _this._editable$_textPainter;
      if (effectiveOffset >= t1.get$plainText().length)
        return A.TextSelection$fromPosition(new B.TextPosition(t1.get$plainText().length, C.TextAffinity_0));
      if (_this._obscureText)
        return B.TextSelection$(C.TextAffinity_1, 0, t1.get$plainText().length, false);
      word = t1._layoutCache.layout._paragraph.getWordBoundary$1(position);
      switch (position.affinity.index) {
        case 0:
          effectiveOffset0 = effectiveOffset - 1;
          break;
        case 1:
          effectiveOffset0 = effectiveOffset;
          break;
        default:
          effectiveOffset0 = null;
      }
      if (effectiveOffset0 > 0 && A.TextLayoutMetrics_isWhitespace(t1.get$plainText().charCodeAt(effectiveOffset0))) {
        t1 = word.start;
        previousWord = _this._getPreviousWord$1(t1);
        switch (B.defaultTargetPlatform().index) {
          case 2:
            if (previousWord == null) {
              nextWord = _this._getNextWord$1(t1);
              if (nextWord == null)
                return A.TextSelection$collapsed(C.TextAffinity_1, effectiveOffset);
              return B.TextSelection$(C.TextAffinity_1, effectiveOffset, nextWord.end, false);
            }
            return B.TextSelection$(C.TextAffinity_1, previousWord.start, effectiveOffset, false);
          case 0:
            if (_this._readOnly) {
              if (previousWord == null)
                return B.TextSelection$(C.TextAffinity_1, effectiveOffset, effectiveOffset + 1, false);
              return B.TextSelection$(C.TextAffinity_1, previousWord.start, effectiveOffset, false);
            }
            break;
          case 1:
          case 4:
          case 3:
          case 5:
            break;
        }
      }
      return B.TextSelection$(C.TextAffinity_1, word.start, word.end, false);
    },
    _adjustConstraints$2$maxWidth$minWidth(maxWidth, minWidth) {
      var availableMaxWidth = Math.max(0, maxWidth - (1 + this._cursorWidth)),
        availableMinWidth = Math.min(minWidth, availableMaxWidth),
        t1 = this._forceLine ? availableMaxWidth : availableMinWidth;
      return new B._Record_2(t1, this._editable$_maxLines !== 1 ? availableMaxWidth : 1 / 0);
    },
    _adjustConstraints$0() {
      return this._adjustConstraints$2$maxWidth$minWidth(1 / 0, 0);
    },
    _adjustConstraints$1$maxWidth(maxWidth) {
      return this._adjustConstraints$2$maxWidth$minWidth(maxWidth, 0);
    },
    _computeTextMetricsIfNeeded$0() {
      var minWidth, _this = this,
        t1 = type$.BoxConstraints,
        t2 = t1._as(B.RenderObject.prototype.get$constraints.call(_this)),
        _0_0 = _this._adjustConstraints$2$maxWidth$minWidth(t1._as(B.RenderObject.prototype.get$constraints.call(_this)).maxWidth, t2.minWidth),
        _0_1 = _0_0._0,
        maxWidth = null,
        _0_2 = _0_0._1;
      maxWidth = _0_2;
      minWidth = _0_1;
      _this._editable$_textPainter.layout$2$maxWidth$minWidth(maxWidth, minWidth);
    },
    _computeCaretPrototype$0() {
      var t1, t2, _this = this;
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
          t1 = _this._cursorWidth;
          t2 = _this._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height();
          _this.__RenderEditable__caretPrototype_A = new B.Rect(0, 0, t1, 0 + (t2 + 2));
          break;
        case 0:
        case 1:
        case 3:
        case 5:
          t1 = _this._cursorWidth;
          t2 = _this._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height();
          _this.__RenderEditable__caretPrototype_A = new B.Rect(0, 2, t1, 2 + (t2 - 4));
          break;
      }
    },
    computeDryLayout$1(constraints) {
      var minWidth, t2, width0, t3, _this = this,
        t1 = constraints.minWidth,
        width = constraints.maxWidth,
        _0_0 = _this._adjustConstraints$2$maxWidth$minWidth(width, t1),
        _0_1 = _0_0._0,
        maxWidth = null,
        _0_2 = _0_0._1;
      maxWidth = _0_2;
      minWidth = _0_1;
      t2 = _this.get$_textIntrinsics();
      t2.setPlaceholderDimensions$1(_this.layoutInlineChildren$3(width, B.layout_helper_ChildLayoutHelper_dryLayoutChild$closure(), B.layout_helper_ChildLayoutHelper_getDryBaseline$closure()));
      t2.layout$2$maxWidth$minWidth(maxWidth, minWidth);
      if (_this._forceLine)
        width0 = width;
      else {
        t2 = _this.get$_textIntrinsics()._layoutCache;
        t3 = t2.contentWidth;
        t2.layout._paragraph.get$height();
        width0 = B.clampDouble(t3 + (1 + _this._cursorWidth), t1, width);
      }
      return new B.Size(width0, B.clampDouble(_this._preferredHeight$1(width), constraints.minHeight, constraints.maxHeight));
    },
    computeDryBaseline$2(constraints, baseline) {
      var minWidth, t2, _this = this,
        t1 = constraints.maxWidth,
        _0_0 = _this._adjustConstraints$2$maxWidth$minWidth(t1, constraints.minWidth),
        _0_1 = _0_0._0,
        maxWidth = null,
        _0_2 = _0_0._1;
      maxWidth = _0_2;
      minWidth = _0_1;
      t2 = _this.get$_textIntrinsics();
      t2.setPlaceholderDimensions$1(_this.layoutInlineChildren$3(t1, B.layout_helper_ChildLayoutHelper_dryLayoutChild$closure(), B.layout_helper_ChildLayoutHelper_getDryBaseline$closure()));
      t2.layout$2$maxWidth$minWidth(maxWidth, minWidth);
      return _this.get$_textIntrinsics()._layoutCache.layout.getDistanceToBaseline$1(baseline);
    },
    performLayout$0() {
      var t1, _0_0, _0_1, maxWidth, _0_2, minWidth, t2, t3, _1_0, contentSize, painterConstraints, _this = this,
        constraints = type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this)),
        width = constraints.maxWidth;
      _this._editable$_placeholderDimensions = _this.layoutInlineChildren$3(width, B.layout_helper_ChildLayoutHelper_layoutChild$closure(), B.layout_helper_ChildLayoutHelper_getBaseline$closure());
      t1 = constraints.minWidth;
      _0_0 = _this._adjustConstraints$2$maxWidth$minWidth(width, t1);
      _0_1 = _0_0._0;
      maxWidth = null;
      _0_2 = _0_0._1;
      maxWidth = _0_2;
      minWidth = _0_1;
      t2 = _this._editable$_textPainter;
      t2.setPlaceholderDimensions$1(_this._editable$_placeholderDimensions);
      t2.layout$2$maxWidth$minWidth(maxWidth, minWidth);
      t3 = t2.get$inlinePlaceholderBoxes();
      t3.toString;
      _this.positionInlineChildren$1(t3);
      _this._computeCaretPrototype$0();
      width = _this._forceLine ? width : B.clampDouble(t2._layoutCache.contentWidth + (1 + _this._cursorWidth), t1, width);
      _1_0 = _this._editable$_maxLines;
      $label0$0: {
        if (1 === _1_0) {
          t1 = t2._layoutCache.layout._paragraph.get$height();
          break $label0$0;
        }
        t1 = t2._layoutCache.layout._paragraph.get$height();
        t3 = t2._getOrCreateLayoutTemplate$0().get$height();
        t1 = B.clampDouble(t1, t3 * _1_0, t2._getOrCreateLayoutTemplate$0().get$height() * _1_0);
        break $label0$0;
      }
      _this._box$_size = new B.Size(width, B.clampDouble(t1, constraints.minHeight, constraints.maxHeight));
      t2 = t2._layoutCache;
      contentSize = new B.Size(t2.contentWidth + (1 + _this._cursorWidth), t2.layout._paragraph.get$height());
      painterConstraints = B.BoxConstraints$tight(contentSize);
      t2 = _this._foregroundRenderObject;
      if (t2 != null)
        t2.layout$1(painterConstraints);
      t1 = _this._backgroundRenderObject;
      if (t1 != null)
        t1.layout$1(painterConstraints);
      _this._editable$_maxScrollExtent = _this._getMaxScrollExtent$1(contentSize);
      _this._editable$_offset.applyViewportDimension$1(_this.get$_editable$_viewportExtent());
      _this._editable$_offset.applyContentDimensions$2(0, _this._editable$_maxScrollExtent);
    },
    calculateBoundedFloatingCursorOffset$2$shouldResetOrigin(rawCursorOffset, shouldResetOrigin) {
      var deltaPosition, currentX, currentY, adjustedOffset, _this = this,
        t1 = _this._editable$_textPainter,
        bottomBound = Math.min(_this.get$size()._dy, t1._layoutCache.layout._paragraph.get$height()) - t1._getOrCreateLayoutTemplate$0().get$height() + 5,
        rightBound = Math.min(_this.get$size()._dx, t1._layoutCache.contentWidth) + 4,
        boundingRects = new B.Rect(-4, -4, rightBound, bottomBound);
      if (shouldResetOrigin != null)
        _this._shouldResetOrigin = shouldResetOrigin;
      if (!_this._shouldResetOrigin)
        return A.RenderEditable__calculateAdjustedCursorOffset(rawCursorOffset, boundingRects);
      t1 = _this._previousOffset;
      deltaPosition = t1 != null ? rawCursorOffset.$sub(0, t1) : C.Offset_0_0;
      if (_this._resetOriginOnLeft && deltaPosition._dx > 0) {
        _this._relativeOrigin = new B.Offset(rawCursorOffset._dx - -4, _this._relativeOrigin._dy);
        _this._resetOriginOnLeft = false;
      } else if (_this._resetOriginOnRight && deltaPosition._dx < 0) {
        _this._relativeOrigin = new B.Offset(rawCursorOffset._dx - rightBound, _this._relativeOrigin._dy);
        _this._resetOriginOnRight = false;
      }
      if (_this._resetOriginOnTop && deltaPosition._dy > 0) {
        _this._relativeOrigin = new B.Offset(_this._relativeOrigin._dx, rawCursorOffset._dy - -4);
        _this._resetOriginOnTop = false;
      } else if (_this._resetOriginOnBottom && deltaPosition._dy < 0) {
        _this._relativeOrigin = new B.Offset(_this._relativeOrigin._dx, rawCursorOffset._dy - bottomBound);
        _this._resetOriginOnBottom = false;
      }
      t1 = _this._relativeOrigin;
      currentX = rawCursorOffset._dx - t1._dx;
      currentY = rawCursorOffset._dy - t1._dy;
      adjustedOffset = A.RenderEditable__calculateAdjustedCursorOffset(new B.Offset(currentX, currentY), boundingRects);
      if (currentX < -4 && deltaPosition._dx < 0)
        _this._resetOriginOnLeft = true;
      else if (currentX > rightBound && deltaPosition._dx > 0)
        _this._resetOriginOnRight = true;
      if (currentY < -4 && deltaPosition._dy < 0)
        _this._resetOriginOnTop = true;
      else if (currentY > bottomBound && deltaPosition._dy > 0)
        _this._resetOriginOnBottom = true;
      _this._previousOffset = rawCursorOffset;
      return adjustedOffset;
    },
    calculateBoundedFloatingCursorOffset$1(rawCursorOffset) {
      return this.calculateBoundedFloatingCursorOffset$2$shouldResetOrigin(rawCursorOffset, null);
    },
    setFloatingCursor$4$resetLerpValue(state, boundedOffset, lastTextPosition, resetLerpValue) {
      var sizeAdjustment, t2, _this = this,
        t1 = state === C.FloatingCursorDragState_2;
      if (t1) {
        _this._relativeOrigin = C.Offset_0_0;
        _this._previousOffset = null;
        _this._shouldResetOrigin = true;
        _this._resetOriginOnRight = _this._resetOriginOnTop = _this._resetOriginOnBottom = false;
      }
      t1 = !t1;
      _this._floatingCursorOn = t1;
      _this._resetFloatingCursorAnimationValue = resetLerpValue;
      if (t1) {
        _this.__RenderEditable__floatingCursorTextPosition_A = lastTextPosition;
        if (resetLerpValue != null) {
          t1 = B.EdgeInsets_lerp(D.EdgeInsets_V1Q, C.EdgeInsets_0_0_0_0, resetLerpValue);
          t1.toString;
          sizeAdjustment = t1;
        } else
          sizeAdjustment = D.EdgeInsets_V1Q;
        t1 = _this.get$_caretPainter();
        t2 = _this.__RenderEditable__caretPrototype_A;
        t2 === $ && B.throwUnnamedLateFieldNI();
        t1.set$floatingCursorRect(sizeAdjustment.inflateRect$1(t2).shift$1(boundedOffset));
      } else
        _this.get$_caretPainter().set$floatingCursorRect(null);
      _this.get$_caretPainter().showRegularCaret = _this._resetFloatingCursorAnimationValue == null;
    },
    setFloatingCursor$3(state, boundedOffset, lastTextPosition) {
      return this.setFloatingCursor$4$resetLerpValue(state, boundedOffset, lastTextPosition, null);
    },
    _lineNumberFor$2(startPosition, metrics) {
      var t1, t2, _i, t3, lineMetrics,
        offset = this._editable$_textPainter.getOffsetForCaret$2(startPosition, C.Rect_0_0_0_0);
      for (t1 = metrics.length, t2 = offset._dy, _i = 0; t3 = metrics.length, _i < t3; metrics.length === t1 || (0, B.throwConcurrentModificationError)(metrics), ++_i) {
        lineMetrics = metrics[_i];
        if (lineMetrics.get$baseline() > t2)
          return new B.MapEntry(lineMetrics.get$lineNumber(), new B.Offset(offset._dx, lineMetrics.get$baseline()), type$.MapEntry_int_Offset);
      }
      t1 = Math.max(0, t3 - 1);
      t2 = t3 !== 0 ? C.JSArray_methods.get$last(metrics).get$baseline() + C.JSArray_methods.get$last(metrics).get$descent() : 0;
      return new B.MapEntry(t1, new B.Offset(offset._dx, t2), type$.MapEntry_int_Offset);
    },
    _paintContents$2(context, offset) {
      var foregroundChild, backgroundChild, _this = this,
        effectiveOffset = offset.$add(0, _this.get$_paintOffset()),
        t1 = _this._floatingCursorOn;
      if (!t1)
        _this._updateSelectionExtentsVisibility$1(effectiveOffset);
      foregroundChild = _this._foregroundRenderObject;
      backgroundChild = _this._backgroundRenderObject;
      if (backgroundChild != null)
        context.paintChild$2(backgroundChild, offset);
      _this._editable$_textPainter.paint$2(context.get$canvas(), effectiveOffset);
      _this.paintInlineChildren$2(context, effectiveOffset);
      if (foregroundChild != null)
        context.paintChild$2(foregroundChild, offset);
    },
    applyPaintTransform$2(child, transform) {
      if (child === this._foregroundRenderObject || child === this._backgroundRenderObject)
        return;
      this.defaultApplyPaintTransform$2(child, transform);
    },
    paint$2(context, offset) {
      var t1, t2, t3, selection, startPoint, endPoint, _this = this;
      _this._computeTextMetricsIfNeeded$0();
      t1 = (_this._editable$_maxScrollExtent > 0 || !_this.get$_paintOffset().$eq(0, C.Offset_0_0)) && _this._editable$_clipBehavior !== C.Clip_0;
      t2 = _this._editable$_clipRectLayer;
      if (t1) {
        t1 = _this.__RenderObject__needsCompositing_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t3 = _this.get$size();
        t2.set$layer(context.pushClipRect$6$clipBehavior$oldLayer(t1, offset, new B.Rect(0, 0, 0 + t3._dx, 0 + t3._dy), _this.get$_paintContents(), _this._editable$_clipBehavior, t2._layer));
      } else {
        t2.set$layer(null);
        _this._paintContents$2(context, offset);
      }
      selection = _this._selection;
      t1 = selection.get$isValid();
      if (t1) {
        t1 = _this.getEndpointsForSelection$1(selection);
        startPoint = t1[0].point;
        startPoint = new B.Offset(B.clampDouble(startPoint._dx, 0, _this.get$size()._dx), B.clampDouble(startPoint._dy, 0, _this.get$size()._dy));
        t2 = _this._leaderLayerHandler;
        t2.set$layer(B.LeaderLayer$(_this._editable$_startHandleLayerLink, startPoint.$add(0, offset)));
        t2 = t2._layer;
        t2.toString;
        context.pushLayer$3(t2, B.RenderObject.prototype.get$paint.call(_this), C.Offset_0_0);
        if (t1.length === 2) {
          endPoint = t1[1].point;
          t1 = B.clampDouble(endPoint._dx, 0, _this.get$size()._dx);
          t2 = B.clampDouble(endPoint._dy, 0, _this.get$size()._dy);
          context.pushLayer$3(B.LeaderLayer$(_this._editable$_endHandleLayerLink, new B.Offset(t1, t2).$add(0, offset)), B.RenderObject.prototype.get$paint.call(_this), C.Offset_0_0);
        } else {
          t1 = _this._selection;
          if (t1.start === t1.end)
            context.pushLayer$3(B.LeaderLayer$(_this._editable$_endHandleLayerLink, startPoint.$add(0, offset)), B.RenderObject.prototype.get$paint.call(_this), C.Offset_0_0);
        }
      }
    },
    describeApproximatePaintClip$1(child) {
      var t1, _this = this;
      switch (_this._editable$_clipBehavior.index) {
        case 0:
          return null;
        case 1:
        case 2:
        case 3:
          if (_this._editable$_maxScrollExtent > 0 || !_this.get$_paintOffset().$eq(0, C.Offset_0_0)) {
            t1 = _this.get$size();
            t1 = new B.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
          } else
            t1 = null;
          return t1;
      }
    },
    debugDescribeChildren$0() {
      var t1 = B._setArrayType([], type$.JSArray_DiagnosticsNode),
        t2 = this._editable$_textPainter._text_painter$_text;
      if (t2 != null)
        t1.push(B.DiagnosticableTreeNode$("text", C.DiagnosticsTreeStyle_4, t2));
      return t1;
    }
  };
  A._RenderEditableCustomPaint.prototype = {
    get$parent() {
      return type$.nullable_RenderEditable._as(B.RenderObject.prototype.get$parent.call(this));
    },
    get$isRepaintBoundary() {
      return true;
    },
    get$sizedByParent() {
      return true;
    },
    set$painter(newValue) {
      var t2, _this = this,
        t1 = _this._editable$_painter;
      if (newValue === t1)
        return;
      _this._editable$_painter = newValue;
      t2 = newValue.shouldRepaint$1(t1);
      if (t2)
        _this.markNeedsPaint$0();
      if (_this._object$_owner != null) {
        t2 = _this.get$markNeedsPaint();
        t1.removeListener$1(t2);
        newValue.addListener$1(t2);
      }
    },
    paint$2(context, offset) {
      var $parent = type$.nullable_RenderEditable._as(B.RenderObject.prototype.get$parent.call(this)),
        painter = this._editable$_painter;
      if ($parent != null) {
        $parent._computeTextMetricsIfNeeded$0();
        painter.paint$3(context.get$canvas(), this.get$size(), $parent);
      }
    },
    attach$1(owner) {
      this.super$RenderObject$attach(owner);
      this._editable$_painter.addListener$1(this.get$markNeedsPaint());
    },
    detach$0() {
      this._editable$_painter.removeListener$1(this.get$markNeedsPaint());
      this.super$RenderObject$detach();
    },
    computeDryLayout$1(constraints) {
      return new B.Size(B.clampDouble(1 / 0, constraints.minWidth, constraints.maxWidth), B.clampDouble(1 / 0, constraints.minHeight, constraints.maxHeight));
    }
  };
  A.RenderEditablePainter.prototype = {};
  A._TextHighlightPainter.prototype = {
    set$highlightColor(newValue) {
      if (J.$eq$(newValue, this._editable$_highlightColor))
        return;
      this._editable$_highlightColor = newValue;
      this.notifyListeners$0();
    },
    set$highlightedRange(newValue) {
      if (J.$eq$(newValue, this._highlightedRange))
        return;
      this._highlightedRange = newValue;
      this.notifyListeners$0();
    },
    set$selectionHeightStyle(value) {
      if (this._selectionHeightStyle === value)
        return;
      this._selectionHeightStyle = value;
      this.notifyListeners$0();
    },
    set$selectionWidthStyle(value) {
      if (this._selectionWidthStyle === value)
        return;
      this._selectionWidthStyle = value;
      this.notifyListeners$0();
    },
    paint$3(canvas, size, renderEditable) {
      var t1, textPainter, boxes, t2, _i, box, t3, t4, _this = this,
        range = _this._highlightedRange,
        color = _this._editable$_highlightColor;
      if (range == null || color == null || range.start === range.end)
        return;
      t1 = _this.highlightPaint;
      t1.set$color(color);
      textPainter = renderEditable._editable$_textPainter;
      boxes = textPainter.getBoxesForSelection$3$boxHeightStyle$boxWidthStyle(B.TextSelection$(C.TextAffinity_1, range.start, range.end, false), _this._selectionHeightStyle, _this._selectionWidthStyle);
      for (t2 = boxes.length, _i = 0; _i < boxes.length; boxes.length === t2 || (0, B.throwConcurrentModificationError)(boxes), ++_i) {
        box = boxes[_i];
        t3 = new B.Rect(box.left, box.top, box.right, box.bottom).shift$1(renderEditable.get$_paintOffset());
        t4 = textPainter._layoutCache;
        canvas.drawRect$2(t3.intersect$1(new B.Rect(0, 0, 0 + t4.contentWidth, 0 + t4.layout._paragraph.get$height())), t1);
      }
    },
    shouldRepaint$1(oldDelegate) {
      var _this = this;
      if (oldDelegate === _this)
        return false;
      return !(oldDelegate instanceof A._TextHighlightPainter) || !J.$eq$(oldDelegate._editable$_highlightColor, _this._editable$_highlightColor) || !J.$eq$(oldDelegate._highlightedRange, _this._highlightedRange) || oldDelegate._selectionHeightStyle !== _this._selectionHeightStyle || oldDelegate._selectionWidthStyle !== _this._selectionWidthStyle;
    }
  };
  A._CaretPainter.prototype = {
    set$shouldPaint(value) {
      if (this._shouldPaint === value)
        return;
      this._shouldPaint = value;
      this.notifyListeners$0();
    },
    set$caretColor(value) {
      var t2,
        t1 = this._caretColor;
      t1 = t1 == null ? null : t1.toARGB32$0();
      t2 = value.toARGB32$0();
      if (t1 === t2)
        return;
      this._caretColor = value;
      this.notifyListeners$0();
    },
    set$cursorRadius(value) {
      if (J.$eq$(this._cursorRadius, value))
        return;
      this._cursorRadius = value;
      this.notifyListeners$0();
    },
    set$cursorOffset(value) {
      if (this._cursorOffset.$eq(0, value))
        return;
      this._cursorOffset = value;
      this.notifyListeners$0();
    },
    set$backgroundCursorColor(value) {
      var t2, _this = this,
        t1 = _this._backgroundCursorColor;
      t1 = t1 == null ? null : t1._effectiveColor.toARGB32$0();
      t2 = value._effectiveColor.toARGB32$0();
      if (t1 === t2)
        return;
      _this._backgroundCursorColor = value;
      if (_this.showRegularCaret)
        _this.notifyListeners$0();
    },
    set$floatingCursorRect(value) {
      if (J.$eq$(this._floatingCursorRect, value))
        return;
      this._floatingCursorRect = value;
      this.notifyListeners$0();
    },
    paintRegularCursor$4(canvas, renderEditable, caretColor, textPosition) {
      var t1, radius, _this = this,
        integralRect = renderEditable.getLocalRectForCaret$1(textPosition);
      if (_this._shouldPaint) {
        t1 = _this._floatingCursorRect;
        if (t1 != null)
          if (t1.get$center().$sub(0, integralRect.get$center()).get$distanceSquared() < 225)
            return;
        radius = _this._cursorRadius;
        t1 = _this.caretPaint;
        t1.set$color(caretColor);
        if (radius == null)
          canvas.drawRect$2(integralRect, t1);
        else
          canvas.drawRRect$2(B.RRect$fromRectAndRadius(integralRect, radius), t1);
      }
    },
    paint$3(canvas, size, renderEditable) {
      var floatingCursorRect, t1, caretColor, caretTextPosition, t2, floatingCursorColor, value, result, _this = this,
        selection = renderEditable._selection;
      if (selection.start !== selection.end || !selection.get$isValid())
        return;
      floatingCursorRect = _this._floatingCursorRect;
      t1 = floatingCursorRect == null;
      if (t1)
        caretColor = _this._caretColor;
      else
        caretColor = _this.showRegularCaret ? _this._backgroundCursorColor : null;
      if (t1)
        caretTextPosition = selection.get$extent();
      else {
        t2 = renderEditable.__RenderEditable__floatingCursorTextPosition_A;
        t2 === $ && B.throwUnnamedLateFieldNI();
        caretTextPosition = t2;
      }
      if (caretColor != null)
        _this.paintRegularCursor$4(canvas, renderEditable, caretColor, caretTextPosition);
      t2 = _this._caretColor;
      floatingCursorColor = t2 == null ? null : B.Color$fromARGB(191, t2.toARGB32$0() >>> 16 & 255, t2.toARGB32$0() >>> 8 & 255, t2.toARGB32$0() & 255);
      if (t1 || floatingCursorColor == null || !_this._shouldPaint)
        return;
      t1 = B.RRect$fromRectAndRadius(floatingCursorRect, D.Radius_1_1);
      value = _this.___CaretPainter_floatingCursorPaint_FI;
      if (value === $) {
        result = $.$get$_renderer().createPaint$0();
        _this.___CaretPainter_floatingCursorPaint_FI !== $ && B.throwUnnamedLateFieldADI();
        _this.___CaretPainter_floatingCursorPaint_FI = result;
        value = result;
      }
      value.set$color(floatingCursorColor);
      canvas.drawRRect$2(t1, value);
    },
    shouldRepaint$1(oldDelegate) {
      var _this = this;
      if (_this === oldDelegate)
        return false;
      return !(oldDelegate instanceof A._CaretPainter) || oldDelegate._shouldPaint !== _this._shouldPaint || oldDelegate.showRegularCaret !== _this.showRegularCaret || !J.$eq$(oldDelegate._caretColor, _this._caretColor) || !J.$eq$(oldDelegate._cursorRadius, _this._cursorRadius) || !oldDelegate._cursorOffset.$eq(0, _this._cursorOffset) || !J.$eq$(oldDelegate._backgroundCursorColor, _this._backgroundCursorColor) || !J.$eq$(oldDelegate._floatingCursorRect, _this._floatingCursorRect);
    }
  };
  A._CompositeRenderEditablePainter.prototype = {
    addListener$1(listener) {
      var t1, t2, _i;
      for (t1 = this.painters, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].addListener$1(listener);
    },
    removeListener$1(listener) {
      var t1, t2, _i;
      for (t1 = this.painters, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].removeListener$1(listener);
    },
    paint$3(canvas, size, renderEditable) {
      var t1, t2, _i;
      for (t1 = this.painters, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].paint$3(canvas, size, renderEditable);
    },
    shouldRepaint$1(oldDelegate) {
      var t1, t2, oldPainters, t3, newPainters, t4;
      if (oldDelegate === this)
        return false;
      if (!(oldDelegate instanceof A._CompositeRenderEditablePainter) || oldDelegate.painters.length !== this.painters.length)
        return true;
      t1 = oldDelegate.painters;
      t2 = B._arrayInstanceType(t1);
      oldPainters = new J.ArrayIterator(t1, t1.length, t2._eval$1("ArrayIterator<1>"));
      t1 = this.painters;
      t3 = B._arrayInstanceType(t1);
      newPainters = new J.ArrayIterator(t1, t1.length, t3._eval$1("ArrayIterator<1>"));
      t1 = t3._precomputed1;
      t2 = t2._precomputed1;
      while (true) {
        if (!(oldPainters.moveNext$0() && newPainters.moveNext$0()))
          break;
        t3 = newPainters._current;
        if (t3 == null)
          t3 = t1._as(t3);
        t4 = oldPainters._current;
        if (t3.shouldRepaint$1(t4 == null ? t2._as(t4) : t4))
          return true;
      }
      return false;
    }
  };
  A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin.prototype = {
    attach$1(owner) {
      this.super$RenderObject$attach(owner);
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.add$1(0, this.get$_scheduleSystemFontsUpdate());
    },
    detach$0() {
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.remove$1(0, this.get$_scheduleSystemFontsUpdate());
      this.super$RenderObject$detach();
    }
  };
  A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin.prototype = {
    attach$1(owner) {
      var child, t1, t2;
      this.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.TextParentData; child != null;) {
        child.attach$1(owner);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0() {
      var child, t1, t2;
      this.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin$detach();
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.TextParentData; child != null;) {
        child.detach$0();
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    }
  };
  A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin_RenderInlineChildrenContainerDefaults.prototype = {};
  A.LayerLink.prototype = {
    _registerLeader$1(leader) {
      this._leader = leader;
    },
    _unregisterLeader$1(leader) {
      if (this._leader === leader)
        this._leader = null;
    },
    toString$0(_) {
      var t1 = B.shortHash(this),
        t2 = this._leader != null ? "<linked>" : "<dangling>";
      return "<optimized out>#" + t1 + "(" + t2 + ")";
    }
  };
  A.FollowerLayer.prototype = {
    _transformOffset$1(localPosition) {
      var t1, vector, t2, t3, _this = this;
      if (_this._inverseDirty) {
        t1 = _this.getLastTransform$0();
        t1.toString;
        _this._invertedTransform = B.Matrix4_tryInvert(t1);
        _this._inverseDirty = false;
      }
      if (_this._invertedTransform == null)
        return null;
      vector = new B.Vector4(new Float64Array(4));
      vector.setValues$4(localPosition._dx, localPosition._dy, 0, 1);
      t1 = _this._invertedTransform.transform$1(vector)._v4storage;
      t2 = t1[0];
      t3 = _this.linkedOffset;
      return new B.Offset(t2 - t3._dx, t1[1] - t3._dy);
    },
    findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst, $S) {
      var transformedOffset;
      if (this.link._leader == null)
        return false;
      transformedOffset = this._transformOffset$1(localPosition);
      if (transformedOffset == null)
        return false;
      return this.super$ContainerLayer$findAnnotations(result, transformedOffset, true, $S);
    },
    getLastTransform$0() {
      var t1, result;
      if (this._layer$_lastTransform == null)
        return null;
      t1 = this._lastOffset;
      result = B.Matrix4_Matrix4$translationValues(-t1._dx, -t1._dy, 0);
      t1 = this._layer$_lastTransform;
      t1.toString;
      result.multiply$1(t1);
      return result;
    },
    _establishTransform$0() {
      var leader, t1, forwardLayers, inverseLayers, forwardTransform, inverseTransform, _this = this;
      _this._layer$_lastTransform = null;
      leader = _this.link._leader;
      if (leader == null)
        return;
      t1 = type$.JSArray_ContainerLayer;
      forwardLayers = B._setArrayType([leader], t1);
      inverseLayers = B._setArrayType([_this], t1);
      A.FollowerLayer__pathsToCommonAncestor(leader, _this, forwardLayers, inverseLayers);
      forwardTransform = A.FollowerLayer__collectTransformForLayerChain(forwardLayers);
      leader.applyTransform$2(null, forwardTransform);
      t1 = _this.linkedOffset;
      forwardTransform.translate$2(t1._dx, t1._dy);
      inverseTransform = A.FollowerLayer__collectTransformForLayerChain(inverseLayers);
      if (inverseTransform.copyInverse$1(inverseTransform) === 0)
        return;
      inverseTransform.multiply$1(forwardTransform);
      _this._layer$_lastTransform = inverseTransform;
      _this._inverseDirty = true;
    },
    get$alwaysNeedsAddToScene() {
      return true;
    },
    addToScene$1(builder) {
      var t2, _this = this,
        t1 = _this.link._leader;
      if (t1 == null) {
        _this._lastOffset = _this._layer$_lastTransform = null;
        _this._inverseDirty = true;
        _this.set$engineLayer(null);
        return;
      }
      _this._establishTransform$0();
      t1 = _this._layer$_lastTransform;
      t2 = type$.nullable_TransformEngineLayer;
      if (t1 != null) {
        _this._lastOffset = _this.unlinkedOffset;
        _this.set$engineLayer(builder.pushTransform$2$oldLayer(t1._vector_math_64$_m4storage, t2._as(_this._engineLayer)));
        _this.addChildrenToScene$1(builder);
        builder.pop$0();
      } else {
        _this._lastOffset = null;
        t1 = _this.unlinkedOffset;
        _this.set$engineLayer(builder.pushTransform$2$oldLayer(B.Matrix4_Matrix4$translationValues(t1._dx, t1._dy, 0)._vector_math_64$_m4storage, t2._as(_this._engineLayer)));
        _this.addChildrenToScene$1(builder);
        builder.pop$0();
      }
      _this._inverseDirty = true;
    },
    applyTransform$2(child, transform) {
      var t1 = this._layer$_lastTransform;
      if (t1 != null)
        transform.multiply$1(t1);
      else {
        t1 = this.unlinkedOffset;
        transform.multiply$1(B.Matrix4_Matrix4$translationValues(t1._dx, t1._dy, 0));
      }
    }
  };
  A.RenderLeaderLayer.prototype = {
    set$link(value) {
      var _this = this,
        t1 = _this._proxy_box$_link;
      if (t1 === value)
        return;
      t1.leaderSize = null;
      _this._proxy_box$_link = value;
      t1 = _this._previousLayoutSize;
      if (t1 != null)
        value.leaderSize = t1;
      _this.markNeedsPaint$0();
    },
    get$alwaysNeedsCompositing() {
      return true;
    },
    performLayout$0() {
      var _this = this;
      _this.super$RenderProxyBoxMixin$performLayout();
      _this._previousLayoutSize = _this.get$size();
      _this._proxy_box$_link.leaderSize = _this.get$size();
    },
    paint$2(context, offset) {
      var t1 = this._layerHandle,
        t2 = t1._layer,
        t3 = this._proxy_box$_link;
      if (t2 == null)
        t1.set$layer(B.LeaderLayer$(t3, offset));
      else {
        type$.LeaderLayer._as(t2);
        t2.set$link(t3);
        t2.set$offset(offset);
      }
      t1 = t1._layer;
      t1.toString;
      context.pushLayer$3(t1, B.RenderProxyBoxMixin.prototype.get$paint.call(this), C.Offset_0_0);
    }
  };
  A.RenderFollowerLayer.prototype = {
    set$link(value) {
      if (this._proxy_box$_link === value)
        return;
      this._proxy_box$_link = value;
      this.markNeedsPaint$0();
    },
    set$showWhenUnlinked(value) {
      return;
    },
    set$offset(value) {
      if (this._proxy_box$_offset.$eq(0, value))
        return;
      this._proxy_box$_offset = value;
      this.markNeedsPaint$0();
    },
    set$leaderAnchor(value) {
      if (this._leaderAnchor.$eq(0, value))
        return;
      this._leaderAnchor = value;
      this.markNeedsPaint$0();
    },
    set$followerAnchor(value) {
      if (this._followerAnchor.$eq(0, value))
        return;
      this._followerAnchor = value;
      this.markNeedsPaint$0();
    },
    detach$0() {
      this._layerHandle.set$layer(null);
      this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$detach();
    },
    get$alwaysNeedsCompositing() {
      return true;
    },
    getCurrentTransform$0() {
      var t1 = type$.nullable_FollowerLayer._as(B.RenderObject.prototype.get$layer.call(this));
      t1 = t1 == null ? null : t1.getLastTransform$0();
      if (t1 == null) {
        t1 = new B.Matrix40(new Float64Array(16));
        t1.setIdentity$0();
      }
      return t1;
    },
    hitTest$2$position(result, position) {
      var t1 = this._proxy_box$_link._leader;
      if (t1 == null)
        return false;
      return this.hitTestChildren$2$position(result, position);
    },
    hitTestChildren$2$position(result, position) {
      return result.addWithPaintTransform$3$hitTest$position$transform(new A.RenderFollowerLayer_hitTestChildren_closure(this), position, this.getCurrentTransform$0());
    },
    paint$2(context, offset) {
      var t2, _this = this,
        leaderSize = _this._proxy_box$_link.leaderSize,
        effectiveLinkedOffset = leaderSize == null ? _this._proxy_box$_offset : _this._leaderAnchor.alongSize$1(leaderSize).$sub(0, _this._followerAnchor.alongSize$1(_this.get$size())).$add(0, _this._proxy_box$_offset),
        t1 = type$.nullable_FollowerLayer;
      if (t1._as(B.RenderObject.prototype.get$layer.call(_this)) == null)
        _this._layerHandle.set$layer(new A.FollowerLayer(_this._proxy_box$_link, false, offset, effectiveLinkedOffset, B.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.void_Function), B.LayerHandle$()));
      else {
        t2 = t1._as(B.RenderObject.prototype.get$layer.call(_this));
        if (t2 != null) {
          t2.link = _this._proxy_box$_link;
          t2.showWhenUnlinked = false;
          t2.linkedOffset = effectiveLinkedOffset;
          t2.unlinkedOffset = offset;
        }
      }
      t1 = t1._as(B.RenderObject.prototype.get$layer.call(_this));
      t1.toString;
      context.pushLayer$4$childPaintBounds(t1, B.RenderProxyBoxMixin.prototype.get$paint.call(_this), C.Offset_0_0, D.Rect_895);
    },
    applyPaintTransform$2(child, transform) {
      transform.multiply$1(this.getCurrentTransform$0());
    }
  };
  A.AutofillConfiguration.prototype = {
    toJson$0() {
      var t1, t2, _this = this;
      if (_this.enabled) {
        t1 = B.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
        t1.$indexSet(0, "uniqueIdentifier", _this.uniqueIdentifier);
        t1.$indexSet(0, "hints", _this.autofillHints);
        t1.$indexSet(0, "editingValue", _this.currentEditingValue.toJSON$0());
        t2 = _this.hintText;
        if (t2 != null)
          t1.$indexSet(0, "hintText", t2);
      } else
        t1 = null;
      return t1;
    }
  };
  A.BrowserContextMenu.prototype = {};
  A.ClipboardData.prototype = {};
  A.ProcessTextAction.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A.ProcessTextAction && other.id === this.id && other.label === this.label;
    },
    get$hashCode(_) {
      return B.Object_hash(this.id, this.label, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A.DefaultProcessTextService.prototype = {
    queryTextActions$0() {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.List_ProcessTextAction),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, result, t1, exception, t2, id, t3, rawResults, $async$exception, $async$temp1;
      var $async$queryTextActions$0 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              rawResults = null;
              $async$handler = 4;
              t1 = $async$self.__DefaultProcessTextService__processTextChannel_A;
              t1 === $ && B.throwUnnamedLateFieldNI();
              $async$temp1 = type$.nullable_Map_of_nullable_Object_and_nullable_Object;
              $async$goto = 7;
              return B._asyncAwait(t1.invokeMethod$1$1("ProcessText.queryTextActions", type$.dynamic), $async$queryTextActions$0);
            case 7:
              // returning from await.
              result = $async$temp1._as($async$result);
              if (result == null) {
                t1 = B._setArrayType([], type$.JSArray_ProcessTextAction);
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              }
              rawResults = result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              t1 = B._setArrayType([], type$.JSArray_ProcessTextAction);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              t1 = B._setArrayType([], type$.JSArray_ProcessTextAction);
              for (t2 = rawResults.get$keys(), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
                id = t2.get$current();
                id.toString;
                B._asString(id);
                t3 = J.$index$asx(rawResults, id);
                t3.toString;
                t1.push(new A.ProcessTextAction(id, B._asString(t3)));
              }
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return B._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return B._asyncStartSync($async$queryTextActions$0, $async$completer);
    },
    processTextAction$3(id, text, readOnly) {
      return this.processTextAction$body$DefaultProcessTextService(id, text, readOnly);
    },
    processTextAction$body$DefaultProcessTextService(id, text, readOnly) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.nullable_String),
        $async$returnValue, $async$self = this, t1, $async$temp1;
      var $async$processTextAction$3 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.__DefaultProcessTextService__processTextChannel_A;
              t1 === $ && B.throwUnnamedLateFieldNI();
              $async$temp1 = B;
              $async$goto = 3;
              return B._asyncAwait(t1.invokeMethod$1$2("ProcessText.processTextAction", [id, text, readOnly], type$.dynamic), $async$processTextAction$3);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1._asStringQ($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$processTextAction$3, $async$completer);
    }
  };
  A.SuggestionSpan.prototype = {
    $eq(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof A.SuggestionSpan) {
        t1 = other.range;
        t2 = this.range;
        t1 = t1.start === t2.start && t1.end === t2.end && B.listEquals(other.suggestions, this.suggestions);
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.range;
      return B.Object_hash(t1.start, t1.end, B.Object_hashAll(this.suggestions), C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toString$0(_) {
      var t1 = this.suggestions;
      return "SuggestionSpan(range: " + this.range.toString$0(0) + ", suggestions: " + t1.toString$0(t1) + ")";
    }
  };
  A.SpellCheckResults.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A.SpellCheckResults && other.spellCheckedText === this.spellCheckedText && B.listEquals(other.suggestionSpans, this.suggestionSpans);
    },
    get$hashCode(_) {
      return B.Object_hash(this.spellCheckedText, B.Object_hashAll(this.suggestionSpans), C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toString$0(_) {
      return "SpellCheckResults(spellCheckText: " + this.spellCheckedText + ", suggestionSpans: " + B.S(this.suggestionSpans) + ")";
    }
  };
  A.DefaultSpellCheckService.prototype = {
    fetchSpellCheckSuggestions$2(locale, text) {
      return this.fetchSpellCheckSuggestions$body$DefaultSpellCheckService(locale, text);
    },
    fetchSpellCheckSuggestions$body$DefaultSpellCheckService(locale, text) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.nullable_List_SuggestionSpan),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, t1, exception, t2, t3, t4, t5, t6, spansHaveChanged, suggestionSpans, rawResults, languageTag, $async$exception, $async$temp1;
      var $async$fetchSpellCheckSuggestions$2 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              rawResults = null;
              languageTag = locale._rawToString$1("-");
              $async$handler = 4;
              t1 = $async$self.__DefaultSpellCheckService_spellCheckChannel_A;
              t1 === $ && B.throwUnnamedLateFieldNI();
              $async$temp1 = type$.List_dynamic;
              $async$goto = 7;
              return B._asyncAwait(t1.invokeMethod$1$2("SpellCheck.initiateSpellCheck", B._setArrayType([languageTag, text], type$.JSArray_String), type$.dynamic), $async$fetchSpellCheckSuggestions$2);
            case 7:
              // returning from await.
              rawResults = $async$temp1._as($async$result);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              t1 = B._setArrayType([], type$.JSArray_SuggestionSpan);
              for (t2 = J.cast$1$0$ax(rawResults, type$.Map_dynamic_dynamic), t3 = t2.$ti, t2 = new B.ListIterator(t2, t2.get$length(0), t3._eval$1("ListIterator<ListBase.E>")), t4 = type$.List_nullable_Object, t5 = type$.String, t3 = t3._eval$1("ListBase.E"); t2.moveNext$0();) {
                t6 = t2.__internal$_current;
                if (t6 == null)
                  t6 = t3._as(t6);
                t1.push(new A.SuggestionSpan(new B.TextRange(B._asInt(t6.$index(0, "startIndex")), B._asInt(t6.$index(0, "endIndex"))), J.cast$1$0$ax(t4._as(t6.$index(0, "suggestions")), t5)));
              }
              t2 = $async$self.lastSavedResults;
              if (t2 != null) {
                t3 = t2.spellCheckedText;
                spansHaveChanged = B.listEquals(t2.suggestionSpans, t1);
                suggestionSpans = t3 === text && spansHaveChanged ? A.DefaultSpellCheckService_mergeResults($async$self.lastSavedResults.suggestionSpans, t1) : t1;
              } else
                suggestionSpans = t1;
              $async$self.lastSavedResults = new A.SpellCheckResults(text, suggestionSpans);
              $async$returnValue = suggestionSpans;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return B._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return B._asyncStartSync($async$fetchSpellCheckSuggestions$2, $async$completer);
    }
  };
  A.MaxLengthEnforcement.prototype = {
    _enumToString$0() {
      return "MaxLengthEnforcement." + this._name;
    }
  };
  A.TextInputFormatter.prototype = {};
  A._MutableTextRange.prototype = {};
  A._TextEditingValueAccumulator.prototype = {};
  A.FilteringTextInputFormatter.prototype = {
    formatEditUpdate$2(oldValue, newValue) {
      var t2, formatState, matches, previousMatch, t3, t4, t5, selection, composingRegion, _this = this, _null = null,
        t1 = newValue.selection;
      t1 = t1.get$isValid() ? new A._MutableTextRange(t1.baseOffset, t1.extentOffset) : _null;
      t2 = newValue.composing;
      t2 = t2.get$isValid() && t2.start !== t2.end ? new A._MutableTextRange(t2.start, t2.end) : _null;
      formatState = new A._TextEditingValueAccumulator(newValue, new B.StringBuffer(""), t1, t2);
      t2 = newValue.text;
      matches = C.JSString_methods.allMatches$1(_this.filterPattern, t2);
      for (t1 = new B._StringAllMatchesIterator(matches._input, matches._pattern, matches.__js_helper$_index), previousMatch = _null; t1.moveNext$0(); previousMatch = t3) {
        t3 = t1.__js_helper$_current;
        t3.toString;
        t4 = previousMatch == null ? _null : previousMatch.start + previousMatch.pattern.length;
        if (t4 == null)
          t4 = 0;
        t5 = t3.start;
        _this._processRegion$4(false, t4, t5, formatState);
        _this._processRegion$4(true, t5, t5 + t3.pattern.length, formatState);
      }
      t1 = previousMatch == null ? _null : previousMatch.start + previousMatch.pattern.length;
      if (t1 == null)
        t1 = 0;
      _this._processRegion$4(false, t1, t2.length, formatState);
      selection = formatState.selection;
      composingRegion = formatState.composingRegion;
      t2 = formatState.stringBuffer._contents;
      t1 = composingRegion == null || composingRegion.base === composingRegion.extent ? C.TextRange_m1_m1 : new B.TextRange(composingRegion.base, composingRegion.extent);
      if (selection == null)
        t3 = C.TextSelection_kab;
      else {
        t3 = formatState.inputValue.selection;
        t3 = B.TextSelection$(t3.affinity, selection.base, selection.extent, t3.isDirectional);
      }
      return new B.TextEditingValue(t2.charCodeAt(0) == 0 ? t2 : t2, t3, t1);
    },
    _processRegion$4(isBannedRegion, regionStart, regionEnd, state) {
      var replacementString, t1, t2, t3;
      if (isBannedRegion)
        replacementString = regionStart === regionEnd ? "" : this.replacementString;
      else
        replacementString = C.JSString_methods.substring$2(state.inputValue.text, regionStart, regionEnd);
      state.stringBuffer._contents += replacementString;
      if (replacementString.length === regionEnd - regionStart)
        return;
      t1 = new A.FilteringTextInputFormatter__processRegion_adjustIndex(regionStart, regionEnd, replacementString);
      t2 = state.selection;
      t3 = t2 == null;
      if (!t3)
        t2.base = t2.base + t1.call$1(state.inputValue.selection.baseOffset);
      if (!t3)
        t2.extent = t2.extent + t1.call$1(state.inputValue.selection.extentOffset);
      t2 = state.composingRegion;
      t3 = t2 == null;
      if (!t3)
        t2.base = t2.base + t1.call$1(state.inputValue.composing.start);
      if (!t3)
        t2.extent = t2.extent + t1.call$1(state.inputValue.composing.end);
    }
  };
  A.SmartDashesType.prototype = {
    _enumToString$0() {
      return "SmartDashesType." + this._name;
    }
  };
  A.SmartQuotesType.prototype = {
    _enumToString$0() {
      return "SmartQuotesType." + this._name;
    }
  };
  A.TextCapitalization0.prototype = {
    _enumToString$0() {
      return "TextCapitalization." + this._name;
    }
  };
  A.TextInputConfiguration.prototype = {
    toJson$0() {
      var _this = this,
        autofill = _this.autofillConfiguration.toJson$0(),
        t1 = B.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      t1.$indexSet(0, "viewId", _this.viewId);
      t1.$indexSet(0, "inputType", _this.inputType.toJson$0());
      t1.$indexSet(0, "readOnly", _this.readOnly);
      t1.$indexSet(0, "obscureText", _this.obscureText);
      t1.$indexSet(0, "autocorrect", true);
      t1.$indexSet(0, "smartDashesType", C.JSInt_methods.toString$0(_this.smartDashesType.index));
      t1.$indexSet(0, "smartQuotesType", C.JSInt_methods.toString$0(_this.smartQuotesType.index));
      t1.$indexSet(0, "enableSuggestions", true);
      t1.$indexSet(0, "enableInteractiveSelection", _this.enableInteractiveSelection);
      t1.$indexSet(0, "actionLabel", null);
      t1.$indexSet(0, "inputAction", _this.inputAction._enumToString$0());
      t1.$indexSet(0, "textCapitalization", _this.textCapitalization._enumToString$0());
      t1.$indexSet(0, "keyboardAppearance", _this.keyboardAppearance._enumToString$0());
      t1.$indexSet(0, "enableIMEPersonalizedLearning", true);
      t1.$indexSet(0, "contentCommitMimeTypes", _this.allowedMimeTypes);
      if (autofill != null)
        t1.$indexSet(0, "autofill", autofill);
      t1.$indexSet(0, "enableDeltaModel", false);
      return t1;
    }
  };
  A.TextSelectionDelegate.prototype = {};
  A.TextInputClient.prototype = {};
  A.SelectionRect.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (B.getRuntimeTypeOfDartObject(_this) !== J.get$runtimeType$(other))
        return false;
      return other instanceof A.SelectionRect && other.position === _this.position && other.bounds.$eq(0, _this.bounds) && other.direction === _this.direction;
    },
    get$hashCode(_) {
      return B.Object_hash(this.position, this.bounds, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toString$0(_) {
      return "SelectionRect(" + this.position + ", " + this.bounds.toString$0(0) + ")";
    }
  };
  A.TextInputConnection.prototype = {
    setComposingRect$1(rect) {
      var validRect;
      if (rect.$eq(0, this._text_input$_cachedRect))
        return;
      this._text_input$_cachedRect = rect;
      validRect = rect.get$isFinite(0) ? rect : new B.Rect(0, 0, -1, -1);
      $.$get$TextInput__instance()._setComposingTextRect$1(validRect);
    },
    setCaretRect$1(rect) {
      var validRect;
      if (rect.$eq(0, this._cachedCaretRect))
        return;
      this._cachedCaretRect = rect;
      validRect = rect.get$isFinite(0) ? rect : new B.Rect(0, 0, -1, -1);
      $.$get$TextInput__instance()._setCaretRect$1(validRect);
    }
  };
  A.UndoDirection.prototype = {
    _enumToString$0() {
      return "UndoDirection." + this._name;
    }
  };
  A.UndoManager.prototype = {
    get$_undo_manager$_channel() {
      var t1 = this.__UndoManager__channel_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      return t1;
    },
    _handleUndoManagerInvocation$1(methodCall) {
      return this._handleUndoManagerInvocation$body$UndoManager(methodCall);
    },
    _handleUndoManagerInvocation$body$UndoManager(methodCall) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, t1, args;
      var $async$_handleUndoManagerInvocation$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              args = type$.List_dynamic._as(methodCall.$arguments);
              if (methodCall.method === "UndoManagerClient.handleUndo") {
                t1 = $async$self._currentClient;
                t1.toString;
                t1.handlePlatformUndo$1($async$self._toUndoDirection$1(B._asString(J.$index$asx(args, 0))));
                // goto return
                $async$goto = 1;
                break;
              }
              throw B.wrapException(B.MissingPluginException$(null));
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$_handleUndoManagerInvocation$1, $async$completer);
    },
    _toUndoDirection$1(direction) {
      var t1;
      $label0$0: {
        if ("undo" === direction) {
          t1 = D.UndoDirection_0;
          break $label0$0;
        }
        if ("redo" === direction) {
          t1 = D.UndoDirection_1;
          break $label0$0;
        }
        t1 = B.throwExpression(B.FlutterError$fromParts(B._setArrayType([B.ErrorSummary$("Unknown undo direction: " + direction)], type$.JSArray_DiagnosticsNode)));
      }
      return t1;
    }
  };
  A.UndoManagerClient.prototype = {};
  A.FocusableActionDetector.prototype = {
    createState$0() {
      return new A._FocusableActionDetectorState(new B.LabeledGlobalKey(null, type$.LabeledGlobalKey_State_StatefulWidget));
    }
  };
  A._FocusableActionDetectorState.prototype = {
    initState$0() {
      this.super$State$initState();
      $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A._FocusableActionDetectorState_initState_closure(this));
      $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager._highlightManager._focus_manager$_listeners.add$1(0, this.get$_handleFocusHighlightModeChange());
    },
    dispose$0() {
      $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager._highlightManager._focus_manager$_listeners.remove$1(0, this.get$_handleFocusHighlightModeChange());
      this.super$State$dispose();
    },
    _updateHighlightMode$1(mode) {
      this._mayTriggerCallback$1$task(new A._FocusableActionDetectorState__updateHighlightMode_closure(this));
    },
    _handleFocusHighlightModeChange$1(mode) {
      if (this._framework$_element == null)
        return;
      this._updateHighlightMode$1(mode);
    },
    _handleMouseEnter$1($event) {
      if (!this._hovering)
        this._mayTriggerCallback$1$task(new A._FocusableActionDetectorState__handleMouseEnter_closure(this));
    },
    _handleMouseExit$1($event) {
      if (this._hovering)
        this._mayTriggerCallback$1$task(new A._FocusableActionDetectorState__handleMouseExit_closure(this));
    },
    _actions$_handleFocusChange$1(focused) {
      var _this = this;
      if (_this._focused !== focused) {
        _this._mayTriggerCallback$1$task(new A._FocusableActionDetectorState__handleFocusChange_closure(_this, focused));
        _this._widget.toString;
      }
    },
    _mayTriggerCallback$2$oldWidget$task(oldWidget, task) {
      var t3, oldTarget, didShowHoverHighlight, didShowFocusHighlight, doShowHoverHighlight, doShowFocusHighlight, _this = this,
        t1 = new A._FocusableActionDetectorState__mayTriggerCallback_shouldShowHoverHighlight(_this),
        t2 = new A._FocusableActionDetectorState__mayTriggerCallback_shouldShowFocusHighlight(_this, new A._FocusableActionDetectorState__mayTriggerCallback_canRequestFocus(_this));
      if (oldWidget == null) {
        t3 = _this._widget;
        t3.toString;
        oldTarget = t3;
      } else
        oldTarget = oldWidget;
      didShowHoverHighlight = t1.call$1(oldTarget);
      didShowFocusHighlight = t2.call$1(oldTarget);
      if (task != null)
        task.call$0();
      t3 = _this._widget;
      t3.toString;
      doShowHoverHighlight = t1.call$1(t3);
      t3 = _this._widget;
      t3.toString;
      doShowFocusHighlight = t2.call$1(t3);
      if (didShowFocusHighlight !== doShowFocusHighlight)
        _this._widget.onShowFocusHighlight.call$1(doShowFocusHighlight);
      if (didShowHoverHighlight !== doShowHoverHighlight)
        _this._widget.toString;
    },
    _mayTriggerCallback$1$task(task) {
      return this._mayTriggerCallback$2$oldWidget$task(null, task);
    },
    _mayTriggerCallback$1$oldWidget(oldWidget) {
      return this._mayTriggerCallback$2$oldWidget$task(oldWidget, null);
    },
    didUpdateWidget$1(oldWidget) {
      this.super$State$didUpdateWidget(oldWidget);
      if (this._widget.enabled !== oldWidget.enabled)
        $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A._FocusableActionDetectorState_didUpdateWidget_closure(this, oldWidget));
    },
    get$_actions$_canRequestFocus() {
      var _0_0,
        t1 = this._framework$_element;
      t1.toString;
      t1 = B.MediaQuery__maybeOf(t1, C._MediaQueryAspect_17);
      _0_0 = t1 == null ? null : t1.navigationMode;
      $label0$0: {
        if (C.NavigationMode_0 === _0_0 || _0_0 == null) {
          t1 = this._widget.enabled;
          break $label0$0;
        }
        if (C.NavigationMode_1 === _0_0) {
          t1 = true;
          break $label0$0;
        }
        t1 = null;
      }
      return t1;
    },
    build$1(context) {
      var _this = this, _null = null,
        t1 = _this._widget.focusNode,
        t2 = _this.get$_actions$_canRequestFocus(),
        t3 = _this._widget,
        child = B.MouseRegion$(B.Focus$(false, t2, t3.child, _null, true, true, t1, true, _null, _this.get$_actions$_handleFocusChange(), _null, _null, _null, _null), C.C__DeferringMouseCursor, _this._mouseRegionKey, _this.get$_handleMouseEnter(), _this.get$_handleMouseExit(), _null);
      if (t3.enabled)
        t1 = t3.actions.__js_helper$_length !== 0;
      else
        t1 = false;
      if (t1)
        child = B.Actions$(t3.actions, child);
      return child;
    }
  };
  A.AnimatedSize.prototype = {
    createState$0() {
      return new A._AnimatedSizeState(null, null);
    }
  };
  A._AnimatedSizeState.prototype = {
    build$1(context) {
      var t1 = this._widget;
      return new A._AnimatedSize(C.Alignment_0_0, t1.curve, t1.duration, null, this, C.Clip_1, null, t1.child, null);
    }
  };
  A._AnimatedSize.prototype = {
    createRenderObject$1(context) {
      var _this = this;
      return A.RenderAnimatedSize$(_this.alignment, _this.clipBehavior, _this.curve, _this.duration, _this.onEnd, _this.reverseDuration, B.Directionality_maybeOf(context), _this.vsync);
    },
    updateRenderObject$2(context, renderObject) {
      var t1, _this = this;
      renderObject.set$alignment(_this.alignment);
      renderObject.set$duration(_this.duration);
      renderObject.set$reverseDuration(_this.reverseDuration);
      renderObject.set$curve(_this.curve);
      renderObject.set$vsync(_this.vsync);
      renderObject.set$textDirection(B.Directionality_maybeOf(context));
      t1 = _this.clipBehavior;
      if (t1 !== renderObject._animated_size$_clipBehavior) {
        renderObject._animated_size$_clipBehavior = t1;
        renderObject.markNeedsPaint$0();
        renderObject.markNeedsSemanticsUpdate$0();
      }
      renderObject.set$onEnd(_this.onEnd);
    }
  };
  A.__AnimatedSizeState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0() {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTicker());
      _this.SingleTickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  A.AppLifecycleListener.prototype = {
    didRequestAppExit$0() {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.AppExitResponse),
        $async$returnValue;
      var $async$didRequestAppExit$0 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = C.AppExitResponse_0;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$didRequestAppExit$0, $async$completer);
    },
    didChangeAppLifecycleState$1(state) {
      if (state === this._app_lifecycle_listener$_lifecycleState)
        return;
      this._app_lifecycle_listener$_lifecycleState = state;
      switch (state.index) {
        case 1:
          this.onResume.call$0();
          break;
        case 2:
          break;
        case 3:
          break;
        case 4:
          break;
        case 0:
          break;
      }
    }
  };
  A._AppLifecycleListener_Object_WidgetsBindingObserver.prototype = {};
  A._AppLifecycleListener_Object_WidgetsBindingObserver_Diagnosticable.prototype = {};
  A.CompositedTransformTarget.prototype = {
    createRenderObject$1(context) {
      var t1 = new A.RenderLeaderLayer(this.link, null, new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$link(this.link);
    }
  };
  A.CompositedTransformFollower.prototype = {
    createRenderObject$1(context) {
      var t1 = new A.RenderFollowerLayer(this.link, false, this.offset, C.Alignment_m1_m1, C.Alignment_m1_m1, null, new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$link(this.link);
      renderObject.set$showWhenUnlinked(false);
      renderObject.set$offset(this.offset);
      renderObject.set$leaderAnchor(C.Alignment_m1_m1);
      renderObject.set$followerAnchor(C.Alignment_m1_m1);
    }
  };
  A.ContextMenuButtonType.prototype = {
    _enumToString$0() {
      return "ContextMenuButtonType." + this._name;
    }
  };
  A.ContextMenuButtonItem.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== B.getRuntimeTypeOfDartObject(_this))
        return false;
      return other instanceof A.ContextMenuButtonItem && other.label == _this.label && J.$eq$(other.onPressed, _this.onPressed) && other.type === _this.type;
    },
    get$hashCode(_) {
      return B.Object_hash(this.label, this.onPressed, this.type, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toString$0(_) {
      return "ContextMenuButtonItem " + this.type.toString$0(0) + ", " + B.S(this.label);
    }
  };
  A.ContextMenuController.prototype = {
    show$2$context$contextMenuBuilder(context, contextMenuBuilder) {
      var t1, t2;
      A.ContextMenuController_removeAny();
      t1 = B.LookupBoundary_findRootAncestorStateOfType(context, type$.OverlayState);
      t1.toString;
      t2 = A.Navigator_maybeOf(context);
      if (t2 == null)
        t2 = null;
      else {
        t2 = t2._framework$_element;
        t2.toString;
      }
      t2 = B.OverlayEntry$(new A.ContextMenuController_show_closure(A.InheritedTheme_capture(context, t2), contextMenuBuilder), false, false);
      $.ContextMenuController__menuOverlayEntry = t2;
      t1.insert$1(0, t2);
      $.ContextMenuController__shownInstance = this;
    },
    remove$0(_) {
      if ($.ContextMenuController__shownInstance !== this)
        return;
      A.ContextMenuController_removeAny();
    }
  };
  A.DesktopTextSelectionToolbarLayoutDelegate.prototype = {
    getConstraintsForChild$1(constraints) {
      return new B.BoxConstraints(0, constraints.maxWidth, 0, constraints.maxHeight);
    },
    getPositionForChild$2(size, childSize) {
      var t4,
        t1 = this.anchor,
        t2 = t1._dx,
        t3 = t2 + childSize._dx - size._dx;
      t1 = t1._dy;
      t4 = t1 + childSize._dy - size._dy;
      if (t3 > 0)
        t2 -= t3;
      return new B.Offset(t2, t4 > 0 ? t1 - t4 : t1);
    },
    shouldRelayout$1(oldDelegate) {
      return !this.anchor.$eq(0, oldDelegate.anchor);
    }
  };
  A._CompositionCallback.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._RenderCompositionCallback(this.compositeCallback, this.enabled, null, new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var t1;
      this.super$RenderObjectWidget$updateRenderObject(context, renderObject);
      t1 = this.enabled;
      renderObject._editable_text$_enabled = t1;
      if (!t1) {
        t1 = renderObject._cancelCallback;
        if (t1 != null)
          t1.call$0();
        renderObject._cancelCallback = null;
      } else if (renderObject._cancelCallback == null)
        renderObject.markNeedsPaint$0();
    }
  };
  A._RenderCompositionCallback.prototype = {
    paint$2(context, offset) {
      var _this = this;
      if (_this._editable_text$_enabled)
        if (_this._cancelCallback == null)
          _this._cancelCallback = context._containerLayer.addCompositionCallback$1(_this.compositeCallback);
      _this.super$RenderProxyBoxMixin$paint(context, offset);
    }
  };
  A.TextEditingController.prototype = {
    buildTextSpan$3$context$style$withComposing(context, style, withComposing) {
      var composingStyle, t1, t2, t3, _null = null;
      if (!this._change_notifier$_value.get$isComposingRangeValid() || !withComposing)
        return B.TextSpan$(_null, style, this._change_notifier$_value.text);
      composingStyle = style.merge$1(D.TextStyle_9IC);
      t1 = this._change_notifier$_value;
      t2 = t1.composing;
      t1 = t1.text;
      t3 = t2.start;
      t2 = t2.end;
      return B.TextSpan$(B._setArrayType([B.TextSpan$(_null, _null, C.JSString_methods.substring$2(t1, 0, t3)), B.TextSpan$(_null, composingStyle, C.JSString_methods.substring$2(t1, t3, t2)), B.TextSpan$(_null, _null, C.JSString_methods.substring$1(t1, t2))], type$.JSArray_TextSpan), style, _null);
    },
    set$selection(newSelection) {
      var newComposing,
        t1 = this._change_notifier$_value,
        t2 = t1.text.length,
        t3 = newSelection.end;
      if (t2 < t3 || t2 < newSelection.start)
        throw B.wrapException(B.FlutterError_FlutterError("invalid text selection: " + newSelection.toString$0(0)));
      newComposing = t1.composing;
      this.super$ValueNotifier$value(t1.copyWith$2$composing$selection(newSelection.start >= newComposing.start && t3 <= newComposing.end ? newComposing : C.TextRange_m1_m1, newSelection));
    }
  };
  A.ToolbarOptions.prototype = {};
  A._KeyFrame.prototype = {};
  A._DiscreteKeyFrameSimulation.prototype = {
    dx$1(time) {
      return 0;
    },
    isDone$1(time) {
      return time >= this.maxDuration;
    },
    x$1(time) {
      var endIndex, t2, searchIndex0,
        t1 = this._keyFrames,
        searchIndex = this._lastKeyFrameIndex;
      if (t1[searchIndex].time > time) {
        endIndex = searchIndex;
        searchIndex = 0;
      } else
        endIndex = 11;
      for (t2 = endIndex - 1; searchIndex < t2; searchIndex = searchIndex0) {
        searchIndex0 = searchIndex + 1;
        if (time < t1[searchIndex0].time)
          break;
      }
      this._lastKeyFrameIndex = searchIndex;
      return t1[searchIndex].value;
    }
  };
  A.EditableText.prototype = {
    get$strutStyle() {
      var t1 = this.style,
        t2 = t1.get$fontFamilyFallback();
      return new B.StrutStyle(t1.fontFamily, t2, t1.fontSize, t1.height, t1.leadingDistribution, t1.fontWeight, t1.fontStyle, null, true, t1.debugLabel);
    },
    createState$0() {
      return A.EditableTextState$();
    }
  };
  A.EditableTextState.prototype = {
    get$_cursorBlinkOpacityController() {
      var _this = this, _null = null,
        t1 = _this._backingCursorBlinkOpacityController;
      if (t1 == null) {
        t1 = B.AnimationController$(_null, _null, _null, _null, _this);
        t1.didRegisterListener$0();
        t1.AnimationLocalListenersMixin__listeners.add$1(0, _this.get$_onCursorColorTick());
        _this._backingCursorBlinkOpacityController = t1;
      }
      return t1;
    },
    get$_iosBlinkCursorSimulation() {
      var value = this.__EditableTextState__iosBlinkCursorSimulation_FI;
      if (value === $) {
        value !== $ && B.throwUnnamedLateFieldADI();
        value = this.__EditableTextState__iosBlinkCursorSimulation_FI = new A._DiscreteKeyFrameSimulation(1, D.List_8w6, C.Tolerance_YtJ);
      }
      return value;
    },
    get$_hasInputConnection() {
      var t1 = this._textInputConnection;
      t1 = t1 == null ? null : $.$get$TextInput__instance()._currentConnection === t1;
      return t1 === true;
    },
    get$_scrollController() {
      var t1 = this._widget.scrollController,
        t2 = this._internalScrollController;
      if (t2 == null) {
        t1 = B.ScrollController$();
        this._internalScrollController = t1;
      } else
        t1 = t2;
      return t1;
    },
    get$currentAutofillScope() {
      return this._currentAutofillScope;
    },
    get$_spellCheckResultsReceived() {
      var t1 = this.__EditableTextState__spellCheckConfiguration_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      if (t1._spellCheckEnabled) {
        t1 = this.spellCheckResults;
        t1 = t1 != null && J.get$isNotEmpty$asx(t1.suggestionSpans);
      } else
        t1 = false;
      return t1;
    },
    get$_stylusHandwritingEnabled() {
      this._widget.toString;
      return true;
    },
    get$wantKeepAlive() {
      return this._widget.focusNode.get$hasFocus();
    },
    get$cutEnabled() {
      var t2,
        t1 = this._widget;
      if (!type$.TextSelectionHandleControls._is(t1.selectionControls))
        return t1.toolbarOptions.cut && !t1.readOnly && !t1.obscureText;
      t2 = false;
      if (!t1.readOnly)
        if (!t1.obscureText) {
          t1 = t1.controller._change_notifier$_value.selection;
          t1 = t1.start !== t1.end;
        } else
          t1 = t2;
      else
        t1 = t2;
      return t1;
    },
    get$copyEnabled() {
      var t1 = this._widget;
      if (!type$.TextSelectionHandleControls._is(t1.selectionControls))
        return t1.toolbarOptions.copy && !t1.obscureText;
      if (!t1.obscureText) {
        t1 = t1.controller._change_notifier$_value.selection;
        t1 = t1.start !== t1.end;
      } else
        t1 = false;
      return t1;
    },
    get$pasteEnabled() {
      var t1 = this._widget;
      if (!type$.TextSelectionHandleControls._is(t1.selectionControls))
        return t1.toolbarOptions.paste && !t1.readOnly;
      return !t1.readOnly && this.clipboardStatus.value === D.ClipboardStatus_0;
    },
    get$selectAllEnabled() {
      var t2,
        t1 = this._widget;
      if (!type$.TextSelectionHandleControls._is(t1.selectionControls)) {
        if (t1.toolbarOptions.selectAll)
          t1 = (!t1.readOnly || !t1.obscureText) && t1.enableInteractiveSelection;
        else
          t1 = false;
        return t1;
      }
      if (t1.enableInteractiveSelection)
        t2 = t1.readOnly && t1.obscureText;
      else
        t2 = true;
      if (t2)
        return false;
      switch (B.defaultTargetPlatform().index) {
        case 4:
          return false;
        case 2:
          t1 = t1.controller._change_notifier$_value;
          if (t1.text.length !== 0) {
            t1 = t1.selection;
            t1 = t1.start === t1.end;
          } else
            t1 = false;
          return t1;
        case 0:
        case 1:
        case 3:
        case 5:
          t1 = t1.controller._change_notifier$_value;
          t2 = t1.text.length;
          if (t2 !== 0) {
            t1 = t1.selection;
            t1 = !(t1.start === 0 && t1.end === t2);
          } else
            t1 = false;
          return t1;
      }
    },
    get$lookUpEnabled() {
      var t1, t2, t3;
      if (B.defaultTargetPlatform() !== C.TargetPlatform_2)
        return false;
      t1 = this._widget;
      if (!t1.obscureText) {
        t1 = t1.controller._change_notifier$_value;
        t2 = t1.selection;
        t3 = t2.start;
        t2 = t2.end;
        t1 = t3 !== t2 && C.JSString_methods.trim$0(C.JSString_methods.substring$2(t1.text, t3, t2)) !== "";
      } else
        t1 = false;
      return t1;
    },
    get$searchWebEnabled() {
      var t1, t2, t3;
      if (B.defaultTargetPlatform() !== C.TargetPlatform_2)
        return false;
      t1 = this._widget;
      if (!t1.obscureText) {
        t1 = t1.controller._change_notifier$_value;
        t2 = t1.selection;
        t3 = t2.start;
        t2 = t2.end;
        t1 = t3 !== t2 && C.JSString_methods.trim$0(C.JSString_methods.substring$2(t1.text, t3, t2)) !== "";
      } else
        t1 = false;
      return t1;
    },
    get$shareEnabled() {
      var t1, t2, t3;
      switch (B.defaultTargetPlatform().index) {
        case 0:
        case 2:
          t1 = this._widget;
          if (!t1.obscureText) {
            t1 = t1.controller._change_notifier$_value;
            t2 = t1.selection;
            t3 = t2.start;
            t2 = t2.end;
            t1 = t3 !== t2 && C.JSString_methods.trim$0(C.JSString_methods.substring$2(t1.text, t3, t2)) !== "";
          } else
            t1 = false;
          return t1;
        case 4:
        case 1:
        case 3:
        case 5:
          return false;
      }
    },
    get$liveTextInputEnabled() {
      return false;
    },
    _onChangedClipboardStatus$0() {
      this.setState$1(new A.EditableTextState__onChangedClipboardStatus_closure());
    },
    copySelection$1(cause) {
      var _this = this,
        t1 = _this._widget,
        t2 = t1.controller._change_notifier$_value,
        selection = t2.selection,
        t3 = selection.start,
        t4 = selection.end;
      if (t3 === t4 || t1.obscureText)
        return;
      A.Clipboard_setData(new A.ClipboardData(C.JSString_methods.substring$2(t2.text, t3, t4)));
      if (cause === D.SelectionChangedCause_5) {
        _this.bringIntoView$1(_this._widget.controller._change_notifier$_value.selection.get$extent());
        _this.hideToolbar$1(false);
        switch (B.defaultTargetPlatform().index) {
          case 2:
          case 4:
          case 3:
          case 5:
            break;
          case 0:
          case 1:
            t1 = _this._widget.controller._change_notifier$_value;
            _this.userUpdateTextEditingValue$2(new B.TextEditingValue(t1.text, A.TextSelection$collapsed(C.TextAffinity_1, t1.selection.end), C.TextRange_m1_m1), D.SelectionChangedCause_5);
            break;
        }
      }
      B.Future_Future$value(null, type$.void);
    },
    cutSelection$1(cause) {
      var selection, text, t2, _this = this,
        t1 = _this._widget;
      if (t1.readOnly || t1.obscureText)
        return;
      t1 = t1.controller._change_notifier$_value;
      selection = t1.selection;
      text = t1.text;
      t1 = selection.start;
      t2 = selection.end;
      if (t1 === t2)
        return;
      A.Clipboard_setData(new A.ClipboardData(C.JSString_methods.substring$2(text, t1, t2)));
      _this._replaceText$1(new A.ReplaceTextIntent(_this._widget.controller._change_notifier$_value, "", selection, cause));
      if (cause === D.SelectionChangedCause_5) {
        $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A.EditableTextState_cutSelection_closure(_this));
        _this.hideToolbar$0();
      }
      B.Future_Future$value(null, type$.void);
    },
    get$_allowPaste() {
      var t1 = this._widget;
      return !t1.readOnly && t1.controller._change_notifier$_value.selection.get$isValid();
    },
    pasteText$1(cause) {
      return this.pasteText$body$EditableTextState(cause);
    },
    pasteText$body$EditableTextState(cause) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, data;
      var $async$pasteText$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!$async$self.get$_allowPaste()) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return B._asyncAwait(A.Clipboard_getData("text/plain"), $async$pasteText$1);
            case 3:
              // returning from await.
              data = $async$result;
              if (data == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._pasteText$2(cause, data.text);
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$pasteText$1, $async$completer);
    },
    _pasteText$2(cause, text) {
      var t1, selection, _this = this;
      if (!_this.get$_allowPaste())
        return;
      t1 = _this._widget.controller._change_notifier$_value;
      selection = t1.selection;
      _this.userUpdateTextEditingValue$2(t1.copyWith$1$selection(A.TextSelection$collapsed(C.TextAffinity_1, Math.max(selection.baseOffset, selection.extentOffset))).replaced$2(selection, text), cause);
      if (cause === D.SelectionChangedCause_5) {
        $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A.EditableTextState__pasteText_closure(_this));
        _this.hideToolbar$0();
      }
    },
    selectAll$1(cause) {
      var _this = this,
        t1 = _this._widget;
      if (t1.readOnly && t1.obscureText)
        return;
      t1 = t1.controller._change_notifier$_value;
      _this.userUpdateTextEditingValue$2(t1.copyWith$1$selection(B.TextSelection$(C.TextAffinity_1, 0, t1.text.length, false)), cause);
      if (cause === D.SelectionChangedCause_5) {
        switch (B.defaultTargetPlatform().index) {
          case 0:
          case 2:
          case 1:
            break;
          case 4:
          case 3:
          case 5:
            _this.hideToolbar$0();
            break;
        }
        switch (B.defaultTargetPlatform().index) {
          case 0:
          case 1:
          case 3:
          case 5:
            _this.bringIntoView$1(_this._widget.controller._change_notifier$_value.selection.get$extent());
            break;
          case 4:
          case 2:
            break;
        }
      }
    },
    lookUpSelection$1(cause) {
      return this.lookUpSelection$body$EditableTextState(cause);
    },
    lookUpSelection$body$EditableTextState(cause) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2, t3, text;
      var $async$lookUpSelection$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._widget;
              t2 = t1.controller._change_notifier$_value;
              t3 = t2.selection;
              text = C.JSString_methods.substring$2(t2.text, t3.start, t3.end);
              if (t1.obscureText || text.length === 0) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return B._asyncAwait(C.OptionalMethodChannel_ZFR.invokeMethod$1$2("LookUp.invoke", text, type$.dynamic), $async$lookUpSelection$1);
            case 3:
              // returning from await.
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$lookUpSelection$1, $async$completer);
    },
    searchWebForSelection$1(cause) {
      return this.searchWebForSelection$body$EditableTextState(cause);
    },
    searchWebForSelection$body$EditableTextState(cause) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t2, text, t1;
      var $async$searchWebForSelection$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._widget;
              if (t1.obscureText) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = t1.controller._change_notifier$_value;
              t2 = t1.selection;
              text = C.JSString_methods.substring$2(t1.text, t2.start, t2.end);
              $async$goto = text.length !== 0 ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return B._asyncAwait(C.OptionalMethodChannel_ZFR.invokeMethod$1$2("SearchWeb.invoke", text, type$.dynamic), $async$searchWebForSelection$1);
            case 5:
              // returning from await.
            case 4:
              // join
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$searchWebForSelection$1, $async$completer);
    },
    shareSelection$1(cause) {
      return this.shareSelection$body$EditableTextState(cause);
    },
    shareSelection$body$EditableTextState(cause) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t2, text, t1;
      var $async$shareSelection$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._widget;
              if (t1.obscureText) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = t1.controller._change_notifier$_value;
              t2 = t1.selection;
              text = C.JSString_methods.substring$2(t1.text, t2.start, t2.end);
              $async$goto = text.length !== 0 ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return B._asyncAwait(C.OptionalMethodChannel_ZFR.invokeMethod$1$2("Share.invoke", text, type$.dynamic), $async$shareSelection$1);
            case 5:
              // returning from await.
            case 4:
              // join
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$shareSelection$1, $async$completer);
    },
    _startLiveTextInput$1(cause) {
      if (!this.get$liveTextInputEnabled())
        return;
      if (this.get$_hasInputConnection())
        C.OptionalMethodChannel_5XR.invokeMethod$1$1("TextInput.startLiveTextInput", type$.dynamic);
      if (cause === D.SelectionChangedCause_5)
        this.hideToolbar$0();
    },
    findSuggestionSpanAtCursorIndex$1(cursorIndex) {
      var suggestionSpans, t1, rightIndex, leftIndex, midIndex, currentSpanStart;
      if (!this.get$_spellCheckResultsReceived() || J.get$last$ax(this.spellCheckResults.suggestionSpans).range.end < cursorIndex)
        return null;
      suggestionSpans = this.spellCheckResults.suggestionSpans;
      t1 = J.getInterceptor$asx(suggestionSpans);
      rightIndex = t1.get$length(suggestionSpans) - 1;
      for (leftIndex = 0; leftIndex <= rightIndex;) {
        midIndex = C.JSNumber_methods.floor$0((leftIndex + rightIndex) / 2);
        currentSpanStart = t1.$index(suggestionSpans, midIndex).range.start;
        if (cursorIndex <= t1.$index(suggestionSpans, midIndex).range.end && cursorIndex >= currentSpanStart)
          return t1.$index(suggestionSpans, midIndex);
        else if (cursorIndex <= currentSpanStart)
          rightIndex = midIndex - 1;
        else
          leftIndex = midIndex + 1;
      }
      return null;
    },
    buttonItemsForToolbarOptions$0() {
      var t1, _this = this, _null = null,
        toolbarOptions = _this._widget.toolbarOptions;
      if (toolbarOptions === D.ToolbarOptions_false_false_false_false)
        return _null;
      t1 = B._setArrayType([], type$.JSArray_ContextMenuButtonItem);
      if (toolbarOptions.cut && _this.get$cutEnabled())
        t1.push(new A.ContextMenuButtonItem(new A.EditableTextState_buttonItemsForToolbarOptions_closure(_this), D.ContextMenuButtonType_0, _null));
      if (toolbarOptions.copy && _this.get$copyEnabled())
        t1.push(new A.ContextMenuButtonItem(new A.EditableTextState_buttonItemsForToolbarOptions_closure0(_this), D.ContextMenuButtonType_1, _null));
      if (toolbarOptions.paste && _this.get$pasteEnabled())
        t1.push(new A.ContextMenuButtonItem(new A.EditableTextState_buttonItemsForToolbarOptions_closure1(_this), D.ContextMenuButtonType_2, _null));
      if (toolbarOptions.selectAll && _this.get$selectAllEnabled())
        t1.push(new A.ContextMenuButtonItem(new A.EditableTextState_buttonItemsForToolbarOptions_closure2(_this), D.ContextMenuButtonType_3, _null));
      return t1;
    },
    getGlyphHeights$0() {
      var t1, t2, selectedGraphemes, t3, t4, startCharacterRect, endCharacterRect, _this = this,
        selection = _this._widget.controller._change_notifier$_value.selection,
        prevText = _this.get$renderEditable()._editable$_textPainter._text_painter$_text.toPlainText$0(),
        currText = _this._widget.controller._change_notifier$_value.text;
      if (prevText !== currText || !selection.get$isValid() || selection.start === selection.end) {
        t1 = _this.get$renderEditable()._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height();
        return new B._Record_2_endGlyphHeight_startGlyphHeight(_this.get$renderEditable()._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height(), t1);
      }
      t1 = selection.start;
      t2 = selection.end;
      selectedGraphemes = C.JSString_methods.substring$2(currText, t1, t2);
      t3 = selectedGraphemes.length === 0;
      t4 = (t3 ? C.StringCharacters_GVp : new B.StringCharacters(selectedGraphemes)).get$first(0);
      startCharacterRect = _this.get$renderEditable().getRectForComposingRange$1(new B.TextRange(t1, t1 + t4.length));
      t1 = (t3 ? C.StringCharacters_GVp : new B.StringCharacters(selectedGraphemes)).get$last(0);
      endCharacterRect = _this.get$renderEditable().getRectForComposingRange$1(new B.TextRange(t2 - t1.length, t2));
      t1 = startCharacterRect == null ? null : startCharacterRect.bottom - startCharacterRect.top;
      if (t1 == null)
        t1 = _this.get$renderEditable()._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height();
      t2 = endCharacterRect == null ? null : endCharacterRect.bottom - endCharacterRect.top;
      return new B._Record_2_endGlyphHeight_startGlyphHeight(t2 == null ? _this.get$renderEditable()._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height() : t2, t1);
    },
    get$contextMenuAnchors() {
      var t1, _0_0, _0_1, endGlyphHeight, _0_2, startGlyphHeight, selection, points, _this = this;
      if (_this.get$renderEditable()._lastSecondaryTapDownPosition != null) {
        t1 = _this.get$renderEditable()._lastSecondaryTapDownPosition;
        t1.toString;
        return new A.TextSelectionToolbarAnchors(t1, null);
      }
      _0_0 = _this.getGlyphHeights$0();
      _0_1 = _0_0._1;
      endGlyphHeight = null;
      _0_2 = _0_0._0;
      endGlyphHeight = _0_2;
      startGlyphHeight = _0_1;
      selection = _this._widget.controller._change_notifier$_value.selection;
      points = _this.get$renderEditable().getEndpointsForSelection$1(selection);
      return A.TextSelectionToolbarAnchors_TextSelectionToolbarAnchors$fromSelection(endGlyphHeight, _this.get$renderEditable(), points, startGlyphHeight);
    },
    get$contextMenuButtonItems() {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, resultButtonItem, t11, showShareBeforeSelectAll, _this = this, _null = null,
        t1 = _this.buttonItemsForToolbarOptions$0();
      if (t1 == null) {
        t1 = _this.clipboardStatus.value;
        t2 = _this.get$copyEnabled() ? new A.EditableTextState_contextMenuButtonItems_closure(_this) : _null;
        t3 = _this.get$cutEnabled() ? new A.EditableTextState_contextMenuButtonItems_closure0(_this) : _null;
        t4 = _this.get$pasteEnabled() ? new A.EditableTextState_contextMenuButtonItems_closure1(_this) : _null;
        t5 = _this.get$selectAllEnabled() ? new A.EditableTextState_contextMenuButtonItems_closure2(_this) : _null;
        t6 = _this.get$lookUpEnabled() ? new A.EditableTextState_contextMenuButtonItems_closure3(_this) : _null;
        t7 = _this.get$searchWebEnabled() ? new A.EditableTextState_contextMenuButtonItems_closure4(_this) : _null;
        t8 = _this.get$shareEnabled() ? new A.EditableTextState_contextMenuButtonItems_closure5(_this) : _null;
        t9 = _this.get$liveTextInputEnabled() ? new A.EditableTextState_contextMenuButtonItems_closure6(_this) : _null;
        t10 = type$.JSArray_ContextMenuButtonItem;
        resultButtonItem = B._setArrayType([], t10);
        t11 = t4 != null;
        if (!t11 || t1 !== D.ClipboardStatus_1) {
          showShareBeforeSelectAll = B.defaultTargetPlatform() === C.TargetPlatform_0;
          t1 = B._setArrayType([], t10);
          if (t3 != null)
            t1.push(new A.ContextMenuButtonItem(t3, D.ContextMenuButtonType_0, _null));
          if (t2 != null)
            t1.push(new A.ContextMenuButtonItem(t2, D.ContextMenuButtonType_1, _null));
          if (t11)
            t1.push(new A.ContextMenuButtonItem(t4, D.ContextMenuButtonType_2, _null));
          t2 = t8 != null;
          if (t2 && showShareBeforeSelectAll)
            t1.push(new A.ContextMenuButtonItem(t8, D.ContextMenuButtonType_7, _null));
          if (t5 != null)
            t1.push(new A.ContextMenuButtonItem(t5, D.ContextMenuButtonType_3, _null));
          if (t6 != null)
            t1.push(new A.ContextMenuButtonItem(t6, D.ContextMenuButtonType_5, _null));
          if (t7 != null)
            t1.push(new A.ContextMenuButtonItem(t7, D.ContextMenuButtonType_6, _null));
          if (t2 && !showShareBeforeSelectAll)
            t1.push(new A.ContextMenuButtonItem(t8, D.ContextMenuButtonType_7, _null));
          C.JSArray_methods.addAll$1(resultButtonItem, t1);
        }
        if (t9 != null)
          resultButtonItem.push(new A.ContextMenuButtonItem(t9, D.ContextMenuButtonType_8, _null));
        t1 = resultButtonItem;
      }
      C.JSArray_methods.addAll$1(t1, _this.get$_textProcessingActionButtonItems());
      return t1;
    },
    get$_textProcessingActionButtonItems() {
      var t2, _i, action,
        buttonItems = B._setArrayType([], type$.JSArray_ContextMenuButtonItem),
        t1 = this._widget,
        selection = t1.controller._change_notifier$_value.selection;
      if (t1.obscureText || !selection.get$isValid() || selection.start === selection.end)
        return buttonItems;
      for (t1 = this._processTextActions, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i) {
        action = t1[_i];
        buttonItems.push(new A.ContextMenuButtonItem(new A.EditableTextState__textProcessingActionButtonItems_closure(this, selection, action), D.ContextMenuButtonType_9, action.label));
      }
      return buttonItems;
    },
    initState$0() {
      var t1, t2, _this = this;
      _this.super$_EditableTextState_State_AutomaticKeepAliveClientMixin$initState();
      _this.clipboardStatus.addListener$1(_this.get$_onChangedClipboardStatus());
      _this._widget.controller.addListener$1(_this.get$_didChangeTextEditingValue());
      _this._widget.focusNode.addListener$1(_this.get$_editable_text$_handleFocusChanged());
      _this._cursorVisibilityNotifier.set$value(_this._widget.showCursor);
      _this.__EditableTextState__spellCheckConfiguration_A = A.EditableTextState__inferSpellCheckConfiguration(_this._widget.spellCheckConfiguration);
      t1 = $.WidgetsBinding__instance;
      t2 = new A.AppLifecycleListener(t1.SchedulerBinding__lifecycleState, t1, new A.EditableTextState_initState_closure(_this));
      t1.WidgetsBinding__observers.push(t2);
      _this.__EditableTextState__appLifecycleListener_F !== $ && B.throwUnnamedLateFieldAI();
      _this.__EditableTextState__appLifecycleListener_F = t2;
      _this._initProcessTextActions$0();
    },
    _initProcessTextActions$0() {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, $async$temp1, $async$temp2;
      var $async$_initProcessTextActions$0 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._processTextActions;
              C.JSArray_methods.clear$0(t1);
              $async$temp1 = C.JSArray_methods;
              $async$temp2 = t1;
              $async$goto = 2;
              return B._asyncAwait($async$self._processTextService.queryTextActions$0(), $async$_initProcessTextActions$0);
            case 2:
              // returning from await.
              $async$temp1.addAll$1($async$temp2, $async$result);
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$_initProcessTextActions$0, $async$completer);
    },
    didChangeDependencies$0() {
      var t1, t2, newTickerEnabled, orientation, _this = this;
      _this.super$State$didChangeDependencies();
      t1 = _this._framework$_element;
      t1.toString;
      t1 = B.MediaQuery__maybeOf(t1, C._MediaQueryAspect_16);
      t1 = t1 == null ? null : t1.boldText;
      t2 = _this._widget;
      _this.__EditableTextState__style_A = t1 === true ? t2.style.merge$1(C.TextStyle_KXJ) : t2.style;
      _this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$._AutofillScope);
      if (!_this._didAutoFocus && _this._widget.autofocus) {
        _this._didAutoFocus = true;
        $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A.EditableTextState_didChangeDependencies_closure(_this));
      }
      t1 = _this._framework$_element;
      t1.toString;
      newTickerEnabled = B.TickerMode_of(t1);
      if (_this._tickersEnabled !== newTickerEnabled) {
        _this._tickersEnabled = newTickerEnabled;
        if (_this.get$_showBlinkingCursor())
          _this._startCursorBlink$0();
        else if (!_this._tickersEnabled && _this._cursorTimer != null)
          _this._stopCursorBlink$0();
      }
      if (_this.get$_hasInputConnection()) {
        t1 = _this._framework$_element;
        t1.toString;
        if (B.View_maybeOf(t1).viewId !== _this._editable_text$_viewId) {
          _this._textInputConnection.toString;
          t1 = _this._widget.autofillClient;
          t1 = t1.get$textInputConfiguration();
          $.$get$TextInput__instance()._updateConfig$1(t1);
        }
      }
      if (B.defaultTargetPlatform() !== C.TargetPlatform_2 && B.defaultTargetPlatform() !== C.TargetPlatform_0)
        return;
      t1 = _this._framework$_element;
      t1.toString;
      orientation = B.InheritedModel_inheritFrom(t1, C._MediaQueryAspect_1, type$.MediaQuery).data.get$orientation();
      t1 = _this._lastOrientation;
      if (t1 == null) {
        _this._lastOrientation = orientation;
        return;
      }
      if (orientation !== t1) {
        _this._lastOrientation = orientation;
        if (B.defaultTargetPlatform() === C.TargetPlatform_2)
          _this.hideToolbar$1(false);
        if (B.defaultTargetPlatform() === C.TargetPlatform_0)
          _this.hideToolbar$0();
      }
      if (_this._listeningToScrollNotificationObserver) {
        t1 = _this._scrollNotificationObserver;
        if (t1 != null)
          t1.removeListener$1(_this.get$_handleContextMenuOnParentScroll());
        t1 = _this._framework$_element;
        t1.toString;
        t1 = _this._scrollNotificationObserver = B.ScrollNotificationObserver_maybeOf(t1);
        if (t1 != null) {
          t1 = t1._scroll_notification_observer$_listeners;
          t1._insertBefore$3$updateFirst(t1._collection$_first, new B._ListenerEntry0(_this.get$_handleContextMenuOnParentScroll()), false);
        }
      }
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, t3, shouldShowToolbar, shouldShowHandles, canPaste, _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.controller;
      if (_this._widget.controller !== t1) {
        t2 = _this.get$_didChangeTextEditingValue();
        t1.removeListener$1(t2);
        _this._widget.controller.addListener$1(t2);
        _this._updateRemoteEditingValueIfNeeded$0();
      }
      if (_this._selectionOverlay != null) {
        t2 = true;
        if (J.$eq$(_this._widget.contextMenuBuilder, oldWidget.contextMenuBuilder)) {
          t3 = _this._widget;
          if (t3.selectionControls == oldWidget.selectionControls)
            if (J.$eq$(t3.onSelectionHandleTapped, oldWidget.onSelectionHandleTapped)) {
              t2 = _this._widget;
              t2 = t2.dragStartBehavior !== oldWidget.dragStartBehavior || t2.magnifierConfiguration !== oldWidget.magnifierConfiguration;
            }
        }
      } else
        t2 = false;
      if (t2) {
        t1 = _this._selectionOverlay.__TextSelectionOverlay__selectionOverlay_F;
        t1 === $ && B.throwUnnamedLateFieldNI();
        shouldShowToolbar = t1.get$toolbarIsVisible();
        t1 = _this._selectionOverlay;
        shouldShowHandles = t1._handlesVisible;
        t1.dispose$0();
        _this._selectionOverlay = _this._createSelectionOverlay$0();
        if (shouldShowToolbar || shouldShowHandles)
          $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A.EditableTextState_didUpdateWidget_closure(_this, shouldShowToolbar, shouldShowHandles));
      } else if (!_this._widget.controller._change_notifier$_value.selection.$eq(0, t1._change_notifier$_value.selection)) {
        t1 = _this._selectionOverlay;
        if (t1 != null)
          t1.update$1(_this._widget.controller._change_notifier$_value);
      }
      t1 = _this._selectionOverlay;
      if (t1 != null)
        t1.set$handlesVisible(_this._widget.showSelectionHandles);
      t1 = _this._widget;
      t2 = oldWidget.focusNode;
      if (t1.focusNode !== t2) {
        t1 = _this.get$_editable_text$_handleFocusChanged();
        t2.removeListener$1(t1);
        _this._widget.focusNode.addListener$1(t1);
        _this.updateKeepAlive$0();
      }
      if (oldWidget.readOnly && _this._widget.focusNode.get$hasFocus())
        $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A.EditableTextState_didUpdateWidget_closure0(_this));
      t1 = _this.get$_hasInputConnection();
      if (t1) {
        t1 = _this._widget;
        if (oldWidget.readOnly !== t1.readOnly) {
          _this._textInputConnection.toString;
          t1 = t1.autofillClient;
          t1 = t1.get$textInputConfiguration();
          $.$get$TextInput__instance()._updateConfig$1(t1);
        }
      }
      if (_this.get$_hasInputConnection()) {
        t1 = _this._widget;
        if (oldWidget.obscureText !== t1.obscureText) {
          _this._textInputConnection.toString;
          t1 = t1.autofillClient;
          t1 = t1.get$textInputConfiguration();
          $.$get$TextInput__instance()._updateConfig$1(t1);
        }
      }
      if (!_this._widget.style.$eq(0, oldWidget.style)) {
        t1 = _this._framework$_element;
        t1.toString;
        t1 = B.MediaQuery__maybeOf(t1, C._MediaQueryAspect_16);
        t1 = t1 == null ? null : t1.boldText;
        t2 = _this._widget;
        _this.__EditableTextState__style_A = t1 === true ? t2.style.merge$1(C.TextStyle_KXJ) : t2.style;
        if (_this.get$_hasInputConnection()) {
          _this._textInputConnection.toString;
          t1 = _this.__EditableTextState__style_A;
          t2 = _this.get$_editable_text$_textDirection();
          t3 = _this._widget.textAlign;
          $.$get$TextInput__instance()._setStyle$5$fontFamily$fontSize$fontWeight$textAlign$textDirection(t1.fontFamily, t1.fontSize, t1.fontWeight, t3, t2);
        }
      }
      if (_this._widget.showCursor !== oldWidget.showCursor)
        _this._startOrStopCursorTimerIfNeeded$0();
      t1 = _this._widget.selectionControls;
      if (type$.TextSelectionHandleControls._is(t1))
        canPaste = _this.get$pasteEnabled();
      else {
        t1 = t1 == null && null;
        canPaste = t1 === true;
      }
      if (_this._widget.enableInteractiveSelection && _this.get$pasteEnabled() && canPaste)
        B.Future_Future$value(null, type$.void);
    },
    _disposeScrollNotificationObserver$0() {
      var t1, _this = this;
      _this._listeningToScrollNotificationObserver = false;
      t1 = _this._scrollNotificationObserver;
      if (t1 != null) {
        t1.removeListener$1(_this.get$_handleContextMenuOnParentScroll());
        _this._scrollNotificationObserver = null;
      }
    },
    dispose$0() {
      var _this = this,
        t1 = _this._internalScrollController;
      if (t1 != null)
        t1.dispose$0();
      _this._widget.controller.removeListener$1(_this.get$_didChangeTextEditingValue());
      t1 = _this._floatingCursorResetController;
      if (t1 != null)
        t1.dispose$0();
      _this._floatingCursorResetController = null;
      _this._closeInputConnectionIfNeeded$0();
      t1 = _this._cursorTimer;
      if (t1 != null)
        t1.cancel$0();
      _this._cursorTimer = null;
      t1 = _this._backingCursorBlinkOpacityController;
      if (t1 != null)
        t1.dispose$0();
      _this._backingCursorBlinkOpacityController = null;
      t1 = _this._selectionOverlay;
      if (t1 != null)
        t1.dispose$0();
      _this._selectionOverlay = null;
      _this._widget.focusNode.removeListener$1(_this.get$_editable_text$_handleFocusChanged());
      $.WidgetsBinding__instance.removeObserver$1(_this);
      t1 = _this.clipboardStatus;
      t1.removeListener$1(_this.get$_onChangedClipboardStatus());
      t1.dispose$0();
      t1 = _this._cursorVisibilityNotifier;
      t1.ChangeNotifier__listeners = $.$get$ChangeNotifier__emptyListeners();
      t1.ChangeNotifier__count = 0;
      t1 = _this.__EditableTextState__appLifecycleListener_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.binding.removeObserver$1(t1);
      $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager.removeListener$1(_this.get$_unflagInternalFocus());
      _this._disposeScrollNotificationObserver$0();
      _this.super$_EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin$dispose();
    },
    get$currentTextEditingValue() {
      return this._widget.controller._change_notifier$_value;
    },
    updateEditingValue$1(value) {
      var t2, t3, t4, t5, cause, revealObscuredInput, _this = this,
        t1 = _this._widget.controller._change_notifier$_value;
      if (value.text === t1.text) {
        t2 = value.selection;
        t3 = t2.start;
        t4 = t1.selection;
        t5 = t4.start;
        t2 = t3 === t2.end === (t5 === t4.end) && t3 === t5 && t2.affinity !== t4.affinity;
      } else
        t2 = false;
      if (t2)
        value = value.copyWith$1$selection(value.selection.copyWith$1$affinity(t1.selection.affinity));
      t1 = _this._widget;
      if (t1.readOnly)
        value = t1.controller._change_notifier$_value.copyWith$1$selection(value.selection);
      _this._lastKnownRemoteTextEditingValue = value;
      if (value.$eq(0, _this._widget.controller._change_notifier$_value))
        return;
      t1 = value.text;
      t2 = _this._widget.controller._change_notifier$_value;
      if (t1 === t2.text && value.composing.$eq(0, t2.composing)) {
        t1 = _this._textInputConnection == null ? null : $.$get$TextInput__instance()._scribbleInProgress;
        if (t1 === true)
          cause = D.SelectionChangedCause_7;
        else
          cause = _this._pointOffsetOrigin != null ? D.SelectionChangedCause_3 : C.SelectionChangedCause_4;
        _this._handleSelectionChanged$2(value.selection, cause);
      } else {
        if (t1 !== _this._widget.controller._change_notifier$_value.text)
          _this.hideToolbar$1(false);
        t2 = _this._currentPromptRectRange = null;
        revealObscuredInput = false;
        if (_this.get$_hasInputConnection()) {
          t3 = _this._widget;
          if (t3.obscureText) {
            $.WidgetsBinding__instance.toString;
            $.$get$EnginePlatformDispatcher__instance();
            t3 = t3.controller._change_notifier$_value;
            t1 = t1.length === t3.text.length + 1;
            revealObscuredInput = t1;
          }
        }
        _this._obscureShowCharTicksPending = revealObscuredInput ? 3 : 0;
        _this._obscureLatestCharIndex = revealObscuredInput ? _this._widget.controller._change_notifier$_value.selection.baseOffset : t2;
        _this._formatAndSetValue$2(value, C.SelectionChangedCause_4);
      }
      if (_this.get$_showBlinkingCursor() && _this._cursorTimer != null) {
        _this._stopCursorBlink$1$resetCharTicks(false);
        _this._startCursorBlink$0();
      }
      _this._scheduleShowCaretOnScreen$1$withAnimation(true);
    },
    performAction$1(action) {
      var _this = this;
      switch (action.index) {
        case 12:
          if (_this._widget.maxLines === 1)
            _this._finalizeEditing$2$shouldUnfocus(action, true);
          break;
        case 2:
        case 3:
        case 6:
        case 7:
        case 4:
        case 5:
          _this._finalizeEditing$2$shouldUnfocus(action, true);
          break;
        case 8:
        case 11:
        case 9:
        case 0:
        case 10:
        case 1:
          _this._finalizeEditing$2$shouldUnfocus(action, false);
          break;
      }
    },
    performPrivateCommand$2(action, data) {
      this._widget.toString;
    },
    insertContent$1($content) {
      this._widget.toString;
    },
    updateFloatingCursor$1(point) {
      var t2, t3, shouldResetOrigin, startCaretCenter, currentTextPosition, t4, centeredPoint, rawCursorOffset, _this = this, _null = null,
        t1 = _this._floatingCursorResetController;
      if (t1 == null) {
        t1 = B.AnimationController$(_null, _null, _null, _null, _this);
        t1.didRegisterListener$0();
        t1.AnimationLocalListenersMixin__listeners.add$1(0, _this.get$_onFloatingCursorResetTick());
        _this._floatingCursorResetController = t1;
      }
      t2 = point.state;
      switch (t2.index) {
        case 0:
          t3 = t1._ticker;
          if (t3 != null && t3._ticker$_future != null) {
            t1.stop$0();
            _this._onFloatingCursorResetTick$0();
          }
          _this._stopCursorBlink$1$resetCharTicks(false);
          _this.get$_cursorBlinkOpacityController().set$value(1);
          _this._pointOffsetOrigin = point.offset;
          t1 = point.startLocation;
          shouldResetOrigin = t1 == null;
          if (!shouldResetOrigin) {
            startCaretCenter = t1._0;
            currentTextPosition = t1._1;
          } else {
            currentTextPosition = new B.TextPosition(_this.get$renderEditable()._selection.baseOffset, _this.get$renderEditable()._selection.affinity);
            startCaretCenter = _this.get$renderEditable().getLocalRectForCaret$1(currentTextPosition).get$center();
          }
          _this._startCaretCenter = startCaretCenter;
          t1 = _this.get$renderEditable();
          t3 = _this._startCaretCenter;
          t3.toString;
          _this._lastBoundedOffset = t1.calculateBoundedFloatingCursorOffset$2$shouldResetOrigin(t3.$sub(0, new B.Offset(0, _this.get$renderEditable()._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height() / 2)), shouldResetOrigin);
          _this._lastTextPosition = currentTextPosition;
          t3 = _this.get$renderEditable();
          t1 = _this._lastBoundedOffset;
          t1.toString;
          t4 = _this._lastTextPosition;
          t4.toString;
          t3.setFloatingCursor$3(t2, t1, t4);
          break;
        case 1:
          t1 = point.offset;
          t1.toString;
          t3 = _this._pointOffsetOrigin;
          t3.toString;
          centeredPoint = t1.$sub(0, t3);
          rawCursorOffset = _this._startCaretCenter.$add(0, centeredPoint).$sub(0, new B.Offset(0, _this.get$renderEditable()._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height() / 2));
          _this._lastBoundedOffset = _this.get$renderEditable().calculateBoundedFloatingCursorOffset$1(rawCursorOffset);
          t3 = _this.get$renderEditable();
          t1 = _this.get$renderEditable();
          t4 = _this._lastBoundedOffset;
          t4.toString;
          t4 = t4.$add(0, new B.Offset(0, _this.get$renderEditable()._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height() / 2));
          _this._lastTextPosition = t3.getPositionForPoint$1(B.MatrixUtils_transformPoint(t1.getTransformTo$1(_null), t4));
          t4 = _this.get$renderEditable();
          t1 = _this._lastBoundedOffset;
          t1.toString;
          t3 = _this._lastTextPosition;
          t3.toString;
          t4.setFloatingCursor$3(t2, t1, t3);
          break;
        case 2:
          _this._startCursorBlink$0();
          if (_this._lastTextPosition != null && _this._lastBoundedOffset != null) {
            _this._floatingCursorResetController.set$value(0);
            t1 = _this._floatingCursorResetController;
            t1._direction = C._AnimationDirection_0;
            t1._animateToInternal$3$curve$duration(1, C.C__DecelerateCurve, D.Duration_125000);
          }
          break;
      }
    },
    _onFloatingCursorResetTick$0() {
      var finalPosition, t3, t4, t5, _this = this,
        t1 = _this.get$renderEditable(),
        t2 = _this._lastTextPosition;
      t2.toString;
      finalPosition = t1.getLocalRectForCaret$1(t2).get$centerLeft().$sub(0, new B.Offset(0, _this.get$renderEditable()._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height() / 2));
      if (_this._floatingCursorResetController.get$status() === C.AnimationStatus_3) {
        t1 = _this.get$renderEditable();
        t2 = _this._lastTextPosition;
        t2.toString;
        t1.setFloatingCursor$3(C.FloatingCursorDragState_2, finalPosition, t2);
        t1 = _this.get$renderEditable()._selection;
        if (t1.start === t1.end) {
          t1 = _this._lastTextPosition;
          t1.toString;
          _this._handleSelectionChanged$2(A.TextSelection$fromPosition(t1), D.SelectionChangedCause_3);
        }
        _this._lastBoundedOffset = _this._pointOffsetOrigin = _this._lastTextPosition = _this._startCaretCenter = null;
      } else {
        t1 = _this._floatingCursorResetController.__AnimationController__value_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t2 = _this._lastBoundedOffset;
        t3 = B.lerpDouble(t2._dx, finalPosition._dx, t1);
        t3.toString;
        t2 = B.lerpDouble(t2._dy, finalPosition._dy, t1);
        t2.toString;
        t4 = _this.get$renderEditable();
        t5 = _this._lastTextPosition;
        t5.toString;
        t4.setFloatingCursor$4$resetLerpValue(C.FloatingCursorDragState_1, new B.Offset(t3, t2), t5, t1);
      }
    },
    _finalizeEditing$2$shouldUnfocus(action, shouldUnfocus) {
      var onSubmitted, exception, stack, t2, exception0, _this = this,
        t1 = _this._widget.controller;
      t1.super$ValueNotifier$value(t1._change_notifier$_value.copyWith$1$composing(C.TextRange_m1_m1));
      if (shouldUnfocus)
        switch (action.index) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
            _this._widget.focusNode.unfocus$0();
            break;
          case 6:
            t1 = _this._widget.focusNode;
            t2 = t1._focus_manager$_context;
            t2.toString;
            B.FocusTraversalGroup_maybeOf(t2)._moveFocus$2$forward(t1, true);
            break;
          case 7:
            t1 = _this._widget.focusNode;
            t2 = t1._focus_manager$_context;
            t2.toString;
            B.FocusTraversalGroup_maybeOf(t2)._moveFocus$2$forward(t1, false);
            break;
        }
      t1 = _this._widget;
      onSubmitted = t1.onSubmitted;
      if (onSubmitted == null)
        return;
      try {
        onSubmitted.call$1(t1.controller._change_notifier$_value.text);
      } catch (exception0) {
        exception = B.unwrapException(exception0);
        stack = B.getTraceFromException(exception0);
        t1 = B.ErrorDescription$("while calling onSubmitted for " + action.toString$0(0));
        B.FlutterError_reportError(new B.FlutterErrorDetails(exception, stack, "widgets", t1, null, false));
      }
      if (shouldUnfocus)
        _this._scheduleRestartConnection$0();
    },
    _updateRemoteEditingValueIfNeeded$0() {
      var t1, _this = this;
      if (_this._batchEditDepth > 0 || !_this.get$_hasInputConnection())
        return;
      t1 = _this._widget.controller._change_notifier$_value;
      if (t1.$eq(0, _this._lastKnownRemoteTextEditingValue))
        return;
      _this._textInputConnection.toString;
      $.$get$TextInput__instance()._setEditingState$1(t1);
      _this._lastKnownRemoteTextEditingValue = t1;
    },
    _getOffsetToRevealCaret$1(rect) {
      var editableSize, t1, t2, t3, additionalOffset, unitOffset, expandedRect, targetOffset, _this = this;
      C.JSArray_methods.get$single(_this.get$_scrollController()._positions);
      editableSize = _this.get$renderEditable().get$size();
      if (_this._widget.maxLines === 1) {
        t1 = rect.right;
        t2 = rect.left;
        t3 = editableSize._dx;
        additionalOffset = t1 - t2 >= t3 ? t3 / 2 - rect.get$center()._dx : B.clampDouble(0, t1 - t3, t2);
        unitOffset = C.Offset_1_0;
      } else {
        expandedRect = B.Rect$fromCenter(rect.get$center(), Math.max(rect.bottom - rect.top, _this.get$renderEditable()._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height()), rect.right - rect.left);
        t1 = expandedRect.bottom;
        t2 = expandedRect.top;
        t3 = editableSize._dy;
        additionalOffset = t1 - t2 >= t3 ? t3 / 2 - expandedRect.get$center()._dy : B.clampDouble(0, t1 - t3, t2);
        unitOffset = C.Offset_0_1;
      }
      t1 = C.JSArray_methods.get$single(_this.get$_scrollController()._positions)._pixels;
      t1.toString;
      t2 = C.JSArray_methods.get$single(_this.get$_scrollController()._positions)._scroll_position$_minScrollExtent;
      t2.toString;
      t3 = C.JSArray_methods.get$single(_this.get$_scrollController()._positions)._scroll_position$_maxScrollExtent;
      t3.toString;
      targetOffset = B.clampDouble(additionalOffset + t1, t2, t3);
      t3 = C.JSArray_methods.get$single(_this.get$_scrollController()._positions)._pixels;
      t3.toString;
      return new E.RevealedOffset(targetOffset, rect.shift$1(unitOffset.$mul(0, t3 - targetOffset)));
    },
    _openInputConnection$0() {
      var t1, t2, connection, t3, t4, t5, _this = this;
      if (!_this.get$_hasInputConnection()) {
        t1 = _this._widget;
        t2 = t1.controller._change_notifier$_value;
        t1 = t1.autofillClient;
        t1.get$textInputConfiguration();
        t1 = _this._widget.autofillClient;
        t1 = t1.get$textInputConfiguration();
        connection = A.TextInputConnection$_(_this);
        $.$get$TextInput__instance()._attach$2(connection, t1);
        t1 = connection;
        _this._textInputConnection = t1;
        _this._updateSizeAndTransform$0();
        _this._schedulePeriodicPostFrameCallbacks$0();
        _this._textInputConnection.toString;
        t1 = _this.__EditableTextState__style_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t3 = _this.get$_editable_text$_textDirection();
        t4 = _this._widget.textAlign;
        t5 = $.$get$TextInput__instance();
        t5._setStyle$5$fontFamily$fontSize$fontWeight$textAlign$textDirection(t1.fontFamily, t1.fontSize, t1.fontWeight, t4, t3);
        t5._setEditingState$1(t2);
        t5._show$0();
        t1 = _this._widget.autofillClient;
        if (t1.get$textInputConfiguration().autofillConfiguration.enabled) {
          _this._textInputConnection.toString;
          t5._requestAutofill$0();
        }
        _this._lastKnownRemoteTextEditingValue = t2;
      } else {
        _this._textInputConnection.toString;
        $.$get$TextInput__instance()._show$0();
      }
    },
    _closeInputConnectionIfNeeded$0() {
      var t1, t2, _this = this;
      if (_this.get$_hasInputConnection()) {
        t1 = _this._textInputConnection;
        t1.toString;
        t2 = $.$get$TextInput__instance();
        if (t2._currentConnection === t1)
          t2._clearClient$0();
        _this._scribbleCacheKey = _this._lastKnownRemoteTextEditingValue = _this._textInputConnection = null;
        _this.removeTextPlaceholder$0();
      }
    },
    _scheduleRestartConnection$0() {
      if (this._restartConnectionScheduled)
        return;
      this._restartConnectionScheduled = true;
      B.scheduleMicrotask(this.get$_restartConnectionIfNeeded());
    },
    _restartConnectionIfNeeded$0() {
      var t1, t2, connection, newConnection, t3, _this = this;
      _this._restartConnectionScheduled = false;
      t1 = _this.get$_hasInputConnection();
      if (!t1)
        return;
      t1 = _this._textInputConnection;
      t1.toString;
      t2 = $.$get$TextInput__instance();
      if (t2._currentConnection === t1)
        t2._clearClient$0();
      _this._lastKnownRemoteTextEditingValue = _this._textInputConnection = null;
      t1 = _this._widget.autofillClient;
      t1.get$textInputConfiguration();
      t1 = _this._widget.autofillClient;
      t1 = t1.get$textInputConfiguration();
      connection = A.TextInputConnection$_(_this);
      t2._attach$2(connection, t1);
      newConnection = connection;
      _this._textInputConnection = newConnection;
      t2._show$0();
      t1 = _this.__EditableTextState__style_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t3 = _this.get$_editable_text$_textDirection();
      t2._setStyle$5$fontFamily$fontSize$fontWeight$textAlign$textDirection(t1.fontFamily, t1.fontSize, t1.fontWeight, _this._widget.textAlign, t3);
      t2._setEditingState$1(_this._widget.controller._change_notifier$_value);
      _this._lastKnownRemoteTextEditingValue = _this._widget.controller._change_notifier$_value;
    },
    connectionClosed$0() {
      var _this = this;
      if (_this.get$_hasInputConnection()) {
        _this._textInputConnection.toString;
        _this._lastKnownRemoteTextEditingValue = _this._textInputConnection = $.$get$TextInput__instance()._currentConnection = null;
        _this._widget.focusNode.unfocus$0();
      }
    },
    _unflagInternalFocus$0() {
      this._nextFocusChangeIsInternal = false;
      $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager.removeListener$1(this.get$_unflagInternalFocus());
    },
    requestKeyboard$0() {
      var _this = this;
      if (_this._widget.focusNode.get$hasFocus())
        _this._openInputConnection$0();
      else {
        _this._nextFocusChangeIsInternal = true;
        $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager.addListener$1(_this.get$_unflagInternalFocus());
        _this._widget.focusNode.requestFocus$0();
      }
    },
    _updateOrDisposeSelectionOverlayIfNeeded$0() {
      var t1, t2, _this = this;
      if (_this._selectionOverlay != null) {
        t1 = _this._widget.focusNode.get$hasFocus();
        t2 = _this._selectionOverlay;
        if (t1) {
          t2.toString;
          t2.update$1(_this._widget.controller._change_notifier$_value);
        } else {
          t2.dispose$0();
          _this._selectionOverlay = null;
        }
      }
    },
    _scrollableNotificationIsFromSameSubtree$1(notificationContext) {
      var t1, t2, notificationScrollableState, currentContext, scrollableState;
      if (notificationContext == null)
        return false;
      t1 = this._framework$_element;
      t1.toString;
      t2 = type$.ScrollableState;
      notificationScrollableState = notificationContext.findAncestorStateOfType$1$0(t2);
      if (notificationScrollableState == null)
        return false;
      for (currentContext = t1; currentContext != null;) {
        scrollableState = currentContext.findAncestorStateOfType$1$0(t2);
        if (scrollableState === notificationScrollableState)
          return true;
        if (scrollableState == null)
          currentContext = null;
        else {
          t1 = scrollableState._framework$_element;
          t1.toString;
          currentContext = t1;
        }
      }
      return false;
    },
    _handleContextMenuOnParentScroll$1(notification) {
      var _0_3, scrollableState, t2, _this = this,
        t1 = notification instanceof B.ScrollStartNotification;
      if (!t1 && !(notification instanceof B.ScrollEndNotification))
        return;
      $label0$0: {
        if (!(t1 && _this._dataWhenToolbarShowScheduled != null))
          t1 = notification instanceof B.ScrollEndNotification && _this._dataWhenToolbarShowScheduled == null;
        else
          t1 = true;
        if (t1)
          break $label0$0;
        if (notification instanceof B.ScrollEndNotification && !_this._dataWhenToolbarShowScheduled._1.$eq(0, _this._widget.controller._change_notifier$_value)) {
          _this._dataWhenToolbarShowScheduled = null;
          _this._disposeScrollNotificationObserver$0();
          break $label0$0;
        }
        _0_3 = notification.context;
        t1 = false;
        scrollableState = _0_3 == null ? null : _0_3.findAncestorStateOfType$1$0(type$.ScrollableState);
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, _this._scrollableKey);
        if (scrollableState == null)
          t2 = null;
        else {
          t2 = scrollableState._framework$_element;
          t2.toString;
        }
        t1 = !J.$eq$(t1, t2) && _this._scrollableNotificationIsFromSameSubtree$1(_0_3);
        if (t1)
          _this._handleContextMenuOnScroll$1(notification);
      }
    },
    _handleContextMenuOnScroll$1(notification) {
      $.$get$BrowserContextMenu__instance();
      return;
    },
    _createSelectionOverlay$0() {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, selectionOverlay, _this = this,
        t1 = _this._widget;
      t1.toString;
      t2 = _this._framework$_element;
      t2.toString;
      t3 = t1.controller._change_notifier$_value;
      t4 = _this.get$renderEditable();
      t5 = _this._widget;
      t6 = t5.selectionControls;
      t7 = t5.dragStartBehavior;
      t8 = t5.onSelectionHandleTapped;
      $.$get$BrowserContextMenu__instance();
      t5 = t5.magnifierConfiguration;
      t9 = $.$get$ChangeNotifier__emptyListeners();
      t10 = new B.ValueNotifier(false, t9);
      t11 = new B.ValueNotifier(false, t9);
      t12 = new B.ValueNotifier(false, t9);
      selectionOverlay = new A.TextSelectionOverlay(t2, t4, t6, _this, null, t3, t10, t11, t12);
      t3 = selectionOverlay.get$_updateTextSelectionOverlayVisibilities();
      t4._selectionStartInViewport.addListener$1(t3);
      t4._selectionEndInViewport.addListener$1(t3);
      selectionOverlay._updateTextSelectionOverlayVisibilities$0();
      t3 = selectionOverlay.get$_handleAnyDragEnd();
      t4 = t4._lastSecondaryTapDownPosition;
      selectionOverlay.__TextSelectionOverlay__selectionOverlay_F !== $ && B.throwUnnamedLateFieldAI();
      selectionOverlay.__TextSelectionOverlay__selectionOverlay_F = new A.SelectionOverlay(t2, new B.ValueNotifier(D.MagnifierInfo_JsQ, t9), new A.MagnifierController(), t5, C.TextSelectionHandleType_2, 0, t10, selectionOverlay.get$_handleSelectionStartHandleDragStart(), selectionOverlay.get$_handleSelectionStartHandleDragUpdate(), t3, C.TextSelectionHandleType_2, 0, t11, selectionOverlay.get$_handleSelectionEndHandleDragStart(), selectionOverlay.get$_handleSelectionEndHandleDragUpdate(), t3, t12, D.List_empty5, t1, _this._toolbarLayerLink, _this._startHandleLayerLink, _this._endHandleLayerLink, t6, _this, t7, t8, _this.clipboardStatus, t4, new A.ContextMenuController(), new A.ContextMenuController());
      return selectionOverlay;
    },
    _handleSelectionChanged$2(selection, cause) {
      var exception, stack, exception0, _this = this,
        t1 = _this._widget.controller,
        t2 = t1._change_notifier$_value.text.length;
      if (t2 < selection.end || t2 < selection.start)
        return;
      t1.set$selection(selection);
      switch (cause) {
        case null:
        case void 0:
        case D.SelectionChangedCause_1:
        case D.SelectionChangedCause_6:
        case D.SelectionChangedCause_3:
        case D.SelectionChangedCause_2:
        case D.SelectionChangedCause_7:
        case D.SelectionChangedCause_0:
        case D.SelectionChangedCause_5:
          _this.requestKeyboard$0();
          break;
        case C.SelectionChangedCause_4:
          break;
      }
      t1 = _this._widget;
      t1.toString;
      t2 = _this._selectionOverlay;
      if (t2 == null)
        _this._selectionOverlay = _this._createSelectionOverlay$0();
      else
        t2.update$1(t1.controller._change_notifier$_value);
      t1 = _this._selectionOverlay;
      t1.toString;
      t1.set$handlesVisible(_this._widget.showSelectionHandles);
      t1 = _this._selectionOverlay;
      t1._updateSelectionOverlay$0();
      t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.showHandles$0();
      try {
        _this._widget.onSelectionChanged.call$2(selection, cause);
      } catch (exception0) {
        exception = B.unwrapException(exception0);
        stack = B.getTraceFromException(exception0);
        t1 = B.ErrorDescription$("while calling onSelectionChanged for " + B.S(cause));
        B.FlutterError_reportError(new B.FlutterErrorDetails(exception, stack, "widgets", t1, null, false));
      }
      if (_this.get$_showBlinkingCursor() && _this._cursorTimer != null) {
        _this._stopCursorBlink$1$resetCharTicks(false);
        _this._startCursorBlink$0();
      }
    },
    _scheduleShowCaretOnScreen$1$withAnimation(withAnimation) {
      if (this._showCaretOnScreenScheduled)
        return;
      this._showCaretOnScreenScheduled = true;
      $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A.EditableTextState__scheduleShowCaretOnScreen_closure(this, withAnimation));
    },
    didChangeMetrics$0() {
      var result, _this = this,
        t1 = _this._framework$_element;
      if (t1 == null)
        return;
      result = B.View_maybeOf(t1);
      result.toString;
      t1 = _this.__EditableTextState__lastBottomViewInset_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      if (t1 !== result._viewInsets.bottom) {
        $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A.EditableTextState_didChangeMetrics_closure(_this));
        if (_this.__EditableTextState__lastBottomViewInset_A < result._viewInsets.bottom)
          _this._scheduleShowCaretOnScreen$1$withAnimation(false);
      }
      _this.__EditableTextState__lastBottomViewInset_A = result._viewInsets.bottom;
    },
    _performSpellCheck$1(text) {
      return this._performSpellCheck$body$EditableTextState(text);
    },
    _performSpellCheck$body$EditableTextState(text) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, localeForSpellChecking, suggestions, exception, stack, t1, localeForSpellChecking0, t2, exception0, $async$exception0;
      var $async$_performSpellCheck$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$self._widget.toString;
              t1 = $async$self._framework$_element;
              t1.toString;
              localeForSpellChecking0 = B.Localizations_maybeLocaleOf(t1);
              localeForSpellChecking = localeForSpellChecking0;
              t1 = $async$self.__EditableTextState__spellCheckConfiguration_A;
              t1 === $ && B.throwUnnamedLateFieldNI();
              t1 = t1.spellCheckService;
              t1.toString;
              t2 = localeForSpellChecking;
              t2.toString;
              $async$goto = 7;
              return B._asyncAwait(t1.fetchSpellCheckSuggestions$2(t2, text), $async$_performSpellCheck$1);
            case 7:
              // returning from await.
              suggestions = $async$result;
              if (suggestions == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self.spellCheckResults = new A.SpellCheckResults(text, suggestions);
              $async$self.get$renderEditable().set$text($async$self.buildTextSpan$0());
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception0 = $async$errorStack.pop();
              exception = B.unwrapException($async$exception0);
              stack = B.getTraceFromException($async$exception0);
              t1 = B.ErrorDescription$("while performing spell check");
              B.FlutterError_reportError(new B.FlutterErrorDetails(exception, stack, "widgets", t1, null, false));
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return B._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return B._asyncStartSync($async$_performSpellCheck$1, $async$completer);
    },
    _formatAndSetValue$3$userInteraction(value, cause, userInteraction) {
      var exception, stack, currentText, exception0, stack0, t1, t2, t3, t4, textCommitted, value0, exception1, oldTextSelection, _this = this;
      value = value;
      t1 = _this._widget.controller._change_notifier$_value;
      t2 = t1.text;
      t3 = value.text;
      t4 = t1.composing;
      if (t4.start !== t4.end) {
        t4 = value.composing;
        textCommitted = t4.start === t4.end;
      } else
        textCommitted = false;
      t1 = t1.selection.$eq(0, value.selection);
      if (t2 !== t3 || textCommitted)
        try {
          value0 = C.JSArray_methods.fold$2(_this._widget.inputFormatters, value, new A.EditableTextState__formatAndSetValue_closure(_this));
          value = value0 == null ? value : value0;
          t3 = _this.__EditableTextState__spellCheckConfiguration_A;
          t3 === $ && B.throwUnnamedLateFieldNI();
          if (t3._spellCheckEnabled && value.text.length !== 0 && _this._widget.controller._change_notifier$_value.text !== value.text)
            _this._performSpellCheck$1(value.text);
        } catch (exception1) {
          exception = B.unwrapException(exception1);
          stack = B.getTraceFromException(exception1);
          t3 = B.ErrorDescription$("while applying input formatters");
          B.FlutterError_reportError(new B.FlutterErrorDetails(exception, stack, "widgets", t3, null, false));
        }
      t3 = _this._widget.controller;
      oldTextSelection = t3._change_notifier$_value.selection;
      ++_this._batchEditDepth;
      t3.super$ValueNotifier$value(value);
      if (t1)
        if (userInteraction)
          t1 = cause === D.SelectionChangedCause_2 || cause === C.SelectionChangedCause_4;
        else
          t1 = false;
      else
        t1 = true;
      if (t1) {
        _this._handleSelectionChanged$2(_this._widget.controller._change_notifier$_value.selection, cause);
        _this._bringIntoViewBySelectionState$3(oldTextSelection, value.selection, cause);
      }
      t1 = _this._widget;
      currentText = t1.controller._change_notifier$_value.text;
      if (t2 !== currentText)
        try {
          t1 = t1.onChanged;
          if (t1 != null)
            t1.call$1(currentText);
        } catch (exception) {
          exception0 = B.unwrapException(exception);
          stack0 = B.getTraceFromException(exception);
          t1 = B.ErrorDescription$("while calling onChanged");
          B.FlutterError_reportError(new B.FlutterErrorDetails(exception0, stack0, "widgets", t1, null, false));
        }
      --_this._batchEditDepth;
      _this._updateRemoteEditingValueIfNeeded$0();
    },
    _formatAndSetValue$2(value, cause) {
      return this._formatAndSetValue$3$userInteraction(value, cause, false);
    },
    _bringIntoViewBySelectionState$3(oldSelection, newSelection, cause) {
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
          if (cause === D.SelectionChangedCause_2 || cause === D.SelectionChangedCause_6)
            this.bringIntoView$1(newSelection.get$extent());
          break;
        case 3:
        case 5:
        case 1:
        case 0:
          if (cause === D.SelectionChangedCause_6)
            if (oldSelection.baseOffset !== newSelection.baseOffset)
              this.bringIntoView$1(newSelection.get$base());
            else if (oldSelection.extentOffset !== newSelection.extentOffset)
              this.bringIntoView$1(newSelection.get$extent());
          break;
      }
    },
    _onCursorColorTick$0() {
      var effectiveOpacity, _this = this,
        t1 = _this._widget.cursorColor.get$alpha(),
        t2 = _this.get$_cursorBlinkOpacityController().__AnimationController__value_A;
      t2 === $ && B.throwUnnamedLateFieldNI();
      effectiveOpacity = Math.min(t1 / 255, t2);
      t2 = _this.get$renderEditable();
      t1 = _this._widget.cursorColor.withOpacity$1(effectiveOpacity);
      t2.get$_caretPainter().set$caretColor(t1);
      if (_this._widget.showCursor) {
        t1 = _this.get$_cursorBlinkOpacityController().__AnimationController__value_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t1 = t1 > 0;
      } else
        t1 = false;
      _this._cursorVisibilityNotifier.set$value(t1);
    },
    get$_showBlinkingCursor() {
      var t1, t2, _this = this;
      if (_this._widget.focusNode.get$hasFocus()) {
        t1 = _this._widget;
        t2 = t1.controller._change_notifier$_value.selection;
        t1 = t2.start === t2.end && t1.showCursor && _this._tickersEnabled && !_this.get$renderEditable()._floatingCursorOn;
      } else
        t1 = false;
      return t1;
    },
    _startCursorBlink$0() {
      var t1, _this = this;
      if (!_this._widget.showCursor)
        return;
      if (!_this._tickersEnabled)
        return;
      t1 = _this._cursorTimer;
      if (t1 != null)
        t1.cancel$0();
      _this.get$_cursorBlinkOpacityController().set$value(1);
      if (_this._widget.cursorOpacityAnimates)
        _this.get$_cursorBlinkOpacityController().animateWith$1(_this.get$_iosBlinkCursorSimulation())._primaryCompleter.future.whenComplete$1(_this.get$_onCursorTick());
      else
        _this._cursorTimer = B.Timer_Timer$periodic(C.Duration_500000, new A.EditableTextState__startCursorBlink_closure(_this));
    },
    _onCursorTick$0() {
      var t2, _this = this,
        t1 = _this._obscureShowCharTicksPending;
      if (t1 > 0) {
        $.WidgetsBinding__instance.toString;
        $.$get$EnginePlatformDispatcher__instance();
        --t1;
        _this._obscureShowCharTicksPending = t1;
        if (t1 === 0)
          _this.setState$1(new A.EditableTextState__onCursorTick_closure());
      }
      if (_this._widget.cursorOpacityAnimates) {
        t1 = _this._cursorTimer;
        if (t1 != null)
          t1.cancel$0();
        _this._cursorTimer = B.Timer_Timer(C.Duration_0, new A.EditableTextState__onCursorTick_closure0(_this));
      } else {
        t1 = _this._cursorTimer;
        t1 = t1 == null ? null : t1._handle != null;
        if (t1 !== true && _this._tickersEnabled)
          _this._cursorTimer = B.Timer_Timer$periodic(C.Duration_500000, new A.EditableTextState__onCursorTick_closure1(_this));
        t1 = _this.get$_cursorBlinkOpacityController();
        t2 = _this.get$_cursorBlinkOpacityController().__AnimationController__value_A;
        t2 === $ && B.throwUnnamedLateFieldNI();
        t1.set$value(t2 === 0 ? 1 : 0);
      }
    },
    _stopCursorBlink$1$resetCharTicks(resetCharTicks) {
      var _this = this,
        t1 = _this.get$_cursorBlinkOpacityController();
      t1.set$value(_this.get$renderEditable()._floatingCursorOn ? 1 : 0);
      t1 = _this._cursorTimer;
      if (t1 != null)
        t1.cancel$0();
      _this._cursorTimer = null;
      if (resetCharTicks)
        _this._obscureShowCharTicksPending = 0;
    },
    _stopCursorBlink$0() {
      return this._stopCursorBlink$1$resetCharTicks(true);
    },
    _startOrStopCursorTimerIfNeeded$0() {
      var _this = this;
      if (!_this.get$_showBlinkingCursor())
        _this._stopCursorBlink$0();
      else if (_this._cursorTimer == null)
        _this._startCursorBlink$0();
    },
    _didChangeTextEditingValue$0() {
      var t1, t2, t3, _this = this;
      if (_this._widget.focusNode.get$hasFocus() && !_this._widget.controller._change_notifier$_value.selection.get$isValid()) {
        t1 = _this.get$_didChangeTextEditingValue();
        _this._widget.controller.removeListener$1(t1);
        t2 = _this._widget.controller;
        t3 = _this._adjustedSelectionWhenFocused$0();
        t3.toString;
        t2.set$selection(t3);
        _this._widget.controller.addListener$1(t1);
      }
      _this._updateRemoteEditingValueIfNeeded$0();
      _this._startOrStopCursorTimerIfNeeded$0();
      _this._updateOrDisposeSelectionOverlayIfNeeded$0();
      _this.setState$1(new A.EditableTextState__didChangeTextEditingValue_closure());
      _this.get$_verticalSelectionUpdateAction().stopCurrentVerticalRunIfSelectionChanges$0();
    },
    _editable_text$_handleFocusChanged$0() {
      var t1, t2, updatedSelection, _this = this;
      if (_this._widget.focusNode.get$hasFocus() && _this._widget.focusNode.consumeKeyboardToken$0())
        _this._openInputConnection$0();
      else if (!_this._widget.focusNode.get$hasFocus()) {
        _this._closeInputConnectionIfNeeded$0();
        t1 = _this._widget.controller;
        t1.super$ValueNotifier$value(t1._change_notifier$_value.copyWith$1$composing(C.TextRange_m1_m1));
      }
      _this._startOrStopCursorTimerIfNeeded$0();
      _this._updateOrDisposeSelectionOverlayIfNeeded$0();
      t1 = _this._widget.focusNode.get$hasFocus();
      t2 = $.WidgetsBinding__instance;
      if (t1) {
        t2.WidgetsBinding__observers.push(_this);
        t1 = _this._framework$_element;
        t1.toString;
        _this.__EditableTextState__lastBottomViewInset_A = B.View_maybeOf(t1)._viewInsets.bottom;
        if (!_this._widget.readOnly)
          _this._scheduleShowCaretOnScreen$1$withAnimation(true);
        updatedSelection = _this._adjustedSelectionWhenFocused$0();
        if (updatedSelection != null)
          _this._handleSelectionChanged$2(updatedSelection, null);
      } else {
        t2.removeObserver$1(_this);
        _this.setState$1(new A.EditableTextState__handleFocusChanged_closure(_this));
      }
      _this.updateKeepAlive$0();
    },
    _adjustedSelectionWhenFocused$0() {
      var t1, shouldSelectAll, selection, _this = this,
        _0_0 = B.defaultTargetPlatform();
      $label0$0: {
        if (C.TargetPlatform_0 === _0_0 || C.TargetPlatform_2 === _0_0 || C.TargetPlatform_1 === _0_0)
          break $label0$0;
        if (C.TargetPlatform_4 === _0_0 || C.TargetPlatform_3 === _0_0 || C.TargetPlatform_5 === _0_0)
          break $label0$0;
      }
      t1 = _this._widget;
      if (t1.enableInteractiveSelection)
        shouldSelectAll = t1.maxLines === 1 && !_this._nextFocusChangeIsInternal && !_this._justResumed;
      else
        shouldSelectAll = false;
      _this._justResumed = false;
      if (shouldSelectAll)
        selection = B.TextSelection$(C.TextAffinity_1, 0, t1.controller._change_notifier$_value.text.length, false);
      else
        selection = !t1.controller._change_notifier$_value.selection.get$isValid() ? A.TextSelection$collapsed(C.TextAffinity_1, _this._widget.controller._change_notifier$_value.text.length) : null;
      return selection;
    },
    _compositeCallback$1(layer) {
      if (this.get$renderEditable()._object$_owner == null || !this.get$_hasInputConnection())
        return;
      this._updateSizeAndTransform$0();
    },
    _updateSizeAndTransform$0() {
      var size = this.get$renderEditable().get$size(),
        transform = this.get$renderEditable().getTransformTo$1(null),
        t1 = this._textInputConnection;
      if (!size.$eq(0, t1._cachedSize) || !transform.$eq(0, t1._cachedTransform)) {
        t1._cachedSize = size;
        t1._cachedTransform = transform;
        $.$get$TextInput__instance()._setEditableSizeAndTransform$2(size, transform);
      }
    },
    _schedulePeriodicPostFrameCallbacks$1(duration) {
      var composingRange, composingRect, offset, _this = this;
      if (!_this.get$_hasInputConnection())
        return;
      _this._updateSelectionRects$0();
      composingRange = _this._widget.controller._change_notifier$_value.composing;
      composingRect = _this.get$renderEditable().getRectForComposingRange$1(composingRange);
      if (composingRect == null) {
        offset = composingRange.get$isValid() ? composingRange.start : 0;
        composingRect = _this.get$renderEditable().getLocalRectForCaret$1(new B.TextPosition(offset, C.TextAffinity_1));
      }
      _this._textInputConnection.setComposingRect$1(composingRect);
      _this._updateCaretRectIfNeeded$0();
      $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(_this.get$_schedulePeriodicPostFrameCallbacks());
    },
    _schedulePeriodicPostFrameCallbacks$0() {
      return this._schedulePeriodicPostFrameCallbacks$1(null);
    },
    _updateSelectionRects$1$force(force) {
      var t1, t2, t3, t4, t5, newCacheKey, comparison, rects, plainText, characterRange, graphemeStart, graphemeEnd, boxes, box, _this = this, _null = null;
      _this.get$_stylusHandwritingEnabled();
      t1 = B.defaultTargetPlatform();
      if (t1 !== C.TargetPlatform_2)
        return;
      if (C.JSArray_methods.get$single(_this.get$_scrollController()._positions)._userScrollDirection !== C.ScrollDirection_0)
        return;
      t1 = _this.get$renderEditable()._editable$_textPainter._text_painter$_text;
      t1.toString;
      _this._widget.toString;
      $label0$0: {
        t2 = _this._framework$_element;
        t2.toString;
        t2 = B.MediaQuery__maybeOf(t2, C._MediaQueryAspect_4);
        t2 = t2 == null ? _null : t2.get$textScaler();
        if (t2 == null)
          t2 = C._LinearTextScaler_1;
        break $label0$0;
      }
      t3 = _this._widget.textAlign;
      t4 = _this.get$_editable_text$_textDirection();
      _this._widget.toString;
      t5 = _this._framework$_element;
      t5.toString;
      t5 = B.DefaultTextHeightBehavior_maybeOf(t5);
      newCacheKey = new A._ScribbleCacheKey(t3, t4, t2, t5, _null, _this._widget.get$strutStyle(), _this._placeholderLocation, _this.get$renderEditable().get$size(), t1);
      if (force)
        comparison = C.RenderComparison_3;
      else {
        t2 = _this._scribbleCacheKey;
        t2 = t2 == null ? _null : t2.compare$1(newCacheKey);
        comparison = t2 == null ? C.RenderComparison_3 : t2;
      }
      if (comparison.index < 3)
        return;
      _this._scribbleCacheKey = newCacheKey;
      rects = B._setArrayType([], type$.JSArray_SelectionRect);
      plainText = t1.toPlainText$1$includeSemanticsLabels(false);
      characterRange = new B.StringCharacterRange(plainText, 0, 0);
      for (graphemeStart = 0; characterRange._advanceEnd$2(1, characterRange._characters_impl$_end); graphemeStart = graphemeEnd) {
        t1 = characterRange._currentCache;
        graphemeEnd = graphemeStart + (t1 == null ? characterRange._currentCache = C.JSString_methods.substring$2(plainText, characterRange._characters_impl$_start, characterRange._characters_impl$_end) : t1).length;
        t1 = _this.get$renderEditable();
        t2 = graphemeStart < graphemeEnd;
        t3 = t2 ? graphemeStart : graphemeEnd;
        boxes = t1.getBoxesForSelection$1(new B.TextSelection(graphemeStart, graphemeEnd, C.TextAffinity_1, false, t3, t2 ? graphemeEnd : graphemeStart));
        box = boxes.length === 0 ? _null : C.JSArray_methods.get$first(boxes);
        if (box != null) {
          t1 = _this.get$renderEditable();
          t2 = t1._box$_size;
          t1 = t2 == null ? B.throwExpression(B.StateError$("RenderBox was not laid out: " + B.getRuntimeTypeOfDartObject(t1).toString$0(0) + "#" + B.shortHash(t1))) : t2;
          t2 = box.top;
          if (0 + t1._dy <= t2)
            break;
          t3 = box.right;
          if (0 <= t3 && box.left <= 0 + t1._dx && 0 <= box.bottom)
            rects.push(new A.SelectionRect(graphemeStart, new B.Rect(box.left, t2, t3, box.bottom), box.direction));
        }
      }
      t1 = _this._textInputConnection;
      if (!B.listEquals(t1._cachedSelectionRects, rects)) {
        t1._cachedSelectionRects = rects;
        $.$get$TextInput__instance()._setSelectionRects$1(rects);
      }
    },
    _updateSelectionRects$0() {
      return this._updateSelectionRects$1$force(false);
    },
    _updateCaretRectIfNeeded$0() {
      var caretRect,
        selection = this.get$renderEditable()._selection,
        t1 = selection.get$isValid();
      if (!t1)
        return;
      caretRect = this.get$renderEditable().getLocalRectForCaret$1(new B.TextPosition(selection.start, C.TextAffinity_1));
      this._textInputConnection.setCaretRect$1(caretRect);
    },
    get$_editable_text$_textDirection() {
      this._widget.toString;
      var t1 = this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection;
      return t1;
    },
    get$renderEditable() {
      var t1, _this = this,
        value = _this.__EditableTextState_renderEditable_FI;
      if (value === $) {
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, _this._editableKey).get$renderObject();
        t1.toString;
        type$.RenderEditable._as(t1);
        _this.__EditableTextState_renderEditable_FI !== $ && B.throwUnnamedLateFieldADI();
        _this.__EditableTextState_renderEditable_FI = t1;
        value = t1;
      }
      return value;
    },
    userUpdateTextEditingValue$2(value, cause) {
      var _this = this,
        t1 = _this._widget,
        t2 = t1.readOnly;
      t1 = t1.controller._change_notifier$_value;
      if (t2 ? !t1.selection.$eq(0, value.selection) : !t1.$eq(0, value))
        _this._scheduleShowCaretOnScreen$1$withAnimation(true);
      if (value.$eq(0, _this._widget.controller._change_notifier$_value)) {
        if (!_this._widget.focusNode.get$hasFocus()) {
          _this._nextFocusChangeIsInternal = true;
          $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager.addListener$1(_this.get$_unflagInternalFocus());
          _this._widget.focusNode.requestFocus$0();
          if (_this._selectionOverlay == null)
            _this._selectionOverlay = _this._createSelectionOverlay$0();
        }
        return;
      }
      _this._formatAndSetValue$3$userInteraction(value, cause, true);
    },
    bringIntoView$1(position) {
      var _this = this,
        targetOffset = _this._getOffsetToRevealCaret$1(_this.get$renderEditable().getLocalRectForCaret$1(position));
      _this.get$_scrollController().jumpTo$1(targetOffset.offset);
      _this.get$renderEditable().showOnScreen$1$rect(targetOffset.rect);
    },
    showToolbar$0() {
      $.$get$BrowserContextMenu__instance();
      return false;
    },
    hideToolbar$1(hideHandles) {
      var t1, _this = this;
      _this._disposeScrollNotificationObserver$0();
      if (hideHandles) {
        t1 = _this._selectionOverlay;
        if (t1 != null) {
          t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
          t1 === $ && B.throwUnnamedLateFieldNI();
          t1.hide$0();
        }
      } else {
        t1 = _this._selectionOverlay;
        if (t1 == null)
          t1 = null;
        else {
          t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
          t1 === $ && B.throwUnnamedLateFieldNI();
          t1 = t1.get$toolbarIsVisible();
        }
        if (t1 === true) {
          t1 = _this._selectionOverlay;
          if (t1 != null) {
            t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
            t1 === $ && B.throwUnnamedLateFieldNI();
            t1.hideToolbar$0();
          }
        }
      }
    },
    hideToolbar$0() {
      return this.hideToolbar$1(true);
    },
    toggleToolbar$1(hideHandles) {
      var _this = this,
        selectionOverlay = _this._selectionOverlay,
        t1 = (selectionOverlay == null ? _this._selectionOverlay = _this._createSelectionOverlay$0() : selectionOverlay).__TextSelectionOverlay__selectionOverlay_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      if (t1.get$toolbarIsVisible())
        _this.hideToolbar$1(hideHandles);
      else
        _this.showToolbar$0();
    },
    toggleToolbar$0() {
      return this.toggleToolbar$1(true);
    },
    showSpellCheckSuggestionsToolbar$0() {
      var t1 = this.__EditableTextState__spellCheckConfiguration_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      if (t1._spellCheckEnabled)
        $.$get$BrowserContextMenu__instance();
      return false;
    },
    showMagnifier$1(positionToShow) {
      var t2, position, t3,
        t1 = this._selectionOverlay;
      if (t1 == null)
        return;
      t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1 = t1._magnifierController.get$shown();
      t2 = this._selectionOverlay;
      if (t1) {
        t1 = t2.renderObject;
        position = t1.getPositionForPoint$1(positionToShow);
        t2._updateSelectionOverlay$0();
        t3 = t2.__TextSelectionOverlay__selectionOverlay_F;
        t3 === $ && B.throwUnnamedLateFieldNI();
        t3.updateMagnifier$1(t2._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(position, positionToShow, t1));
      } else {
        t1 = t2.renderObject;
        position = t1.getPositionForPoint$1(positionToShow);
        t2._updateSelectionOverlay$0();
        t3 = t2.__TextSelectionOverlay__selectionOverlay_F;
        t3 === $ && B.throwUnnamedLateFieldNI();
        t3.showMagnifier$1(t2._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(position, positionToShow, t1));
      }
    },
    hideMagnifier$0() {
      var t1 = this._selectionOverlay;
      if (t1 == null)
        return;
      t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      if (t1._magnifierController.get$shown()) {
        t1 = this._selectionOverlay.__TextSelectionOverlay__selectionOverlay_F;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t1.hideMagnifier$0();
      }
    },
    insertTextPlaceholder$1(size) {
      var _this = this;
      _this.get$_stylusHandwritingEnabled();
      if (!_this._widget.controller._change_notifier$_value.selection.get$isValid())
        return;
      _this.setState$1(new A.EditableTextState_insertTextPlaceholder_closure(_this));
    },
    removeTextPlaceholder$0() {
      var t1, _this = this;
      _this.get$_stylusHandwritingEnabled();
      t1 = _this._placeholderLocation;
      if (t1 === -1)
        return;
      _this.setState$1(new A.EditableTextState_removeTextPlaceholder_closure(_this));
    },
    performSelector$1(selectorName) {
      var t1, primaryContext,
        intent = D.Map_vzfpu.$index(0, selectorName);
      if (intent != null) {
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager._primaryFocus;
        primaryContext = t1 == null ? null : t1._focus_manager$_context;
        if (primaryContext != null)
          A.Actions_invoke(primaryContext, intent, type$.Intent);
      }
    },
    get$textInputConfiguration() {
      var autofillHints, autofillConfiguration, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, _this = this;
      _this._widget.toString;
      autofillHints = J.JSArray_JSArray$markFixed(C.List_empty.slice(0), type$.String);
      autofillConfiguration = autofillHints != null ? new A.AutofillConfiguration(true, "EditableText-" + B.Primitives_objectHashCode(_this), autofillHints, _this._widget.controller._change_notifier$_value, null) : D.AutofillConfiguration_JoX;
      t1 = _this._framework$_element;
      t1.toString;
      t1 = B.View_maybeOf(t1).viewId;
      _this._editable_text$_viewId = t1;
      t2 = _this._widget;
      t3 = t2.keyboardType;
      t4 = t2.readOnly;
      t5 = t2.obscureText;
      t6 = t2.smartDashesType;
      t7 = t2.smartQuotesType;
      if (t2.enableInteractiveSelection)
        t8 = !t4 || !t5;
      else
        t8 = false;
      t2 = t2.textInputAction;
      if (t2 == null)
        t2 = t3.$eq(0, C.TextInputType_1_null_null) ? C.TextInputAction_12 : C.TextInputAction_2;
      t9 = _this._widget;
      t10 = t9.textCapitalization;
      t9 = t9.keyboardAppearance;
      return A.TextInputConfiguration$(C.List_empty, true, autofillConfiguration, false, true, t8, true, t2, t3, t9, t5, t4, t6, t7, t10, t1);
    },
    showAutocorrectionPromptRect$2(start, end) {
      this.setState$1(new A.EditableTextState_showAutocorrectionPromptRect_closure(this, start, end));
    },
    _semanticsOnCopy$1(controls) {
      var _this = this,
        t1 = _this._widget,
        t2 = false;
      if (t1.enableInteractiveSelection)
        if (t1.focusNode.get$hasFocus())
          if (type$.TextSelectionHandleControls._is(_this._widget.selectionControls))
            t1 = _this.get$copyEnabled();
          else if (_this.get$copyEnabled()) {
            t1 = _this._widget.selectionControls == null && null;
            t1 = t1 === true;
          } else
            t1 = t2;
        else
          t1 = t2;
      else
        t1 = t2;
      return t1 ? new A.EditableTextState__semanticsOnCopy_closure(_this, controls) : null;
    },
    _semanticsOnCut$1(controls) {
      var _this = this,
        t1 = _this._widget,
        t2 = false;
      if (t1.enableInteractiveSelection)
        if (t1.focusNode.get$hasFocus())
          if (type$.TextSelectionHandleControls._is(_this._widget.selectionControls))
            t1 = _this.get$cutEnabled();
          else if (_this.get$cutEnabled()) {
            t1 = _this._widget.selectionControls == null && null;
            t1 = t1 === true;
          } else
            t1 = t2;
        else
          t1 = t2;
      else
        t1 = t2;
      return t1 ? new A.EditableTextState__semanticsOnCut_closure(_this, controls) : null;
    },
    _semanticsOnPaste$1(controls) {
      var _this = this,
        t1 = _this._widget,
        t2 = false;
      if (t1.enableInteractiveSelection)
        if (t1.focusNode.get$hasFocus()) {
          if (type$.TextSelectionHandleControls._is(_this._widget.selectionControls))
            t1 = _this.get$pasteEnabled();
          else if (_this.get$pasteEnabled()) {
            t1 = _this._widget.selectionControls == null && null;
            t1 = t1 === true;
          } else
            t1 = false;
          t1 = t1 && _this.clipboardStatus.value === D.ClipboardStatus_0;
        } else
          t1 = t2;
      else
        t1 = t2;
      return t1 ? new A.EditableTextState__semanticsOnPaste_closure(_this, controls) : null;
    },
    _moveBeyondTextBoundary$3(extent, $forward, textBoundary) {
      var newOffset,
        t1 = extent.offset;
      if ($forward) {
        t1 = textBoundary.getTrailingTextBoundaryAt$1(t1);
        newOffset = t1 == null ? this._widget.controller._change_notifier$_value.text.length : t1;
      } else {
        t1 = textBoundary.getLeadingTextBoundaryAt$1(t1 - 1);
        newOffset = t1 == null ? 0 : t1;
      }
      return new B.TextPosition(newOffset, C.TextAffinity_1);
    },
    _moveToTextBoundary$3(extent, $forward, textBoundary) {
      var t1, caretOffset;
      switch (extent.affinity.index) {
        case 0:
          t1 = extent.offset;
          if (t1 < 1 && !$forward)
            return C.TextPosition_0_TextAffinity_1;
          caretOffset = Math.max(0, t1 - 1);
          break;
        case 1:
          caretOffset = extent.offset;
          break;
        default:
          caretOffset = null;
      }
      if ($forward) {
        t1 = textBoundary.getTrailingTextBoundaryAt$1(caretOffset);
        t1 = new B.TextPosition(t1 == null ? this._widget.controller._change_notifier$_value.text.length : t1, C.TextAffinity_0);
      } else {
        t1 = textBoundary.getLeadingTextBoundaryAt$1(caretOffset);
        t1 = new B.TextPosition(t1 == null ? 0 : t1, C.TextAffinity_1);
      }
      return t1;
    },
    _characterBoundary$0() {
      var t1 = this._widget,
        t2 = t1.obscureText;
      t1 = t1.controller._change_notifier$_value;
      return t2 ? new A._CodePointBoundary(t1.text) : new B.CharacterBoundary(t1.text);
    },
    _nextWordBoundary$0() {
      var t2,
        t1 = this._widget;
      if (t1.obscureText)
        t1 = new B.DocumentBoundary(t1.controller._change_notifier$_value.text);
      else {
        t1 = this.get$renderEditable()._editable$_textPainter;
        t2 = t1._text_painter$_text;
        t2.toString;
        t1 = new B.WordBoundary(t2, t1._layoutCache.layout._paragraph).get$moveByWordBoundary();
      }
      return t1;
    },
    _linebreak$0() {
      var t1 = this._widget;
      return t1.obscureText ? new B.DocumentBoundary(t1.controller._change_notifier$_value.text) : new B.LineBoundary(this.get$renderEditable());
    },
    _paragraphBoundary$0() {
      return new B.ParagraphBoundary(this._widget.controller._change_notifier$_value.text);
    },
    _documentBoundary$0() {
      return new B.DocumentBoundary(this._widget.controller._change_notifier$_value.text);
    },
    _transposeCharacters$1(intent) {
      var text, transposing, t2, _this = this,
        t1 = _this._widget.controller._change_notifier$_value.text;
      if ((t1.length === 0 ? C.StringCharacters_GVp : new B.StringCharacters(t1)).get$length(0) > 1) {
        t1 = _this._widget.controller._change_notifier$_value.selection;
        t1 = t1.start !== t1.end || t1.baseOffset === 0;
      } else
        t1 = true;
      if (t1)
        return;
      t1 = _this._widget.controller._change_notifier$_value;
      text = t1.text;
      t1 = t1.selection.baseOffset;
      transposing = B.StringCharacterRange_StringCharacterRange$at(text, t1);
      t2 = transposing._characters_impl$_start;
      if (t1 === text.length)
        transposing._retractStart$2(2, t2);
      else {
        transposing._retractStart$2(1, t2);
        transposing._advanceEnd$2(1, transposing._characters_impl$_start);
      }
      t1 = transposing._characters_impl$_string;
      _this.userUpdateTextEditingValue$2(new B.TextEditingValue(C.JSString_methods.substring$2(t1, 0, transposing._characters_impl$_start) + new B.StringCharacters(transposing.get$current()).get$last(0) + new B.StringCharacters(transposing.get$current()).get$first(0) + C.JSString_methods.substring$1(t1, transposing._characters_impl$_end), A.TextSelection$collapsed(C.TextAffinity_1, transposing._characters_impl$_start + transposing.get$current().length), C.TextRange_m1_m1), C.SelectionChangedCause_4);
    },
    _replaceText$1(intent) {
      var t1 = this._widget.controller._change_notifier$_value,
        newValue = intent.currentTextEditingValue.replaced$2(intent.replacementRange, intent.replacementText);
      this.userUpdateTextEditingValue$2(newValue, intent.cause);
      if (newValue.$eq(0, t1))
        this._didChangeTextEditingValue$0();
    },
    _scrollToDocumentBoundary$1(intent) {
      if (intent.forward)
        this.bringIntoView$1(new B.TextPosition(this._widget.controller._change_notifier$_value.text.length, C.TextAffinity_1));
      else
        this.bringIntoView$1(C.TextPosition_0_TextAffinity_1);
    },
    _editable_text$_scroll$1(intent) {
      var position, t1, t2, state, increment, t3, destination, _this = this;
      if (intent.type !== C.ScrollIncrementType_1)
        return;
      position = C.JSArray_methods.get$single(_this.get$_scrollController()._positions);
      if (_this._widget.maxLines === 1) {
        t1 = _this.get$_scrollController();
        t2 = position._scroll_position$_maxScrollExtent;
        t2.toString;
        t1.jumpTo$1(t2);
        return;
      }
      t1 = position._scroll_position$_maxScrollExtent;
      t1.toString;
      if (t1 === 0) {
        t1 = position._scroll_position$_minScrollExtent;
        t1.toString;
        t1 = t1 === 0;
      } else
        t1 = false;
      if (t1)
        return;
      state = type$.nullable_ScrollableState._as(_this._scrollableKey.get$currentState());
      state.toString;
      increment = B.ScrollAction_getDirectionalIncrement(state, intent);
      t1 = position._pixels;
      t1.toString;
      t2 = position._scroll_position$_minScrollExtent;
      t2.toString;
      t3 = position._scroll_position$_maxScrollExtent;
      t3.toString;
      destination = B.clampDouble(t1 + increment, t2, t3);
      if (destination === t1)
        return;
      _this.get$_scrollController().jumpTo$1(destination);
    },
    _extendSelectionByPage$1(intent) {
      var extentRect, state, increment, position, t1, t2, t3, t4, nextExtent, nextSelection, _this = this;
      if (_this._widget.maxLines === 1)
        return;
      extentRect = _this.get$renderEditable().getLocalRectForCaret$1(_this._widget.controller._change_notifier$_value.selection.get$extent());
      state = type$.nullable_ScrollableState._as(_this._scrollableKey.get$currentState());
      state.toString;
      increment = B.ScrollAction_getDirectionalIncrement(state, new B.ScrollIntent(intent.get$forward() ? C.AxisDirection_2 : C.AxisDirection_0, C.ScrollIncrementType_1));
      position = C.JSArray_methods.get$single(_this.get$_scrollController()._positions);
      if (intent.get$forward()) {
        t1 = _this._widget.controller._change_notifier$_value;
        if (t1.selection.extentOffset >= t1.text.length)
          return;
        t1 = extentRect.top + increment;
        t2 = position._scroll_position$_maxScrollExtent;
        t2.toString;
        t3 = _this.get$renderEditable().get$size();
        t4 = position._pixels;
        t4.toString;
        nextExtent = t1 + t4 >= t2 + t3._dy ? new B.TextPosition(_this._widget.controller._change_notifier$_value.text.length, C.TextAffinity_1) : _this.get$renderEditable().getPositionForPoint$1(B.MatrixUtils_transformPoint(_this.get$renderEditable().getTransformTo$1(null), new B.Offset(extentRect.left, t1)));
        nextSelection = _this._widget.controller._change_notifier$_value.selection.copyWith$1$extentOffset(nextExtent.offset);
      } else {
        if (_this._widget.controller._change_notifier$_value.selection.extentOffset <= 0)
          return;
        t1 = extentRect.top + increment;
        t2 = position._pixels;
        t2.toString;
        nextExtent = t1 + t2 <= 0 ? C.TextPosition_0_TextAffinity_1 : _this.get$renderEditable().getPositionForPoint$1(B.MatrixUtils_transformPoint(_this.get$renderEditable().getTransformTo$1(null), new B.Offset(extentRect.left, t1)));
        nextSelection = _this._widget.controller._change_notifier$_value.selection.copyWith$1$extentOffset(nextExtent.offset);
      }
      _this.bringIntoView$1(nextSelection.get$extent());
      _this.userUpdateTextEditingValue$2(_this._widget.controller._change_notifier$_value.copyWith$1$selection(nextSelection), C.SelectionChangedCause_4);
    },
    _updateSelection$1(intent) {
      var t1 = intent.newSelection;
      this.bringIntoView$1(t1.get$extent());
      this.userUpdateTextEditingValue$2(intent.currentTextEditingValue.copyWith$1$selection(t1), intent.cause);
    },
    get$_verticalSelectionUpdateAction() {
      var t1, _this = this,
        value = _this.__EditableTextState__verticalSelectionUpdateAction_FI;
      if (value === $) {
        t1 = B._setArrayType([], type$.JSArray_of_void_Function_Action_Intent);
        _this.__EditableTextState__verticalSelectionUpdateAction_FI !== $ && B.throwUnnamedLateFieldADI();
        value = _this.__EditableTextState__verticalSelectionUpdateAction_FI = new A._UpdateTextSelectionVerticallyAction(_this, new B.ObserverList(t1, type$.ObserverList_of_void_Function_Action_Intent), type$._UpdateTextSelectionVerticallyAction_DirectionalCaretMovementIntent);
      }
      return value;
    },
    _hideToolbarIfVisible$1(intent) {
      var t1 = this._selectionOverlay;
      if (t1 == null)
        t1 = null;
      else {
        t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t1 = t1.get$toolbarIsVisible();
      }
      if (t1 === true) {
        this.hideToolbar$1(false);
        return null;
      }
      t1 = this._framework$_element;
      t1.toString;
      return A.Actions_invoke(t1, intent, type$.DismissIntent);
    },
    get$_editable_text$_actions() {
      var t1, t2, t3, t4, value0, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, value1, t27, result, _this = this,
        value = _this.__EditableTextState__actions_FI;
      if (value === $) {
        t1 = type$.JSArray_of_void_Function_Action_Intent;
        t2 = B._setArrayType([], t1);
        t3 = type$.ObserverList_of_void_Function_Action_Intent;
        value = _this.__EditableTextState__replaceTextAction_FI;
        if (value === $) {
          t4 = B._setArrayType([], t1);
          _this.__EditableTextState__replaceTextAction_FI !== $ && B.throwUnnamedLateFieldADI();
          value = _this.__EditableTextState__replaceTextAction_FI = new B.CallbackAction(_this.get$_replaceText(), new B.ObserverList(t4, t3), type$.CallbackAction_ReplaceTextIntent);
        }
        value0 = _this.__EditableTextState__updateSelectionAction_FI;
        if (value0 === $) {
          t4 = B._setArrayType([], t1);
          _this.__EditableTextState__updateSelectionAction_FI !== $ && B.throwUnnamedLateFieldADI();
          value0 = _this.__EditableTextState__updateSelectionAction_FI = new B.CallbackAction(_this.get$_updateSelection(), new B.ObserverList(t4, t3), type$.CallbackAction_UpdateSelectionIntent);
        }
        t4 = B._setArrayType([], t1);
        t5 = B._setArrayType([], t1);
        t6 = _this.get$_characterBoundary();
        t7 = _this.get$_moveBeyondTextBoundary();
        t8 = B._setArrayType([], t1);
        t9 = _this._framework$_element;
        t9.toString;
        t9 = new A._DeleteTextAction(_this, t6, t7, new B.ObserverList(t8, t3), type$._DeleteTextAction_DeleteCharacterIntent)._makeOverridableAction$1(t9);
        t8 = _this.get$_nextWordBoundary();
        t10 = B._setArrayType([], t1);
        t11 = _this._framework$_element;
        t11.toString;
        t11 = new A._DeleteTextAction(_this, t8, t7, new B.ObserverList(t10, t3), type$._DeleteTextAction_DeleteToNextWordBoundaryIntent)._makeOverridableAction$1(t11);
        t10 = _this.get$_linebreak();
        t12 = _this.get$_moveToTextBoundary();
        t13 = B._setArrayType([], t1);
        t14 = _this._framework$_element;
        t14.toString;
        t14 = new A._DeleteTextAction(_this, t10, t12, new B.ObserverList(t13, t3), type$._DeleteTextAction_DeleteToLineBreakIntent)._makeOverridableAction$1(t14);
        t6 = A._UpdateTextSelectionAction$(_this, t6, t7, false, false, false, type$.ExtendSelectionByCharacterIntent);
        t13 = _this._framework$_element;
        t13.toString;
        t13 = t6._makeOverridableAction$1(t13);
        t6 = B._setArrayType([], t1);
        t15 = _this._framework$_element;
        t15.toString;
        t15 = new B.CallbackAction(_this.get$_extendSelectionByPage(), new B.ObserverList(t6, t3), type$.CallbackAction_ExtendSelectionByPageIntent)._makeOverridableAction$1(t15);
        t6 = A._UpdateTextSelectionAction$(_this, t8, t7, false, true, false, type$.ExtendSelectionToNextWordBoundaryIntent);
        t16 = _this._framework$_element;
        t16.toString;
        t16 = t6._makeOverridableAction$1(t16);
        t6 = _this.get$_paragraphBoundary();
        t17 = A._UpdateTextSelectionAction$(_this, t6, t7, false, true, false, type$.ExtendSelectionToNextParagraphBoundaryIntent);
        t18 = _this._framework$_element;
        t18.toString;
        t18 = t17._makeOverridableAction$1(t18);
        t17 = A._UpdateTextSelectionAction$(_this, t10, t12, false, true, false, type$.ExtendSelectionToLineBreakIntent);
        t19 = _this._framework$_element;
        t19.toString;
        t19 = t17._makeOverridableAction$1(t19);
        t17 = _this.get$_verticalSelectionUpdateAction();
        t20 = _this._framework$_element;
        t20.toString;
        t20 = t17._makeOverridableAction$1(t20);
        t17 = _this.get$_verticalSelectionUpdateAction();
        t21 = _this._framework$_element;
        t21.toString;
        t21 = t17._makeOverridableAction$1(t21);
        t6 = A._UpdateTextSelectionAction$(_this, t6, t7, false, true, false, type$.ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent);
        t17 = _this._framework$_element;
        t17.toString;
        t17 = t6._makeOverridableAction$1(t17);
        t6 = _this.get$_documentBoundary();
        t22 = A._UpdateTextSelectionAction$(_this, t6, t7, false, true, false, type$.ExtendSelectionToDocumentBoundaryIntent);
        t23 = _this._framework$_element;
        t23.toString;
        t23 = t22._makeOverridableAction$1(t23);
        t7 = A._UpdateTextSelectionAction$(_this, t8, t7, false, true, false, type$.ExtendSelectionToNextWordBoundaryOrCaretLocationIntent);
        t8 = _this._framework$_element;
        t8.toString;
        t8 = t7._makeOverridableAction$1(t8);
        t7 = B._setArrayType([], t1);
        t22 = _this._framework$_element;
        t22.toString;
        t22 = new B.CallbackAction(_this.get$_scrollToDocumentBoundary(), new B.ObserverList(t7, t3), type$.CallbackAction_ScrollToDocumentBoundaryIntent)._makeOverridableAction$1(t22);
        t7 = B._setArrayType([], t1);
        t10 = A._UpdateTextSelectionAction$(_this, t10, t12, false, true, true, type$.ExpandSelectionToLineBreakIntent);
        t24 = _this._framework$_element;
        t24.toString;
        t24 = t10._makeOverridableAction$1(t24);
        t12 = A._UpdateTextSelectionAction$(_this, t6, t12, true, true, true, type$.ExpandSelectionToDocumentBoundaryIntent);
        t6 = _this._framework$_element;
        t6.toString;
        t6 = t12._makeOverridableAction$1(t6);
        t12 = B._setArrayType([], t1);
        t10 = _this._framework$_element;
        t10.toString;
        t10 = new A._SelectAllAction(_this, new B.ObserverList(t12, t3))._makeOverridableAction$1(t10);
        t12 = B._setArrayType([], t1);
        t25 = _this._framework$_element;
        t25.toString;
        t25 = new A._CopySelectionAction(_this, new B.ObserverList(t12, t3))._makeOverridableAction$1(t25);
        t12 = B._setArrayType([], t1);
        t26 = _this._framework$_element;
        t26.toString;
        t26 = new B.CallbackAction(new A.EditableTextState__actions_closure(_this), new B.ObserverList(t12, t3), type$.CallbackAction_PasteTextIntent)._makeOverridableAction$1(t26);
        value1 = _this.__EditableTextState__transposeCharactersAction_FI;
        if (value1 === $) {
          t12 = B._setArrayType([], t1);
          _this.__EditableTextState__transposeCharactersAction_FI !== $ && B.throwUnnamedLateFieldADI();
          value1 = _this.__EditableTextState__transposeCharactersAction_FI = new B.CallbackAction(_this.get$_transposeCharacters(), new B.ObserverList(t12, t3), type$.CallbackAction_TransposeCharactersIntent);
        }
        t12 = _this._framework$_element;
        t12.toString;
        t12 = value1._makeOverridableAction$1(t12);
        t1 = B._setArrayType([], t1);
        t27 = _this._framework$_element;
        t27.toString;
        result = B.LinkedHashMap_LinkedHashMap$_literal([D.Type_9Gf, new B.DoNothingAction(false, new B.ObserverList(t2, t3)), D.Type_ReplaceTextIntent_Vhj, value, D.Type_UpdateSelectionIntent_6IE, value0, C.Type_DirectionalFocusIntent_oIa, new B.DirectionalFocusAction(true, new B.ObserverList(t4, t3)), C.Type_DismissIntent_GEb, new B.CallbackAction(_this.get$_hideToolbarIfVisible(), new B.ObserverList(t5, t3), type$.CallbackAction_DismissIntent), D.Type_DeleteCharacterIntent_SaE, t9, D.Type_ar1, t11, D.Type_DeleteToLineBreakIntent_NS7, t14, D.Type_J79, t13, D.Type_ExtendSelectionByPageIntent_ndp, t15, D.Type_b1K, t16, D.Type_w20, t18, D.Type_taM, t19, D.Type_Ud8, t20, D.Type_Ud80, t21, D.Type_Q3J, t17, D.Type_b1K0, t23, D.Type_srU, t8, D.Type_i87, t22, C.Type_ScrollIntent_tOb, new B.CallbackAction(_this.get$_editable_text$_scroll(), new B.ObserverList(t7, t3), type$.CallbackAction_ScrollIntent), D.Type_5J0, t24, D.Type_7w3, t6, D.Type_SelectAllTextIntent_7fB, t10, D.Type_CopySelectionTextIntent_GQP, t25, D.Type_PasteTextIntent_40q, t26, D.Type_TransposeCharactersIntent_tPt, t12, D.Type_EditableTextTapOutsideIntent_Ih6, new A._EditableTextTapOutsideAction(new B.ObserverList(t1, t3))._makeOverridableAction$1(t27)], type$.Type, type$.Action_Intent);
        _this.__EditableTextState__actions_FI !== $ && B.throwUnnamedLateFieldADI();
        _this.__EditableTextState__actions_FI = result;
        value = result;
      }
      return value;
    },
    build$1(context) {
      var controls, t1, _this = this, _null = null;
      _this.super$AutomaticKeepAliveClientMixin$build(context);
      controls = _this._widget.selectionControls;
      $label0$0: {
        t1 = B.MediaQuery__maybeOf(context, C._MediaQueryAspect_4);
        t1 = t1 == null ? _null : t1.get$textScaler();
        if (t1 == null)
          t1 = C._LinearTextScaler_1;
        break $label0$0;
      }
      return new A._CompositionCallback(_this.get$_compositeCallback(), _this.get$_hasInputConnection(), B.Actions$(_this.get$_editable_text$_actions(), new B.Builder(new A.EditableTextState_build_closure(_this, controls, t1), _null)), _null);
    },
    buildTextSpan$0() {
      var text, brieflyShowPassword, o, t2, placeholders, placeholderLocation, withComposing, composingRegionOutOfRange, t3, t4, _this = this, _null = null,
        t1 = _this._widget;
      if (t1.obscureText) {
        text = t1.controller._change_notifier$_value.text;
        text = C.JSString_methods.$mul(t1.obscuringCharacter, text.length);
        $.WidgetsBinding__instance.toString;
        $.$get$EnginePlatformDispatcher__instance();
        brieflyShowPassword = D.Set_Pvfa6.contains$1(0, B.defaultTargetPlatform());
        if (brieflyShowPassword) {
          o = _this._obscureShowCharTicksPending > 0 ? _this._obscureLatestCharIndex : _null;
          if (o != null && o >= 0 && o < text.length) {
            t1 = o + 1;
            text = C.JSString_methods.replaceRange$3(text, o, t1, C.JSString_methods.substring$2(_this._widget.controller._change_notifier$_value.text, o, t1));
          }
        }
        t1 = _this.__EditableTextState__style_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        return B.TextSpan$(_null, t1, text);
      }
      t2 = _this._placeholderLocation;
      if (t2 >= 0 && t2 <= t1.controller._change_notifier$_value.text.length) {
        placeholders = B._setArrayType([], type$.JSArray__ScribblePlaceholder);
        t1 = _this._widget;
        placeholderLocation = t1.controller._change_notifier$_value.text.length - _this._placeholderLocation;
        if (t1.maxLines !== 1) {
          placeholders.push(D._ScribblePlaceholder_gl5);
          placeholders.push(new A._ScribblePlaceholder(new B.Size(_this.get$renderEditable().get$size()._dx, 0), C.SizedBox_0_0_null_null, C.PlaceholderAlignment_4, _null, _null));
        } else
          placeholders.push(D._ScribblePlaceholder_UlE);
        t1 = _this.__EditableTextState__style_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t2 = B._setArrayType([B.TextSpan$(_null, _null, C.JSString_methods.substring$2(_this._widget.controller._change_notifier$_value.text, 0, placeholderLocation))], type$.JSArray_InlineSpan);
        C.JSArray_methods.addAll$1(t2, placeholders);
        t2.push(B.TextSpan$(_null, _null, C.JSString_methods.substring$1(_this._widget.controller._change_notifier$_value.text, placeholderLocation)));
        return B.TextSpan$(t2, t1, _null);
      }
      withComposing = !t1.readOnly && t1.focusNode.get$hasFocus();
      if (_this.get$_spellCheckResultsReceived()) {
        composingRegionOutOfRange = !_this._widget.controller._change_notifier$_value.get$isComposingRangeValid() || !withComposing;
        t1 = _this._widget.controller._change_notifier$_value;
        t2 = _this.__EditableTextState__style_A;
        t2 === $ && B.throwUnnamedLateFieldNI();
        t3 = _this.__EditableTextState__spellCheckConfiguration_A;
        t3 === $ && B.throwUnnamedLateFieldNI();
        t3 = t3.misspelledTextStyle;
        t3.toString;
        t4 = _this.spellCheckResults;
        t4.toString;
        return A.buildTextSpanWithSpellCheckSuggestions(t1, composingRegionOutOfRange, t2, t3, t4);
      }
      t1 = _this._widget.controller;
      t2 = _this._framework$_element;
      t2.toString;
      t3 = _this.__EditableTextState__style_A;
      t3 === $ && B.throwUnnamedLateFieldNI();
      return t1.buildTextSpan$3$context$style$withComposing(t2, t3, withComposing);
    }
  };
  A._Editable.prototype = {
    createRenderObject$1(context) {
      var t10, _this = this, _null = null,
        t1 = _this.maxLines,
        t2 = _this.textScaler,
        t3 = B.Localizations_maybeLocaleOf(context),
        t4 = _this.value.selection,
        t5 = A._TextHighlightPainter$(),
        t6 = A._TextHighlightPainter$(),
        t7 = $.$get$ChangeNotifier__emptyListeners(),
        t8 = B.LayerHandle$(),
        t9 = B.LayerHandle$();
      if (t2.$eq(0, C._LinearTextScaler_1))
        t2 = new B._LinearTextScaler(1);
      t10 = t1 === 1 ? 1 : _null;
      t2 = B.TextPainter$(_null, t3, t10, _this.strutStyle, _this.inlineSpan, _this.textAlign, _this.textDirection, _this.textHeightBehavior, t2, _this.textWidthBasis);
      t1 = new A.RenderEditable(t5, t6, true, _this.devicePixelRatio, _this.obscuringCharacter, _this.obscureText, _this.textSelectionDelegate, new B.ValueNotifier(true, t7), new B.ValueNotifier(true, t7), t2, false, _this.showCursor, _this.hasFocus, true, _this.readOnly, t1, _this.minLines, false, t4, _this.offset, _this.cursorWidth, _this.cursorHeight, _this.paintCursorAboveText, _this.startHandleLayerLink, _this.endHandleLayerLink, _this.enableInteractiveSelection, _this.clipBehavior, C.Offset_0_0, t8, t9, 0, _null, _null, false, new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      t5.set$highlightColor(_this.selectionColor);
      t5.set$highlightedRange(t4);
      t5.set$selectionHeightStyle(_this.selectionHeightStyle);
      t5.set$selectionWidthStyle(_this.selectionWidthStyle);
      t6.set$highlightColor(_this.promptRectColor);
      t6.set$highlightedRange(_this.promptRectRange);
      t1.get$_caretPainter().set$caretColor(_this.cursorColor);
      t1.get$_caretPainter().set$cursorRadius(_this.cursorRadius);
      t1.get$_caretPainter().set$cursorOffset(_this.cursorOffset);
      t1.get$_caretPainter().set$backgroundCursorColor(_this.backgroundCursorColor);
      t1._updateForegroundPainter$1(_null);
      t1._updatePainter$1(_null);
      t1.addAll$1(0, _null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var t1, t2, _this = this;
      renderObject.set$text(_this.inlineSpan);
      renderObject.get$_caretPainter().set$caretColor(_this.cursorColor);
      renderObject.set$startHandleLayerLink(_this.startHandleLayerLink);
      renderObject.set$endHandleLayerLink(_this.endHandleLayerLink);
      renderObject.get$_caretPainter().set$backgroundCursorColor(_this.backgroundCursorColor);
      renderObject.set$showCursor(_this.showCursor);
      renderObject.set$forceLine(true);
      renderObject.set$readOnly(_this.readOnly);
      renderObject.set$hasFocus(_this.hasFocus);
      renderObject.set$maxLines(_this.maxLines);
      renderObject.set$minLines(_this.minLines);
      renderObject.set$expands(false);
      renderObject.set$strutStyle(_this.strutStyle);
      t1 = renderObject._selectionPainter;
      t1.set$highlightColor(_this.selectionColor);
      renderObject.set$textScaler(_this.textScaler);
      renderObject.set$textAlign(_this.textAlign);
      renderObject.set$textDirection(_this.textDirection);
      t2 = B.Localizations_maybeLocaleOf(context);
      renderObject.set$locale(t2);
      renderObject.set$selection(_this.value.selection);
      renderObject.set$offset(_this.offset);
      renderObject.ignorePointer = true;
      renderObject.set$textHeightBehavior(_this.textHeightBehavior);
      renderObject.set$textWidthBasis(_this.textWidthBasis);
      renderObject.set$obscuringCharacter(_this.obscuringCharacter);
      renderObject.set$obscureText(_this.obscureText);
      renderObject.set$cursorWidth(_this.cursorWidth);
      renderObject.set$cursorHeight(_this.cursorHeight);
      renderObject.get$_caretPainter().set$cursorRadius(_this.cursorRadius);
      renderObject.get$_caretPainter().set$cursorOffset(_this.cursorOffset);
      t1.set$selectionHeightStyle(_this.selectionHeightStyle);
      t1.set$selectionWidthStyle(_this.selectionWidthStyle);
      renderObject.set$enableInteractiveSelection(_this.enableInteractiveSelection);
      renderObject.textSelectionDelegate = _this.textSelectionDelegate;
      renderObject.set$devicePixelRatio(_this.devicePixelRatio);
      renderObject.set$paintCursorAboveText(_this.paintCursorAboveText);
      t1 = renderObject._autocorrectHighlightPainter;
      t1.set$highlightColor(_this.promptRectColor);
      t2 = _this.clipBehavior;
      if (t2 !== renderObject._editable$_clipBehavior) {
        renderObject._editable$_clipBehavior = t2;
        renderObject.markNeedsPaint$0();
        renderObject.markNeedsSemanticsUpdate$0();
      }
      t1.set$highlightedRange(_this.promptRectRange);
    }
  };
  A._ScribbleCacheKey.prototype = {
    compare$1(other) {
      var needsLayout, t1, _this = this;
      if (other === _this)
        return C.RenderComparison_0;
      needsLayout = true;
      if (_this.textAlign === other.textAlign)
        if (_this.textDirection === other.textDirection) {
          if (_this.textScaler.$eq(0, other.textScaler))
            t1 = !D.TextHeightBehavior_TextLeadingDistribution_0.$eq(0, D.TextHeightBehavior_TextLeadingDistribution_0) || !_this.structStyle.$eq(0, other.structStyle) || _this.placeholder !== other.placeholder || !_this.size.$eq(0, other.size);
          else
            t1 = needsLayout;
          needsLayout = t1;
        }
      return needsLayout ? C.RenderComparison_3 : _this.inlineSpan.compareTo$1(0, other.inlineSpan);
    }
  };
  A._ScribbleFocusable.prototype = {
    createState$0() {
      var t1 = $._ScribbleFocusableState__nextElementIdentifier;
      $._ScribbleFocusableState__nextElementIdentifier = t1 + 1;
      return new A._ScribbleFocusableState(C.JSInt_methods.toString$0(t1));
    },
    updateSelectionRects$0() {
      return this.updateSelectionRects.call$0();
    }
  };
  A._ScribbleFocusableState.prototype = {
    initState$0() {
      var _this = this;
      _this.super$State$initState();
      _this._widget.toString;
      $.$get$TextInput__instance()._scribbleClients.$indexSet(0, _this._elementIdentifier, _this);
    },
    didUpdateWidget$1(oldWidget) {
      this.super$State$didUpdateWidget(oldWidget);
      this._widget.toString;
    },
    dispose$0() {
      $.$get$TextInput__instance()._scribbleClients.remove$1(0, this._elementIdentifier);
      this.super$State$dispose();
    },
    get$renderEditable() {
      var t1 = this._widget.editableKey;
      t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1);
      t1 = t1 == null ? null : t1.get$renderObject();
      return type$.nullable_RenderEditable._as(t1);
    },
    onScribbleFocus$1(offset) {
      var t1;
      this._widget.focusNode.requestFocus$0();
      t1 = this.get$renderEditable();
      if (t1 != null)
        t1.selectPositionAt$2$cause$from(D.SelectionChangedCause_7, offset);
      this._widget.updateSelectionRects$0();
    },
    isInScribbleRect$1(rect) {
      var intersection, result, t2, t3, _this = this,
        calculatedBounds = _this.get$bounds(),
        t1 = _this.get$renderEditable();
      t1 = t1 == null ? null : t1._readOnly;
      if (t1 === true)
        return false;
      if (calculatedBounds.$eq(0, C.Rect_0_0_0_0))
        return false;
      if (!calculatedBounds.overlaps$1(rect))
        return false;
      intersection = calculatedBounds.intersect$1(rect);
      result = B.HitTestResult$();
      t1 = $.WidgetsBinding__instance;
      t1.toString;
      t2 = intersection.get$center();
      t3 = _this._framework$_element;
      t3.toString;
      t1.hitTestInView$3(result, t2, B.View_maybeOf(t3).viewId);
      return C.JSArray_methods.any$1(result._path, new A._ScribbleFocusableState_isInScribbleRect_closure(_this));
    },
    get$bounds() {
      var box = type$.nullable_RenderBox._as(this._framework$_element.get$renderObject());
      if (box == null || this._framework$_element == null || box._object$_owner == null)
        return C.Rect_0_0_0_0;
      return B.MatrixUtils_transformRect(box.getTransformTo$1(null), new B.Rect(0, 0, 0 + box.get$size()._dx, 0 + box.get$size()._dy));
    },
    build$1(context) {
      return this._widget.child;
    },
    $isScribbleClient: 1
  };
  A._ScribblePlaceholder.prototype = {
    build$3$dimensions$textScaler(builder, dimensions, textScaler) {
      var t1 = this.style,
        hasStyle = t1 != null;
      if (hasStyle)
        builder.pushStyle$1(t1.getTextStyle$1$textScaler(textScaler));
      t1 = this.size;
      builder.addPlaceholder$3(t1._dx, t1._dy, this.alignment);
      if (hasStyle)
        builder.pop$0();
    }
  };
  A._CodePointBoundary.prototype = {
    _breaksSurrogatePair$1(position) {
      var t1 = this._editable_text$_text;
      return (t1.charCodeAt(position - 1) & 64512) === 55296 && (t1.charCodeAt(position) & 64512) === 56320;
    },
    getLeadingTextBoundaryAt$1(position) {
      var t1 = this._editable_text$_text.length;
      if (t1 === 0 || position < 0)
        return null;
      if (position === 0)
        return 0;
      if (position >= t1)
        return t1;
      if (t1 <= 1)
        return position;
      return this._breaksSurrogatePair$1(position) ? position - 1 : position;
    },
    getTrailingTextBoundaryAt$1(position) {
      var t1 = this._editable_text$_text.length;
      if (t1 === 0 || position >= t1)
        return null;
      if (position < 0)
        return 0;
      if (position === t1 - 1)
        return t1;
      if (t1 <= 1)
        return position;
      t1 = position + 1;
      return this._breaksSurrogatePair$1(t1) ? position + 2 : t1;
    }
  };
  A._DeleteTextAction.prototype = {
    _hideToolbarIfTextChanged$1(intent) {
      var oldValue,
        t1 = this.state,
        t2 = t1._selectionOverlay;
      if (t2 != null) {
        t2 = t2.__TextSelectionOverlay__selectionOverlay_F;
        t2 === $ && B.throwUnnamedLateFieldNI();
        t2 = !t2.get$toolbarIsVisible();
      } else
        t2 = true;
      if (t2)
        return;
      oldValue = intent.currentTextEditingValue;
      if (oldValue.text !== oldValue.replaced$2(intent.replacementRange, intent.replacementText).text)
        t1.hideToolbar$1(false);
    },
    invoke$2(intent, context) {
      var atomicBoundary, t2, t3, replaceTextIntent, target, rangeToDelete, _this = this,
        t1 = _this.state,
        selection = t1._widget.controller._change_notifier$_value.selection;
      if (!selection.get$isValid())
        return null;
      atomicBoundary = t1._characterBoundary$0();
      t2 = selection.start;
      t3 = selection.end;
      if (t2 !== t3) {
        t2 = atomicBoundary.getLeadingTextBoundaryAt$1(t2);
        if (t2 == null)
          t2 = t1._widget.controller._change_notifier$_value.text.length;
        t3 = atomicBoundary.getTrailingTextBoundaryAt$1(t3 - 1);
        if (t3 == null)
          t3 = 0;
        replaceTextIntent = new A.ReplaceTextIntent(t1._widget.controller._change_notifier$_value, "", new B.TextRange(t2, t3), C.SelectionChangedCause_4);
        _this._hideToolbarIfTextChanged$1(replaceTextIntent);
        context.toString;
        return A.Actions_invoke(context, replaceTextIntent, type$.ReplaceTextIntent);
      }
      t2 = intent.forward;
      target = _this._applyTextBoundary.call$3(selection.get$base(), t2, _this.getTextBoundary.call$0()).offset;
      t3 = selection.baseOffset;
      if (t2) {
        t2 = atomicBoundary.getLeadingTextBoundaryAt$1(t3);
        if (t2 == null)
          t2 = t1._widget.controller._change_notifier$_value.text.length;
      } else {
        t2 = atomicBoundary.getTrailingTextBoundaryAt$1(t3 - 1);
        if (t2 == null)
          t2 = 0;
      }
      rangeToDelete = B.TextSelection$(C.TextAffinity_1, t2, target, false);
      replaceTextIntent = new A.ReplaceTextIntent(t1._widget.controller._change_notifier$_value, "", rangeToDelete, C.SelectionChangedCause_4);
      _this._hideToolbarIfTextChanged$1(replaceTextIntent);
      context.toString;
      return A.Actions_invoke(context, replaceTextIntent, type$.ReplaceTextIntent);
    },
    invoke$1(intent) {
      return this.invoke$2(intent, null);
    },
    get$isActionEnabled() {
      var t1 = this.state._widget;
      return !t1.readOnly && t1.controller._change_notifier$_value.selection.get$isValid();
    }
  };
  A._UpdateTextSelectionAction.prototype = {
    invoke$2(intent, context) {
      var t4, t5, extent, shouldTargetBase, newExtent, newSelection, shouldCollapseToBase, newRange, _this = this,
        t1 = _this.state,
        t2 = t1._widget,
        t3 = t2.controller._change_notifier$_value,
        selection = t3.selection,
        collapseSelection = intent.collapseSelection || !t2.enableInteractiveSelection;
      t2 = selection.start;
      t4 = selection.end;
      t5 = t2 === t4;
      if (!t5 && !_this.ignoreNonCollapsedSelection && collapseSelection) {
        context.toString;
        return A.Actions_invoke(context, new A.UpdateSelectionIntent(t3, A.TextSelection$collapsed(C.TextAffinity_1, intent.forward ? t4 : t2), C.SelectionChangedCause_4), type$.UpdateSelectionIntent);
      }
      extent = selection.get$extent();
      if (intent.continuesAtWrap) {
        t2 = intent.forward;
        t3 = false;
        if (t2) {
          t4 = t1.get$renderEditable().getLineAtOffset$1(extent).end;
          if (new B.TextPosition(t4, C.TextAffinity_0).$eq(0, extent)) {
            t3 = t1._widget.controller._change_notifier$_value.text;
            t3 = t4 !== t3.length && t3.charCodeAt(extent.offset) !== 10;
          }
        }
        if (t3)
          extent = new B.TextPosition(extent.offset, C.TextAffinity_1);
        else {
          if (!t2) {
            t2 = t1.get$renderEditable().getLineAtOffset$1(extent).start;
            t2 = new B.TextPosition(t2, C.TextAffinity_1).$eq(0, extent) && t2 !== 0 && t1._widget.controller._change_notifier$_value.text.charCodeAt(extent.offset - 1) !== 10;
          } else
            t2 = false;
          if (t2)
            extent = new B.TextPosition(extent.offset, C.TextAffinity_0);
        }
      }
      t2 = _this.isExpand;
      if (t2) {
        t3 = selection.baseOffset;
        t4 = selection.extentOffset;
        shouldTargetBase = intent.forward ? t3 > t4 : t3 < t4;
      } else
        shouldTargetBase = false;
      t3 = shouldTargetBase ? selection.get$base() : extent;
      newExtent = _this.applyTextBoundary.call$3(t3, intent.forward, _this.getTextBoundary.call$0());
      if (!collapseSelection)
        t3 = !t2 && newExtent.offset === selection.baseOffset;
      else
        t3 = true;
      if (t3)
        newSelection = A.TextSelection$fromPosition(newExtent);
      else if (t2) {
        t2 = selection.expandTo$2(newExtent, _this.extentAtIndex || t5);
        newSelection = t2;
      } else {
        t2 = selection.extendTo$1(newExtent);
        newSelection = t2;
      }
      if (intent.collapseAtReversal) {
        t2 = selection.baseOffset;
        shouldCollapseToBase = (t2 - selection.extentOffset) * (t2 - newSelection.extentOffset) < 0;
      } else
        shouldCollapseToBase = false;
      newRange = shouldCollapseToBase ? A.TextSelection$fromPosition(selection.get$base()) : newSelection;
      context.toString;
      return A.Actions_invoke(context, new A.UpdateSelectionIntent(t1._widget.controller._change_notifier$_value, newRange, C.SelectionChangedCause_4), type$.UpdateSelectionIntent);
    },
    invoke$1(intent) {
      return this.invoke$2(intent, null);
    },
    get$isActionEnabled() {
      return this.state._widget.controller._change_notifier$_value.selection.get$isValid();
    }
  };
  A._UpdateTextSelectionVerticallyAction.prototype = {
    stopCurrentVerticalRunIfSelectionChanges$0() {
      var t1, _this = this,
        runSelection = _this._runSelection;
      if (runSelection == null)
        return;
      t1 = _this._runSelection = _this.state._widget.controller._change_notifier$_value.selection;
      if (!(t1.get$isValid() && t1.start === t1.end && t1.baseOffset === runSelection.baseOffset && t1.extentOffset === runSelection.extentOffset))
        _this._runSelection = _this._verticalMovementRun = null;
    },
    invoke$2(intent, context) {
      var editableWidget, value, t3, currentRun, t4, metrics, currentLine, shouldMove, newExtent, newSelection, _this = this,
        collapseSelection = intent.collapseSelection || !_this.state._widget.enableInteractiveSelection,
        t1 = _this.state,
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey);
      if (t2 == null)
        editableWidget = null;
      else {
        t2 = t2._widget;
        t2.toString;
        editableWidget = t2;
      }
      if (!(editableWidget instanceof A._Editable))
        B.throwExpression(B.StateError$("_Editable must be mounted."));
      value = editableWidget.value;
      t2 = value.selection;
      if (!t2.get$isValid())
        return;
      t3 = _this._verticalMovementRun;
      if ((t3 == null ? null : t3.get$isValid()) === false)
        _this._runSelection = _this._verticalMovementRun = null;
      currentRun = _this._verticalMovementRun;
      if (currentRun == null) {
        t3 = t1.get$renderEditable();
        t4 = t1.get$renderEditable()._selection.get$extent();
        metrics = t3._editable$_textPainter.computeLineMetrics$0();
        currentLine = t3._lineNumberFor$2(t4, metrics);
        currentRun = new A.VerticalCaretMovementRun(currentLine.value, currentLine.key, t4, metrics, t3, B.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.MapEntry_Offset_TextPosition));
      }
      if (intent instanceof B.ExtendSelectionVerticallyToAdjacentPageIntent) {
        t3 = intent.forward;
        t4 = t3 ? 1 : -1;
        shouldMove = currentRun.moveByOffset$1(t4 * t1.get$renderEditable().get$size()._dy);
      } else {
        t3 = intent.forward;
        shouldMove = t3 ? currentRun.moveNext$0() : currentRun.movePrevious$0();
      }
      if (shouldMove)
        newExtent = currentRun._currentTextPosition;
      else
        newExtent = t3 ? new B.TextPosition(value.text.length, C.TextAffinity_1) : C.TextPosition_0_TextAffinity_1;
      newSelection = collapseSelection ? A.TextSelection$fromPosition(newExtent) : t2.extendTo$1(newExtent);
      context.toString;
      A.Actions_invoke(context, new A.UpdateSelectionIntent(value, newSelection, C.SelectionChangedCause_4), type$.UpdateSelectionIntent);
      if (t1._widget.controller._change_notifier$_value.selection.$eq(0, newSelection)) {
        _this._verticalMovementRun = currentRun;
        _this._runSelection = newSelection;
      }
    },
    invoke$1(intent) {
      return this.invoke$2(intent, null);
    },
    get$isActionEnabled() {
      return this.state._widget.controller._change_notifier$_value.selection.get$isValid();
    }
  };
  A._SelectAllAction.prototype = {
    invoke$2(intent, context) {
      var t1;
      context.toString;
      t1 = this.state._widget.controller._change_notifier$_value;
      return A.Actions_invoke(context, new A.UpdateSelectionIntent(t1, B.TextSelection$(C.TextAffinity_1, 0, t1.text.length, false), C.SelectionChangedCause_4), type$.UpdateSelectionIntent);
    },
    invoke$1(intent) {
      return this.invoke$2(intent, null);
    },
    get$isActionEnabled() {
      return this.state._widget.enableInteractiveSelection;
    }
  };
  A._CopySelectionAction.prototype = {
    invoke$2(intent, context) {
      var t1 = this.state;
      if (intent.collapseSelection)
        t1.cutSelection$1(C.SelectionChangedCause_4);
      else
        t1.copySelection$1(C.SelectionChangedCause_4);
    },
    invoke$1(intent) {
      return this.invoke$2(intent, null);
    },
    get$isActionEnabled() {
      var t1 = this.state;
      if (t1._widget.controller._change_notifier$_value.selection.get$isValid()) {
        t1 = t1._widget.controller._change_notifier$_value.selection;
        t1 = t1.start !== t1.end;
      } else
        t1 = false;
      return t1;
    }
  };
  A._WebClipboardStatusNotifier.prototype = {
    get$value() {
      return this.value;
    }
  };
  A._EditableTextTapOutsideAction.prototype = {
    invoke$2(intent, context) {
      switch (B.defaultTargetPlatform().index) {
        case 0:
        case 2:
        case 1:
          switch (intent.pointerDownEvent.get$kind().index) {
            case 0:
              intent.focusNode.unfocus$0();
              break;
            case 1:
            case 2:
            case 3:
            case 5:
              intent.focusNode.unfocus$0();
              break;
            case 4:
              throw B.wrapException(B.UnimplementedError$("Unexpected pointer down event for trackpad"));
          }
          break;
        case 3:
        case 4:
        case 5:
          intent.focusNode.unfocus$0();
          break;
      }
    },
    invoke$1(intent) {
      return this.invoke$2(intent, null);
    }
  };
  A._EditableTextState_State_AutomaticKeepAliveClientMixin.prototype = {
    initState$0() {
      this.super$State$initState();
      if (this._widget.focusNode.get$hasFocus())
        this._ensureKeepAlive$0();
    },
    deactivate$0() {
      var t1 = this.AutomaticKeepAliveClientMixin__keepAliveHandle;
      if (t1 != null) {
        t1.notifyListeners$0();
        t1.super$ChangeNotifier$dispose();
        this.AutomaticKeepAliveClientMixin__keepAliveHandle = null;
      }
      this.super$State$deactivate();
    }
  };
  A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver.prototype = {};
  A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTickers());
      _this.TickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    }
  };
  A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate.prototype = {};
  A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate_TextInputClient.prototype = {};
  A.AnimatedPositioned.prototype = {
    createState$0() {
      return new A._AnimatedPositionedState(null, null);
    }
  };
  A._AnimatedPositionedState.prototype = {
    forEachTween$1(visitor) {
      var t2, _this = this, _null = null,
        t1 = type$.nullable_Tween_double;
      _this._implicit_animations$_left = t1._as(visitor.call$3(_this._implicit_animations$_left, _this._widget.left, new A._AnimatedPositionedState_forEachTween_closure()));
      _this._implicit_animations$_top = t1._as(visitor.call$3(_this._implicit_animations$_top, _this._widget.top, new A._AnimatedPositionedState_forEachTween_closure0()));
      t2 = _this._implicit_animations$_right;
      _this._widget.toString;
      _this._implicit_animations$_right = t1._as(visitor.call$3(t2, _null, new A._AnimatedPositionedState_forEachTween_closure1()));
      t2 = _this._implicit_animations$_bottom;
      _this._widget.toString;
      _this._implicit_animations$_bottom = t1._as(visitor.call$3(t2, _null, new A._AnimatedPositionedState_forEachTween_closure2()));
      t2 = _this._implicit_animations$_width;
      _this._widget.toString;
      _this._implicit_animations$_width = t1._as(visitor.call$3(t2, _null, new A._AnimatedPositionedState_forEachTween_closure3()));
      t2 = _this._implicit_animations$_height;
      _this._widget.toString;
      _this._implicit_animations$_height = t1._as(visitor.call$3(t2, _null, new A._AnimatedPositionedState_forEachTween_closure4()));
    },
    build$1(context) {
      var t2, t3, t4, t5, t6, _this = this, _null = null,
        t1 = _this._implicit_animations$_left;
      t1 = t1 == null ? _null : t1.transform$1(_this.get$_implicit_animations$_animation().get$value());
      t2 = _this._implicit_animations$_top;
      t2 = t2 == null ? _null : t2.transform$1(_this.get$_implicit_animations$_animation().get$value());
      t3 = _this._implicit_animations$_right;
      t3 = t3 == null ? _null : t3.transform$1(_this.get$_implicit_animations$_animation().get$value());
      t4 = _this._implicit_animations$_bottom;
      t4 = t4 == null ? _null : t4.transform$1(_this.get$_implicit_animations$_animation().get$value());
      t5 = _this._implicit_animations$_width;
      t5 = t5 == null ? _null : t5.transform$1(_this.get$_implicit_animations$_animation().get$value());
      t6 = _this._implicit_animations$_height;
      t6 = t6 == null ? _null : t6.transform$1(_this.get$_implicit_animations$_animation().get$value());
      return B.Positioned$(t4, _this._widget.child, t6, _null, t1, t3, t2, t5);
    }
  };
  A.CapturedThemes.prototype = {};
  A._CaptureAll.prototype = {
    build$1(context) {
      var t1, t2, _i,
        wrappedChild = this.child;
      for (t1 = this.themes, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        wrappedChild = t1[_i].wrap$2(context, wrappedChild);
      return wrappedChild;
    }
  };
  A.MagnifierInfo.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== B.getRuntimeTypeOfDartObject(_this))
        return false;
      return other instanceof A.MagnifierInfo && other.globalGesturePosition.$eq(0, _this.globalGesturePosition) && other.caretRect.$eq(0, _this.caretRect) && other.currentLineBoundaries.$eq(0, _this.currentLineBoundaries) && other.fieldBounds.$eq(0, _this.fieldBounds);
    },
    get$hashCode(_) {
      var _this = this;
      return B.Object_hash(_this.globalGesturePosition, _this.caretRect, _this.fieldBounds, _this.currentLineBoundaries, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toString$0(_) {
      var _this = this;
      return "MagnifierInfo(position: " + _this.globalGesturePosition.toString$0(0) + ", line: " + _this.currentLineBoundaries.toString$0(0) + ", caret: " + _this.caretRect.toString$0(0) + ", field: " + _this.fieldBounds.toString$0(0) + ")";
    }
  };
  A.TextMagnifierConfiguration.prototype = {
    get$magnifierBuilder() {
      var t1 = this._magnifierBuilder;
      return t1 == null ? A.magnifier_TextMagnifierConfiguration__none$closure() : t1;
    },
    magnifierBuilder$3(arg0, arg1, arg2) {
      return this.get$magnifierBuilder().call$3(arg0, arg1, arg2);
    }
  };
  A.MagnifierController.prototype = {
    get$shown() {
      if (this._overlayEntry != null) {
        var t1 = this.animationController;
        t1 = t1 == null ? null : t1.get$status().get$isForwardOrCompleted();
        t1 = t1 !== false;
      } else
        t1 = false;
      return t1;
    },
    show$3$below$builder$context(below, builder, context) {
      return this.show$body$MagnifierController(below, builder, context);
    },
    show$body$MagnifierController(below, builder, context) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, t1;
      var $async$show$3$below$builder$context = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._overlayEntry;
              if (t1 != null)
                t1.remove$0(0);
              t1 = $async$self._overlayEntry;
              if (t1 != null)
                t1.dispose$0();
              t1 = B.LookupBoundary_findRootAncestorStateOfType(context, type$.OverlayState);
              t1.toString;
              t2 = A.Navigator_maybeOf(context);
              if (t2 == null)
                t2 = null;
              else {
                t2 = t2._framework$_element;
                t2.toString;
              }
              t2 = B.OverlayEntry$(new A.MagnifierController_show_closure(A.InheritedTheme_capture(context, t2), builder), false, false);
              $async$self._overlayEntry = t2;
              t1.insert$2$below(0, t2, below);
              t1 = $async$self.animationController;
              $async$goto = t1 != null ? 2 : 3;
              break;
            case 2:
              // then
              t1 = t1.forward$0();
              $async$goto = 4;
              return B._asyncAwait(type$.Future_void._is(t1) ? t1 : B._Future$value(t1, type$.void), $async$show$3$below$builder$context);
            case 4:
              // returning from await.
            case 3:
              // join
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$show$3$below$builder$context, $async$completer);
    },
    hide$1$removeFromOverlay(removeFromOverlay) {
      return this.hide$body$MagnifierController(removeFromOverlay);
    },
    hide$0() {
      return this.hide$1$removeFromOverlay(true);
    },
    hide$body$MagnifierController(removeFromOverlay) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1;
      var $async$hide$1$removeFromOverlay = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._overlayEntry == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $async$self.animationController;
              $async$goto = t1 != null ? 3 : 4;
              break;
            case 3:
              // then
              t1 = t1.reverse$0();
              $async$goto = 5;
              return B._asyncAwait(type$.Future_void._is(t1) ? t1 : B._Future$value(t1, type$.void), $async$hide$1$removeFromOverlay);
            case 5:
              // returning from await.
            case 4:
              // join
              if (removeFromOverlay) {
                t1 = $async$self._overlayEntry;
                if (t1 != null)
                  t1.remove$0(0);
                t1 = $async$self._overlayEntry;
                if (t1 != null)
                  t1.dispose$0();
                $async$self._overlayEntry = null;
              }
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$hide$1$removeFromOverlay, $async$completer);
    }
  };
  A.MagnifierDecoration.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== B.getRuntimeTypeOfDartObject(_this))
        return false;
      return other instanceof A.MagnifierDecoration && other.opacity === _this.opacity && B.listEquals(other.shadows, _this.shadows) && other.shape.$eq(0, _this.shape);
    },
    get$hashCode(_) {
      var t1 = this.shadows;
      t1 = t1 == null ? null : B.Object_hashAll(t1);
      return B.Object_hash(this.opacity, this.shape, t1, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A.RawMagnifier.prototype = {
    build$1(context) {
      var _this = this, _null = null,
        t1 = _this.decoration,
        t2 = t1.shape,
        t3 = t1.opacity,
        t4 = _this.size;
      return B.Stack$(C.Alignment_0_0, B._setArrayType([A.ClipPath_shape(B.Opacity$(new A._Magnifier(_this.focalPointOffset, _this.magnificationScale, A.SizedBox$fromSize(_this.child, t4), _null), t3), t2), B.IgnorePointer$(B.Opacity$(B.ClipPath$(B.DecoratedBox$(A.SizedBox$fromSize(_null, t4), new A.ShapeDecoration(_null, _null, _null, t1.shadows, t2), C.DecorationPosition_0), _this.clipBehavior, new A._NegativeClip(t2, _null)), t3), true, _null)], type$.JSArray_Widget), C.Clip_0, C.StackFit_0);
    }
  };
  A._NegativeClip.prototype = {
    getClip$1(size) {
      var t1 = $.$get$_renderer().createPath$0();
      t1.set$fillType(C.PathFillType_1);
      t1.addRect$1(C.Rect_NUV);
      t1.addPath$2(this.shape.getInnerPath$1(new B.Rect(0, 0, 0 + size._dx, 0 + size._dy)), C.Offset_0_0);
      return t1;
    },
    shouldReclip$1(oldClipper) {
      return !oldClipper.shape.$eq(0, this.shape);
    }
  };
  A._Magnifier.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._RenderMagnification(this.focalPointOffset, this.magnificationScale, null, new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$focalPointOffset(this.focalPointOffset);
      renderObject.set$magnificationScale(this.magnificationScale);
    }
  };
  A._RenderMagnification.prototype = {
    set$focalPointOffset(value) {
      if (this._focalPointOffset.$eq(0, value))
        return;
      this._focalPointOffset = value;
      this.markNeedsPaint$0();
    },
    set$magnificationScale(value) {
      if (this._magnificationScale === value)
        return;
      this._magnificationScale = value;
      this.markNeedsPaint$0();
    },
    get$alwaysNeedsCompositing() {
      return true;
    },
    paint$2(context, offset) {
      var t2, t3, t4, t5, filter, _this = this,
        thisCenter = C.Alignment_0_0.alongSize$1(_this.get$size()).$add(0, offset),
        t1 = new Float64Array(16),
        matrix = new B.Matrix40(t1);
      matrix.setIdentity$0();
      t2 = _this._magnificationScale;
      t3 = _this._focalPointOffset;
      t4 = thisCenter._dx;
      t5 = thisCenter._dy;
      matrix.translate$2(t2 * (t3._dx * -1 - t4) + t4, t2 * (t3._dy * -1 - t5) + t5);
      matrix.scale$1(_this._magnificationScale);
      filter = B.ImageFilter_ImageFilter$matrix(t1, C.FilterQuality_3);
      t1 = type$.nullable_BackdropFilterLayer;
      if (t1._as(B.RenderObject.prototype.get$layer.call(_this)) == null)
        _this._layerHandle.set$layer(B.BackdropFilterLayer$(filter));
      else
        t1._as(B.RenderObject.prototype.get$layer.call(_this)).set$filter(filter);
      t1 = t1._as(B.RenderObject.prototype.get$layer.call(_this));
      t1.toString;
      context.pushLayer$3(t1, B.RenderProxyBoxMixin.prototype.get$paint.call(_this), offset);
    }
  };
  A.SizeChangedLayoutNotification.prototype = {};
  A.SizeChangedLayoutNotifier.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._RenderSizeChangedWithCallback(new A.SizeChangedLayoutNotifier_createRenderObject_closure(context), null, new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    }
  };
  A._RenderSizeChangedWithCallback.prototype = {
    performLayout$0() {
      var _this = this;
      _this.super$RenderProxyBoxMixin$performLayout();
      if (_this._oldSize != null && !_this.get$size().$eq(0, _this._oldSize))
        _this.onLayoutChangedCallback.call$0();
      _this._oldSize = _this.get$size();
    }
  };
  A.SlottedMultiChildRenderObjectWidget.prototype = {};
  A.SlottedMultiChildRenderObjectWidgetMixin.prototype = {
    createElement$0() {
      var t1 = B._instanceType(this),
        t2 = type$.Element;
      return new A.SlottedRenderObjectElement(B.LinkedHashMap_LinkedHashMap$_empty(t1._eval$1("SlottedMultiChildRenderObjectWidgetMixin.0"), t2), B.LinkedHashMap_LinkedHashMap$_empty(type$.Key, t2), this, C._ElementLifecycle_0, t1._eval$1("SlottedRenderObjectElement<SlottedMultiChildRenderObjectWidgetMixin.0,SlottedMultiChildRenderObjectWidgetMixin.1>"));
    }
  };
  A.SlottedContainerRenderObjectMixin.prototype = {
    debugNameForSlot$1(slot) {
      if (slot instanceof B._Enum)
        return slot._name;
      return J.toString$0$(slot);
    },
    redepthChildren$0() {
      C.JSArray_methods.forEach$1(this.get$children(), this.get$redepthChild());
    },
    visitChildren$1(visitor) {
      C.JSArray_methods.forEach$1(this.get$children(), visitor);
    },
    debugDescribeChildren$0() {
      var _i, child, _this = this,
        value = B._setArrayType([], type$.JSArray_DiagnosticsNode),
        t1 = _this.SlottedContainerRenderObjectMixin__slotToChild,
        t2 = B._instanceType(t1),
        t3 = B._instanceType(_this),
        t4 = t3._eval$1("SlottedContainerRenderObjectMixin.0"),
        map = B.LinkedHashMap_LinkedHashMap(t3._eval$1("SlottedContainerRenderObjectMixin.1"), t4);
      A.MapBase__fillMapWithIterables(map, new B.LinkedHashMapValuesIterable(t1, t2._eval$1("LinkedHashMapValuesIterable<2>")), new B.LinkedHashMapKeysIterable(t1, t2._eval$1("LinkedHashMapKeysIterable<1>")));
      for (t1 = _this.get$children(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        t3 = map.$index(0, child);
        value.push(new B.DiagnosticableTreeNode(child, _this.debugNameForSlot$1(t3 == null ? t4._as(t3) : t3), true, true, null, null));
      }
      return value;
    },
    _setChild$2(child, slot) {
      var t1 = this.SlottedContainerRenderObjectMixin__slotToChild,
        oldChild = t1.$index(0, slot);
      if (oldChild != null) {
        this.dropChild$1(oldChild);
        t1.remove$1(0, slot);
      }
      if (child != null) {
        t1.$indexSet(0, slot, child);
        this.adoptChild$1(child);
      }
    }
  };
  A.SlottedRenderObjectElement.prototype = {
    get$renderObject() {
      return this.$ti._eval$1("SlottedContainerRenderObjectMixin<1,2>")._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
    },
    visitChildren$1(visitor) {
      var t1 = this._slotToChild;
      new B.LinkedHashMapValuesIterable(t1, B._instanceType(t1)._eval$1("LinkedHashMapValuesIterable<2>")).forEach$1(0, visitor);
    },
    forgetChild$1(child) {
      this._slotToChild.remove$1(0, child._slot);
      this.super$Element$forgetChild(child);
    },
    mount$2($parent, newSlot) {
      this.super$RenderObjectElement$mount($parent, newSlot);
      this._updateChildren$0();
    },
    update$1(newWidget) {
      this.super$RenderObjectElement$update(newWidget);
      this._updateChildren$0();
    },
    _updateChildren$0() {
      var t2, oldKeyedElements, t3, oldSlotToChild, _i, slot, widget, newWidgetKey, oldSlotChild, oldKeyChild, fromElement, newChild, _this = this,
        t1 = _this._widget;
      t1.toString;
      t2 = _this.$ti;
      t2._eval$1("SlottedMultiChildRenderObjectWidgetMixin<1,2>")._as(t1);
      oldKeyedElements = _this._keyedChildren;
      t3 = type$.Element;
      _this._keyedChildren = B.LinkedHashMap_LinkedHashMap$_empty(type$.Key, t3);
      oldSlotToChild = _this._slotToChild;
      t2 = t2._precomputed1;
      _this._slotToChild = B.LinkedHashMap_LinkedHashMap$_empty(t2, t3);
      for (_i = 0; _i < 11; ++_i) {
        slot = D.List_LTx[_i];
        widget = t1.childForSlot$1(slot);
        newWidgetKey = widget == null ? null : widget.key;
        oldSlotChild = oldSlotToChild.$index(0, slot);
        oldKeyChild = oldKeyedElements.$index(0, newWidgetKey);
        if (oldKeyChild != null)
          fromElement = oldSlotToChild.remove$1(0, t2._as(oldKeyChild._slot));
        else
          fromElement = (oldSlotChild == null ? null : oldSlotChild._widget.key) == null ? oldSlotToChild.remove$1(0, slot) : null;
        newChild = _this.updateChild$3(fromElement, widget, slot);
        if (newChild != null) {
          _this._slotToChild.$indexSet(0, slot, newChild);
          if (newWidgetKey != null)
            _this._keyedChildren.$indexSet(0, newWidgetKey, newChild);
        }
      }
      new B.LinkedHashMapValuesIterable(oldSlotToChild, B._instanceType(oldSlotToChild)._eval$1("LinkedHashMapValuesIterable<2>")).forEach$1(0, _this.get$deactivateChild());
    },
    insertRenderObjectChild$2(child, slot) {
      this.$ti._eval$1("SlottedContainerRenderObjectMixin<1,2>")._as(B.RenderObjectElement.prototype.get$renderObject.call(this))._setChild$2(child, slot);
    },
    removeRenderObjectChild$2(child, slot) {
      var t1 = this.$ti._eval$1("SlottedContainerRenderObjectMixin<1,2>");
      if (t1._as(B.RenderObjectElement.prototype.get$renderObject.call(this)).SlottedContainerRenderObjectMixin__slotToChild.$index(0, slot) === child)
        t1._as(B.RenderObjectElement.prototype.get$renderObject.call(this))._setChild$2(null, slot);
    },
    moveRenderObjectChild$3(child, oldSlot, newSlot) {
      var t1 = this.$ti._eval$1("SlottedContainerRenderObjectMixin<1,2>")._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
      if (t1.SlottedContainerRenderObjectMixin__slotToChild.$index(0, oldSlot) === child)
        t1._setChild$2(null, oldSlot);
      t1._setChild$2(child, newSlot);
    }
  };
  A._SlottedMultiChildRenderObjectWidget_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin.prototype = {
    updateRenderObject$2(context, renderObject) {
      return this.super$RenderObjectWidget$updateRenderObject(context, renderObject);
    }
  };
  A.SpellCheckConfiguration.prototype = {
    copyWith$4$misspelledSelectionColor$misspelledTextStyle$spellCheckService$spellCheckSuggestionsToolbarBuilder(misspelledSelectionColor, misspelledTextStyle, spellCheckService, spellCheckSuggestionsToolbarBuilder) {
      var _this = this;
      if (!_this._spellCheckEnabled)
        return D.SpellCheckConfiguration_asH;
      return new A.SpellCheckConfiguration(spellCheckService, _this.misspelledSelectionColor, _this.misspelledTextStyle, _this.spellCheckSuggestionsToolbarBuilder, true);
    },
    copyWith$1$spellCheckService(spellCheckService) {
      return this.copyWith$4$misspelledSelectionColor$misspelledTextStyle$spellCheckService$spellCheckSuggestionsToolbarBuilder(null, null, spellCheckService, null);
    },
    toString$0(_) {
      var _this = this,
        t1 = _this._spellCheckEnabled ? "enabled" : "disabled";
      return "SpellCheckConfiguration(" + t1 + ", service: " + B.S(_this.spellCheckService) + ", text style: " + B.S(_this.misspelledTextStyle) + ", toolbar builder: " + B.S(_this.spellCheckSuggestionsToolbarBuilder) + ")";
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== B.getRuntimeTypeOfDartObject(this))
        return false;
      t1 = false;
      if (other instanceof A.SpellCheckConfiguration)
        if (other.spellCheckService == this.spellCheckService)
          t1 = other._spellCheckEnabled === this._spellCheckEnabled;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return B.Object_hash(_this.spellCheckService, _this.misspelledTextStyle, _this.spellCheckSuggestionsToolbarBuilder, _this._spellCheckEnabled, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A.TapRegion.prototype = {
    createRenderObject$1(context) {
      var t2, t3, _this = this, _null = null,
        t1 = A.ModalRoute_isCurrentOf(context),
        isCurrent = t1 !== false;
      t1 = context.findAncestorRenderObjectOfType$1$0(type$.RenderTapRegionSurface);
      t2 = isCurrent ? _this.onTapOutside : _null;
      t3 = isCurrent ? _this.onTapUpOutside : _null;
      t1 = new A.RenderTapRegion(t2, _this.onTapInside, t3, _this.onTapUpInside, _this.debugLabel, true, false, _this.groupId, t1, C.HitTestBehavior_0, _null, new B._LayoutCacheStorage(), B.LayerHandle$());
      t1.RenderObject$0();
      t1.set$child(_null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var t2, _this = this,
        t1 = A.ModalRoute_isCurrentOf(context),
        isCurrent = t1 !== false;
      t1 = context.findAncestorRenderObjectOfType$1$0(type$.RenderTapRegionSurface);
      t2 = renderObject._registry;
      if (t2 != t1) {
        if (renderObject._isRegistered) {
          t2.unregisterTapRegion$1(renderObject);
          renderObject._isRegistered = false;
        }
        renderObject._registry = t1;
        renderObject.markNeedsLayout$0();
      }
      renderObject.behavior = C.HitTestBehavior_0;
      t1 = _this.groupId;
      if (renderObject._groupId !== t1) {
        if (renderObject._isRegistered) {
          renderObject._registry.unregisterTapRegion$1(renderObject);
          renderObject._isRegistered = false;
        }
        renderObject._groupId = t1;
        renderObject.markNeedsLayout$0();
      }
      renderObject.onTapOutside = isCurrent ? _this.onTapOutside : null;
      renderObject.onTapInside = _this.onTapInside;
      renderObject.onTapUpOutside = isCurrent ? _this.onTapUpOutside : null;
      renderObject.onTapUpInside = _this.onTapUpInside;
      renderObject.debugLabel = _this.debugLabel;
    }
  };
  A.RenderTapRegion.prototype = {
    get$consumeOutsideTaps() {
      return false;
    },
    get$groupId() {
      return this._groupId;
    },
    layout$2$parentUsesSize(constraints, parentUsesSize) {
      var t1, shouldBeRegistered, t2, _this = this;
      _this.super$RenderObject$layout(constraints, parentUsesSize);
      t1 = _this._registry;
      if (t1 == null)
        return;
      if (_this._isRegistered)
        t1.unregisterTapRegion$1(_this);
      t1 = _this._registry;
      shouldBeRegistered = t1 != null;
      if (shouldBeRegistered) {
        t1._registeredRegions.add$1(0, _this);
        t1 = t1._groupIdToRegions;
        t2 = _this._groupId;
        if (t1.$index(0, t2) == null)
          t1.$indexSet(0, t2, B.LinkedHashSet_LinkedHashSet$_empty(type$.RenderTapRegion));
        t1.$index(0, _this._groupId).add$1(0, _this);
      }
      _this._isRegistered = shouldBeRegistered;
    },
    layout$1(constraints) {
      return this.layout$2$parentUsesSize(constraints, false);
    },
    dispose$0() {
      var _this = this;
      if (_this._isRegistered)
        _this._registry.unregisterTapRegion$1(_this);
      _this.super$RenderObject$dispose();
    }
  };
  A.TextFieldTapRegion.prototype = {};
  A.ReplaceTextIntent.prototype = {};
  A.UpdateSelectionIntent.prototype = {};
  A.EditableTextTapOutsideIntent.prototype = {};
  A.ToolbarItemsParentData.prototype = {
    toString$0(_) {
      return this.super$BoxParentData$toString(0) + "; shouldPaint=" + this.shouldPaint;
    }
  };
  A.TextSelectionControls.prototype = {};
  A.TextSelectionOverlay.prototype = {
    _updateTextSelectionOverlayVisibilities$0() {
      var _this = this,
        t1 = _this._handlesVisible && _this.renderObject._selectionStartInViewport._change_notifier$_value;
      _this._effectiveStartHandleVisibility.set$value(t1);
      t1 = _this._handlesVisible && _this.renderObject._selectionEndInViewport._change_notifier$_value;
      _this._effectiveEndHandleVisibility.set$value(t1);
      t1 = _this.renderObject;
      t1 = t1._selectionStartInViewport._change_notifier$_value || t1._selectionEndInViewport._change_notifier$_value;
      _this._effectiveToolbarVisibility.set$value(t1);
    },
    set$handlesVisible(visible) {
      if (this._handlesVisible === visible)
        return;
      this._handlesVisible = visible;
      this._updateTextSelectionOverlayVisibilities$0();
    },
    showToolbar$0() {
      var t1, t2, _this = this;
      _this._updateSelectionOverlay$0();
      t1 = _this.contextMenuBuilder;
      if (t1 == null)
        return;
      t2 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t2 === $ && B.throwUnnamedLateFieldNI();
      t2.showToolbar$2$context$contextMenuBuilder(_this.context, t1);
      return;
    },
    update$1(newValue) {
      var t1, _this = this;
      if (_this._text_selection$_value.$eq(0, newValue))
        return;
      _this._text_selection$_value = newValue;
      _this._updateSelectionOverlay$0();
      t1 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.markNeedsBuild$0();
    },
    _updateSelectionOverlay$0() {
      var t2, t3, t4, currText, t5, selectedGraphemes, t6, startHandleRect, endHandleRect, _this = this, _null = null,
        t1 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t2 = _this.renderObject;
      t3 = t2._editable$_textPainter;
      t4 = t3._text_painter$_textDirection;
      t4.toString;
      t1.set$startHandleType(_this._chooseType$3(t4, C.TextSelectionHandleType_0, C.TextSelectionHandleType_1));
      t4 = _this.selectionDelegate;
      currText = t4._widget.controller._change_notifier$_value.text;
      t5 = false;
      if (t3.get$plainText() === currText)
        if (_this._text_selection$_value.selection.get$isValid()) {
          t5 = _this._text_selection$_value.selection;
          t5 = t5.start !== t5.end;
        }
      if (t5) {
        t5 = _this._text_selection$_value.selection;
        selectedGraphemes = C.JSString_methods.substring$2(currText, t5.start, t5.end);
        t5 = (selectedGraphemes.length === 0 ? C.StringCharacters_GVp : new B.StringCharacters(selectedGraphemes)).get$first(0);
        t6 = _this._text_selection$_value.selection.start;
        startHandleRect = t2.getRectForComposingRange$1(new B.TextRange(t6, t6 + t5.length));
      } else
        startHandleRect = _null;
      t5 = startHandleRect == null ? _null : startHandleRect.bottom - startHandleRect.top;
      t1.set$lineHeightAtStart(t5 == null ? t3._getOrCreateLayoutTemplate$0().get$height() : t5);
      t5 = t3._text_painter$_textDirection;
      t5.toString;
      t1.set$endHandleType(_this._chooseType$3(t5, C.TextSelectionHandleType_1, C.TextSelectionHandleType_0));
      currText = t4._widget.controller._change_notifier$_value.text;
      t4 = false;
      if (t3.get$plainText() === currText)
        if (_this._text_selection$_value.selection.get$isValid()) {
          t4 = _this._text_selection$_value.selection;
          t4 = t4.start !== t4.end;
        }
      if (t4) {
        t4 = _this._text_selection$_value.selection;
        selectedGraphemes = C.JSString_methods.substring$2(currText, t4.start, t4.end);
        t4 = (selectedGraphemes.length === 0 ? C.StringCharacters_GVp : new B.StringCharacters(selectedGraphemes)).get$last(0);
        t5 = _this._text_selection$_value.selection.end;
        endHandleRect = t2.getRectForComposingRange$1(new B.TextRange(t5 - t4.length, t5));
      } else
        endHandleRect = _null;
      t4 = endHandleRect == null ? _null : endHandleRect.bottom - endHandleRect.top;
      t1.set$lineHeightAtEnd(t4 == null ? t3._getOrCreateLayoutTemplate$0().get$height() : t4);
      t1.set$selectionEndpoints(t2.getEndpointsForSelection$1(_this._text_selection$_value.selection));
      t1.set$toolbarLocation(t2._lastSecondaryTapDownPosition);
    },
    dispose$0() {
      var t2, t3, t4, _this = this,
        t1 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.hide$0();
      t2 = t1._magnifierInfo;
      t3 = t2.ChangeNotifier__listeners = $.$get$ChangeNotifier__emptyListeners();
      t2.ChangeNotifier__count = 0;
      t2 = _this.renderObject;
      t4 = _this.get$_updateTextSelectionOverlayVisibilities();
      t2._selectionStartInViewport.removeListener$1(t4);
      t2._selectionEndInViewport.removeListener$1(t4);
      t4 = _this._effectiveToolbarVisibility;
      t4.ChangeNotifier__listeners = t3;
      t4.ChangeNotifier__count = 0;
      t4 = _this._effectiveStartHandleVisibility;
      t4.ChangeNotifier__listeners = t3;
      t4.ChangeNotifier__count = 0;
      t4 = _this._effectiveEndHandleVisibility;
      t4.ChangeNotifier__listeners = t3;
      t4.ChangeNotifier__count = 0;
      t1.hideToolbar$0();
    },
    _buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(currentTextPosition, globalGesturePosition, renderEditable) {
      var overlay, transformToOverlay, overlayLineBoundaries, overlayCaretRect, overlayGesturePosition,
        lineAtOffset = renderEditable.getLineAtOffset$1(currentTextPosition),
        t1 = renderEditable.getLocalRectForCaret$1(new B.TextPosition(lineAtOffset.baseOffset, C.TextAffinity_1)),
        t2 = t1.left,
        t3 = renderEditable.getLocalRectForCaret$1(new B.TextPosition(lineAtOffset.extentOffset, C.TextAffinity_0)),
        t4 = t3.left,
        localLineBoundaries = B.Rect$fromPoints(new B.Offset(t2 + (t1.right - t2) / 2, t1.top), new B.Offset(t4 + (t3.right - t4) / 2, t3.bottom));
      t1 = B.LookupBoundary_findRootAncestorStateOfType(this.context, type$.OverlayState);
      overlay = type$.nullable_RenderBox._as(t1._framework$_element.get$renderObject());
      transformToOverlay = renderEditable.getTransformTo$1(overlay);
      overlayLineBoundaries = B.MatrixUtils_transformRect(transformToOverlay, localLineBoundaries);
      overlayCaretRect = B.MatrixUtils_transformRect(transformToOverlay, renderEditable.getLocalRectForCaret$1(currentTextPosition));
      overlayGesturePosition = overlay == null ? null : overlay.globalToLocal$1(globalGesturePosition);
      if (overlayGesturePosition == null)
        overlayGesturePosition = globalGesturePosition;
      t1 = renderEditable.get$size();
      return new A.MagnifierInfo(overlayGesturePosition, overlayLineBoundaries, overlayCaretRect, B.MatrixUtils_transformRect(transformToOverlay, new B.Rect(0, 0, 0 + t1._dx, 0 + t1._dy)));
    },
    _handleSelectionEndHandleDragStart$1(details) {
      var t2, t3, t4, t5, t6, centerOfLineGlobal, position, _this = this,
        t1 = _this.renderObject;
      if (t1._object$_owner == null)
        return;
      t2 = details.globalPosition;
      t3 = t2._dy;
      _this.__TextSelectionOverlay__endHandleDragPosition_A = t3;
      t4 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t4 === $ && B.throwUnnamedLateFieldNI();
      t5 = C.JSArray_methods.get$last(t4._selectionEndpoints);
      t6 = t1._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height();
      centerOfLineGlobal = B.MatrixUtils_transformPoint(t1.getTransformTo$1(null), new B.Offset(0, t5.point._dy - t6 / 2))._dy;
      _this.__TextSelectionOverlay__endHandleDragTarget_A = centerOfLineGlobal - t3;
      position = t1.getPositionForPoint$1(new B.Offset(t2._dx, centerOfLineGlobal));
      if (_this._dragStartSelection == null)
        _this._dragStartSelection = _this._text_selection$_value.selection;
      t4.showMagnifier$1(_this._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(position, t2, t1));
    },
    _getHandleDy$2(dragDy, handleDy) {
      var distanceDragged = dragDy - handleDy,
        dragDirection = distanceDragged < 0 ? -1 : 1,
        t1 = this.renderObject._editable$_textPainter;
      return handleDy + dragDirection * C.JSNumber_methods.floor$0(Math.abs(distanceDragged) / t1._getOrCreateLayoutTemplate$0().get$height()) * t1._getOrCreateLayoutTemplate$0().get$height();
    },
    _handleSelectionEndHandleDragUpdate$1(details) {
      var t2, localPosition, t3, nextEndHandleDragPositionLocal, t4, position, newSelection, _this = this,
        t1 = _this.renderObject;
      if (t1._object$_owner == null)
        return;
      t2 = details.globalPosition;
      localPosition = t1.globalToLocal$1(t2);
      t3 = _this.__TextSelectionOverlay__endHandleDragPosition_A;
      t3 === $ && B.throwUnnamedLateFieldNI();
      nextEndHandleDragPositionLocal = _this._getHandleDy$2(localPosition._dy, t1.globalToLocal$1(new B.Offset(0, t3))._dy);
      t3 = B.MatrixUtils_transformPoint(t1.getTransformTo$1(null), new B.Offset(0, nextEndHandleDragPositionLocal))._dy;
      _this.__TextSelectionOverlay__endHandleDragPosition_A = t3;
      t4 = _this.__TextSelectionOverlay__endHandleDragTarget_A;
      t4 === $ && B.throwUnnamedLateFieldNI();
      position = t1.getPositionForPoint$1(new B.Offset(t2._dx, t3 + t4));
      t3 = _this._dragStartSelection;
      if (t3.start === t3.end) {
        t3 = _this.__TextSelectionOverlay__selectionOverlay_F;
        t3 === $ && B.throwUnnamedLateFieldNI();
        t3.updateMagnifier$1(_this._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(position, t2, t1));
        _this._handleSelectionHandleChanged$1(A.TextSelection$fromPosition(position));
        return;
      }
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
          t4 = t3.extentOffset;
          t3 = t3.baseOffset;
          t3 = t4 >= t3 ? t3 : t4;
          newSelection = B.TextSelection$(C.TextAffinity_1, t3, position.offset, false);
          break;
        case 0:
        case 1:
        case 3:
        case 5:
          newSelection = B.TextSelection$(C.TextAffinity_1, _this._text_selection$_value.selection.baseOffset, position.offset, false);
          if (newSelection.baseOffset >= newSelection.extentOffset)
            return;
          break;
        default:
          newSelection = null;
      }
      _this._handleSelectionHandleChanged$1(newSelection);
      t3 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t3 === $ && B.throwUnnamedLateFieldNI();
      t3.updateMagnifier$1(_this._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(newSelection.get$extent(), t2, t1));
    },
    _handleSelectionStartHandleDragStart$1(details) {
      var t2, t3, t4, t5, t6, centerOfLineGlobal, position, _this = this,
        t1 = _this.renderObject;
      if (t1._object$_owner == null)
        return;
      t2 = details.globalPosition;
      t3 = t2._dy;
      _this.__TextSelectionOverlay__startHandleDragPosition_A = t3;
      t4 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t4 === $ && B.throwUnnamedLateFieldNI();
      t5 = C.JSArray_methods.get$first(t4._selectionEndpoints);
      t6 = t1._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height();
      centerOfLineGlobal = B.MatrixUtils_transformPoint(t1.getTransformTo$1(null), new B.Offset(0, t5.point._dy - t6 / 2))._dy;
      _this.__TextSelectionOverlay__startHandleDragTarget_A = centerOfLineGlobal - t3;
      position = t1.getPositionForPoint$1(new B.Offset(t2._dx, centerOfLineGlobal));
      if (_this._dragStartSelection == null)
        _this._dragStartSelection = _this._text_selection$_value.selection;
      t4.showMagnifier$1(_this._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(position, t2, t1));
    },
    _handleSelectionStartHandleDragUpdate$1(details) {
      var t2, localPosition, t3, nextStartHandleDragPositionLocal, t4, position, newSelection, _this = this,
        t1 = _this.renderObject;
      if (t1._object$_owner == null)
        return;
      t2 = details.globalPosition;
      localPosition = t1.globalToLocal$1(t2);
      t3 = _this.__TextSelectionOverlay__startHandleDragPosition_A;
      t3 === $ && B.throwUnnamedLateFieldNI();
      nextStartHandleDragPositionLocal = _this._getHandleDy$2(localPosition._dy, t1.globalToLocal$1(new B.Offset(0, t3))._dy);
      t3 = B.MatrixUtils_transformPoint(t1.getTransformTo$1(null), new B.Offset(0, nextStartHandleDragPositionLocal))._dy;
      _this.__TextSelectionOverlay__startHandleDragPosition_A = t3;
      t4 = _this.__TextSelectionOverlay__startHandleDragTarget_A;
      t4 === $ && B.throwUnnamedLateFieldNI();
      position = t1.getPositionForPoint$1(new B.Offset(t2._dx, t3 + t4));
      t3 = _this._dragStartSelection;
      if (t3.start === t3.end) {
        t3 = _this.__TextSelectionOverlay__selectionOverlay_F;
        t3 === $ && B.throwUnnamedLateFieldNI();
        t3.updateMagnifier$1(_this._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(position, t2, t1));
        _this._handleSelectionHandleChanged$1(A.TextSelection$fromPosition(position));
        return;
      }
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
          t4 = t3.extentOffset;
          t3 = t3.baseOffset;
          if (t4 >= t3)
            t3 = t4;
          newSelection = B.TextSelection$(C.TextAffinity_1, t3, position.offset, false);
          break;
        case 0:
        case 1:
        case 3:
        case 5:
          newSelection = B.TextSelection$(C.TextAffinity_1, position.offset, _this._text_selection$_value.selection.extentOffset, false);
          if (newSelection.baseOffset >= newSelection.extentOffset)
            return;
          break;
        default:
          newSelection = null;
      }
      t3 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t3 === $ && B.throwUnnamedLateFieldNI();
      t3.updateMagnifier$1(_this._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(newSelection.get$extent().offset < newSelection.get$base().offset ? newSelection.get$extent() : newSelection.get$base(), t2, t1));
      _this._handleSelectionHandleChanged$1(newSelection);
    },
    _handleAnyDragEnd$1(details) {
      var t2, t3, _this = this,
        t1 = _this.context;
      if (t1._widget == null)
        return;
      _this._dragStartSelection = null;
      if (!type$.TextSelectionHandleControls._is(_this.selectionControls)) {
        t1 = _this.__TextSelectionOverlay__selectionOverlay_F;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t1.hideMagnifier$0();
        t2 = _this._text_selection$_value.selection;
        if (t2.start !== t2.end)
          t1.showToolbar$0();
        return;
      }
      t2 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t2 === $ && B.throwUnnamedLateFieldNI();
      t2.hideMagnifier$0();
      t3 = _this._text_selection$_value.selection;
      if (t3.start !== t3.end)
        t2.showToolbar$2$context$contextMenuBuilder(t1, _this.contextMenuBuilder);
    },
    _handleSelectionHandleChanged$1(newSelection) {
      this.selectionDelegate.userUpdateTextEditingValue$2(this._text_selection$_value.copyWith$1$selection(newSelection), D.SelectionChangedCause_6);
    },
    _chooseType$3(textDirection, ltrType, rtlType) {
      var t1 = this._text_selection$_value.selection;
      if (t1.start === t1.end)
        return C.TextSelectionHandleType_2;
      switch (textDirection.index) {
        case 1:
          t1 = ltrType;
          break;
        case 0:
          t1 = rtlType;
          break;
        default:
          t1 = null;
      }
      return t1;
    }
  };
  A.SelectionOverlay.prototype = {
    get$toolbarIsVisible() {
      var t1, _this = this;
      if (type$.TextSelectionHandleControls._is(_this.selectionControls)) {
        t1 = $.ContextMenuController__shownInstance;
        t1 = t1 === _this._contextMenuController || t1 === _this._spellCheckToolbarController;
      } else
        t1 = _this._toolbar != null || $.ContextMenuController__shownInstance === _this._spellCheckToolbarController;
      return t1;
    },
    showMagnifier$1(initialMagnifierInfo) {
      var t1, t2, t3, t4, builtMagnifier, _this = this;
      if (_this.get$toolbarIsVisible())
        _this.hideToolbar$0();
      t1 = _this._magnifierInfo;
      t1.set$value(initialMagnifierInfo);
      t2 = _this.magnifierConfiguration;
      t3 = _this.context;
      t4 = _this._magnifierController;
      builtMagnifier = t2.magnifierBuilder$3(t3, t4, t1);
      if (builtMagnifier == null)
        return;
      if (t2.shouldDisplayHandlesInMagnifier)
        t1 = null;
      else {
        t1 = _this._handles;
        t1 = t1 == null ? null : t1._1;
      }
      t4.show$3$below$builder$context(t1, new A.SelectionOverlay_showMagnifier_closure(builtMagnifier), t3);
    },
    hideMagnifier$0() {
      var t1 = this._magnifierController;
      if (t1._overlayEntry == null)
        return;
      t1.hide$0();
    },
    set$startHandleType(value) {
      if (this._startHandleType === value)
        return;
      this._startHandleType = value;
      this.markNeedsBuild$0();
    },
    set$lineHeightAtStart(value) {
      if (this._lineHeightAtStart === value)
        return;
      this._lineHeightAtStart = value;
      this.markNeedsBuild$0();
    },
    _handleStartHandleDragStart$1(details) {
      var _this = this;
      if (_this._handles == null) {
        _this._isDraggingStartHandle = false;
        return;
      }
      _this._isDraggingStartHandle = details.kind === C.PointerDeviceKind_0;
      _this.onStartHandleDragStart.call$1(details);
    },
    _handleStartHandleDragUpdate$1(details) {
      if (this._handles == null) {
        this._isDraggingStartHandle = false;
        return;
      }
      this.onStartHandleDragUpdate.call$1(details);
    },
    _handleStartHandleDragEnd$1(details) {
      this._isDraggingStartHandle = false;
      if (this._handles == null)
        return;
      this.onStartHandleDragEnd.call$1(details);
    },
    set$endHandleType(value) {
      if (this._endHandleType === value)
        return;
      this._endHandleType = value;
      this.markNeedsBuild$0();
    },
    set$lineHeightAtEnd(value) {
      if (this._lineHeightAtEnd === value)
        return;
      this._lineHeightAtEnd = value;
      this.markNeedsBuild$0();
    },
    _handleEndHandleDragStart$1(details) {
      var _this = this;
      if (_this._handles == null) {
        _this._isDraggingEndHandle = false;
        return;
      }
      _this._isDraggingEndHandle = details.kind === C.PointerDeviceKind_0;
      _this.onEndHandleDragStart.call$1(details);
    },
    _handleEndHandleDragUpdate$1(details) {
      if (this._handles == null) {
        this._isDraggingEndHandle = false;
        return;
      }
      this.onEndHandleDragUpdate.call$1(details);
    },
    _handleEndHandleDragEnd$1(details) {
      this._isDraggingEndHandle = false;
      if (this._handles == null)
        return;
      this.onEndHandleDragEnd.call$1(details);
    },
    set$selectionEndpoints(value) {
      var _this = this;
      if (!B.listEquals(_this._selectionEndpoints, value)) {
        _this.markNeedsBuild$0();
        if (_this._isDraggingEndHandle || _this._isDraggingStartHandle)
          switch (B.defaultTargetPlatform().index) {
            case 0:
              A.HapticFeedback_selectionClick();
              break;
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
              break;
          }
      }
      _this._selectionEndpoints = value;
    },
    set$toolbarLocation(value) {
      if (J.$eq$(this._toolbarLocation, value))
        return;
      this._toolbarLocation = value;
      this.markNeedsBuild$0();
    },
    showHandles$0() {
      var t1, t2, t3, capturedThemes, _this = this;
      if (_this._handles != null)
        return;
      t1 = _this.context;
      t2 = B.LookupBoundary_findRootAncestorStateOfType(t1, type$.OverlayState);
      t3 = t2._framework$_element;
      t3.toString;
      capturedThemes = A.InheritedTheme_capture(t1, t3);
      t3 = B.OverlayEntry$(new A.SelectionOverlay_showHandles_closure(_this, capturedThemes), false, false);
      t1 = B.OverlayEntry$(new A.SelectionOverlay_showHandles_closure0(_this, capturedThemes), false, false);
      _this._handles = new B._Record_2_end_start(t1, t3);
      t2.insertAll$1(0, B._setArrayType([t3, t1], type$.JSArray_OverlayEntry));
    },
    hideHandles$0() {
      var _this = this,
        t1 = _this._handles;
      if (t1 != null) {
        t1._1.remove$0(0);
        _this._handles._1.dispose$0();
        _this._handles._0.remove$0(0);
        _this._handles._0.dispose$0();
        _this._handles = null;
      }
    },
    showToolbar$2$context$contextMenuBuilder(context, contextMenuBuilder) {
      var t1, t2, _this = this;
      if (contextMenuBuilder == null) {
        if (_this._toolbar != null)
          return;
        _this._toolbar = B.OverlayEntry$(_this.get$_buildToolbar(), false, false);
        t1 = B.LookupBoundary_findRootAncestorStateOfType(_this.context, type$.OverlayState);
        t1.toString;
        t2 = _this._toolbar;
        t2.toString;
        t1.insert$1(0, t2);
        return;
      }
      if (context == null)
        return;
      t1 = context.get$renderObject();
      t1.toString;
      _this._contextMenuController.show$2$context$contextMenuBuilder(context, new A.SelectionOverlay_showToolbar_closure(_this, type$.RenderBox._as(t1), contextMenuBuilder));
    },
    showToolbar$0() {
      return this.showToolbar$2$context$contextMenuBuilder(null, null);
    },
    markNeedsBuild$0() {
      var t3, _this = this,
        t1 = _this._handles,
        t2 = t1 == null;
      if (t2 && _this._toolbar == null)
        return;
      t3 = $.SchedulerBinding__instance;
      if (t3.SchedulerBinding__schedulerPhase === C.SchedulerPhase_3) {
        if (_this._text_selection$_buildScheduled)
          return;
        _this._text_selection$_buildScheduled = true;
        t3.SchedulerBinding__postFrameCallbacks.push(new A.SelectionOverlay_markNeedsBuild_closure(_this));
      } else {
        if (!t2) {
          t1._1.markNeedsBuild$0();
          _this._handles._0.markNeedsBuild$0();
        }
        t1 = _this._toolbar;
        if (t1 != null)
          t1.markNeedsBuild$0();
        t1 = $.ContextMenuController__shownInstance;
        if (t1 === _this._contextMenuController) {
          t1 = $.ContextMenuController__menuOverlayEntry;
          if (t1 != null)
            t1.markNeedsBuild$0();
        } else if (t1 === _this._spellCheckToolbarController) {
          t1 = $.ContextMenuController__menuOverlayEntry;
          if (t1 != null)
            t1.markNeedsBuild$0();
        }
      }
    },
    hide$0() {
      var t1, _this = this;
      _this._magnifierController.hide$0();
      _this.hideHandles$0();
      if (_this._toolbar == null) {
        t1 = $.ContextMenuController__shownInstance;
        t1 = t1 === _this._contextMenuController || t1 === _this._spellCheckToolbarController;
      } else
        t1 = true;
      if (t1)
        _this.hideToolbar$0();
    },
    hideToolbar$0() {
      var t1, _this = this;
      _this._contextMenuController.remove$0(0);
      _this._spellCheckToolbarController.remove$0(0);
      t1 = _this._toolbar;
      if (t1 == null)
        return;
      t1.remove$0(0);
      t1 = _this._toolbar;
      if (t1 != null)
        t1.dispose$0();
      _this._toolbar = null;
    },
    _buildToolbar$1(context) {
      var t1, t2, t3, editingRegion, midX, _this = this, _null = null;
      if (_this.selectionControls == null)
        return C.SizedBox_0_0_null_null;
      t1 = _this.context.get$renderObject();
      t1.toString;
      type$.RenderBox._as(t1);
      t2 = B.MatrixUtils_transformPoint(t1.getTransformTo$1(_null), C.Offset_0_0);
      t3 = t1.get$size().bottomRight$1(C.Offset_0_0);
      editingRegion = B.Rect$fromPoints(t2, B.MatrixUtils_transformPoint(t1.getTransformTo$1(_null), t3));
      midX = C.JSArray_methods.get$last(_this._selectionEndpoints).point._dy - C.JSArray_methods.get$first(_this._selectionEndpoints).point._dy > _this._lineHeightAtEnd / 2 ? (editingRegion.right - editingRegion.left) / 2 : (C.JSArray_methods.get$first(_this._selectionEndpoints).point._dx + C.JSArray_methods.get$last(_this._selectionEndpoints).point._dx) / 2;
      return new A._SelectionToolbarWrapper(new B.Builder(new A.SelectionOverlay__buildToolbar_closure(_this, editingRegion, new B.Offset(midX, C.JSArray_methods.get$first(_this._selectionEndpoints).point._dy - _this._lineHeightAtStart)), _null), new B.Offset(-editingRegion.left, -editingRegion.top), _this.toolbarLayerLink, _this.toolbarVisible, _null);
    },
    updateMagnifier$1(magnifierInfo) {
      if (this._magnifierController._overlayEntry == null)
        return;
      this._magnifierInfo.set$value(magnifierInfo);
    }
  };
  A._SelectionToolbarWrapper.prototype = {
    createState$0() {
      return new A._SelectionToolbarWrapperState(null, null);
    }
  };
  A._SelectionToolbarWrapperState.prototype = {
    initState$0() {
      var t1, _this = this;
      _this.super$State$initState();
      _this.___SelectionToolbarWrapperState__controller_A = B.AnimationController$(null, C.Duration_150000, null, null, _this);
      _this._toolbarVisibilityChanged$0();
      t1 = _this._widget.visibility;
      if (t1 != null)
        t1.addListener$1(_this.get$_toolbarVisibilityChanged());
    },
    didUpdateWidget$1(oldWidget) {
      var t1, _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.visibility;
      if (t1 == _this._widget.visibility)
        return;
      if (t1 != null)
        t1.removeListener$1(_this.get$_toolbarVisibilityChanged());
      _this._toolbarVisibilityChanged$0();
      t1 = _this._widget.visibility;
      if (t1 != null)
        t1.addListener$1(_this.get$_toolbarVisibilityChanged());
    },
    dispose$0() {
      var _this = this,
        t1 = _this._widget.visibility;
      if (t1 != null)
        t1.removeListener$1(_this.get$_toolbarVisibilityChanged());
      t1 = _this.___SelectionToolbarWrapperState__controller_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      _this.super$__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin$dispose();
    },
    _toolbarVisibilityChanged$0() {
      var t2,
        t1 = this._widget.visibility;
      t1 = t1 == null ? null : t1._change_notifier$_value;
      if (t1 == null)
        t1 = true;
      t2 = this.___SelectionToolbarWrapperState__controller_A;
      if (t1) {
        t2 === $ && B.throwUnnamedLateFieldNI();
        t2.forward$0();
      } else {
        t2 === $ && B.throwUnnamedLateFieldNI();
        t2.reverse$0();
      }
    },
    build$1(context) {
      var t3, t4, t5, _null = null,
        t1 = this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection,
        t2 = this.___SelectionToolbarWrapperState__controller_A;
      t2 === $ && B.throwUnnamedLateFieldNI();
      t3 = this._widget;
      t4 = t3.layerLink;
      t5 = t3.offset;
      return A.TextFieldTapRegion$(B.Directionality$(new B.FadeTransition(t2, false, A.CompositedTransformFollower$(t3.child, t4, t5, false), _null), t1), _null, D.Type_EditableText_O5i, _null, _null);
    }
  };
  A._SelectionHandleOverlay.prototype = {
    createState$0() {
      return new A._SelectionHandleOverlayState(null, null);
    }
  };
  A._SelectionHandleOverlayState.prototype = {
    initState$0() {
      var _this = this;
      _this.super$State$initState();
      _this.___SelectionHandleOverlayState__controller_A = B.AnimationController$(null, C.Duration_150000, null, null, _this);
      _this._handleVisibilityChanged$0();
      _this._widget.visibility.addListener$1(_this.get$_handleVisibilityChanged());
    },
    _handleVisibilityChanged$0() {
      var t2,
        t1 = this._widget.visibility._change_notifier$_value;
      if (t1 == null)
        t1 = true;
      t2 = this.___SelectionHandleOverlayState__controller_A;
      if (t1) {
        t2 === $ && B.throwUnnamedLateFieldNI();
        t2.forward$0();
      } else {
        t2 === $ && B.throwUnnamedLateFieldNI();
        t2.reverse$0();
      }
    },
    didUpdateWidget$1(oldWidget) {
      var t1, _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = _this.get$_handleVisibilityChanged();
      oldWidget.visibility.removeListener$1(t1);
      _this._handleVisibilityChanged$0();
      _this._widget.visibility.addListener$1(t1);
    },
    dispose$0() {
      var t1, _this = this;
      _this._widget.visibility.removeListener$1(_this.get$_handleVisibilityChanged());
      t1 = _this.___SelectionHandleOverlayState__controller_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      _this.super$__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin$dispose();
    },
    build$1(context) {
      var handleRect, interactiveRect, t3, t4, t5, handleAnchor, eagerlyAcceptDragWhenCollapsed, t6, t7, t8, t9, _this = this, _null = null,
        t1 = _this._widget,
        t2 = t1.preferredLineHeight,
        handleSize = t1.selectionControls.getHandleSize$1(t2);
      t2 = 0 + handleSize._dx;
      t1 = 0 + handleSize._dy;
      handleRect = new B.Rect(0, 0, t2, t1);
      interactiveRect = handleRect.expandToInclude$1(B.Rect$fromCircle(handleRect.get$center(), 24));
      t3 = interactiveRect.right - interactiveRect.left;
      t2 = Math.max((t3 - t2) / 2, 0);
      t4 = interactiveRect.bottom - interactiveRect.top;
      t1 = Math.max((t4 - t1) / 2, 0);
      t5 = _this._widget;
      handleAnchor = t5.selectionControls.getHandleAnchor$2(t5.type, t5.preferredLineHeight);
      t5 = _this._widget;
      eagerlyAcceptDragWhenCollapsed = t5.type === C.TextSelectionHandleType_2 && B.defaultTargetPlatform() === C.TargetPlatform_2;
      t5 = t5.handleLayerLink;
      t6 = new B.Offset(-handleAnchor._dx, -handleAnchor._dy).$sub(0, new B.Offset(t2, t1));
      t7 = _this.___SelectionHandleOverlayState__controller_A;
      t7 === $ && B.throwUnnamedLateFieldNI();
      t8 = B.LinkedHashMap_LinkedHashMap$_literal([C.Type_PanGestureRecognizer_9Ie, new B.GestureRecognizerFactoryWithHandlers(new A._SelectionHandleOverlayState_build_closure(_this), new A._SelectionHandleOverlayState_build_closure0(_this, eagerlyAcceptDragWhenCollapsed), type$.GestureRecognizerFactoryWithHandlers_PanGestureRecognizer)], type$.Type, type$.GestureRecognizerFactory_GestureRecognizer);
      t9 = _this._widget;
      return A.CompositedTransformFollower$(new B.FadeTransition(t7, false, B.SizedBox$(new B.Align(C.Alignment_m1_m1, _null, _null, new B.RawGestureDetector(new B.Padding(new B.EdgeInsets(t2, t1, t2, t1), t9.selectionControls.buildHandle$4(context, t9.type, t9.preferredLineHeight, t9.onSelectionHandleTapped), _null), t8, C.HitTestBehavior_2, false, _null), _null), t4, t3), _null), t5, t6, false);
    }
  };
  A.TextSelectionGestureDetectorBuilder.prototype = {
    _showMagnifierIfSupportedByPlatform$1(positionToShow) {
      var t1;
      switch (B.defaultTargetPlatform().index) {
        case 0:
        case 2:
          t1 = this.delegate.editableTextKey.get$currentState();
          t1.toString;
          t1.showMagnifier$1(positionToShow);
          break;
        case 1:
        case 3:
        case 4:
        case 5:
          break;
      }
    },
    _hideMagnifierIfSupportedByPlatform$0() {
      switch (B.defaultTargetPlatform().index) {
        case 0:
        case 2:
          var t1 = this.delegate.editableTextKey.get$currentState();
          t1.toString;
          t1.hideMagnifier$0();
          break;
        case 1:
        case 3:
        case 4:
        case 5:
          break;
      }
    },
    get$_lastSecondaryTapWasOnSelection() {
      var t3, textPosition,
        t1 = this.delegate.editableTextKey,
        t2 = t1.get$currentState();
      t2.toString;
      t2.get$renderEditable();
      t2 = t1.get$currentState();
      t2.toString;
      t2 = t2.get$renderEditable();
      t3 = t1.get$currentState();
      t3.toString;
      t3 = t3.get$renderEditable()._lastSecondaryTapDownPosition;
      t3.toString;
      textPosition = t2.getPositionForPoint$1(t3);
      t2 = t1.get$currentState();
      t2.toString;
      t3 = textPosition.offset;
      if (t2.get$renderEditable()._selection.start <= t3) {
        t1 = t1.get$currentState();
        t1.toString;
        t3 = t1.get$renderEditable()._selection.end >= t3;
        t1 = t3;
      } else
        t1 = false;
      return t1;
    },
    _positionWasOnSelectionExclusive$1(textPosition) {
      var selection,
        t1 = this.delegate.editableTextKey.get$currentState();
      t1.toString;
      selection = t1.get$renderEditable()._selection;
      t1 = textPosition.offset;
      return selection.start < t1 && selection.end > t1;
    },
    _positionWasOnSelectionInclusive$1(textPosition) {
      var selection,
        t1 = this.delegate.editableTextKey.get$currentState();
      t1.toString;
      selection = t1.get$renderEditable()._selection;
      t1 = textPosition.offset;
      return selection.start <= t1 && selection.end >= t1;
    },
    _expandSelection$3(offset, cause, fromSelection) {
      var tappedPosition, selection, t3, t4, nextSelection,
        t1 = this.delegate.editableTextKey,
        t2 = t1.get$currentState();
      t2.toString;
      tappedPosition = t2.get$renderEditable().getPositionForPoint$1(offset);
      if (fromSelection == null) {
        t2 = t1.get$currentState();
        t2.toString;
        selection = t2.get$renderEditable()._selection;
      } else
        selection = fromSelection;
      t2 = tappedPosition.offset;
      t3 = selection.baseOffset;
      t4 = selection.extentOffset;
      nextSelection = selection.copyWith$2$baseOffset$extentOffset(Math.abs(t2 - t3) < Math.abs(t2 - t4) ? t4 : t3, t2);
      t2 = t1.get$currentState();
      t2.toString;
      t1 = t1.get$currentState();
      t1.toString;
      t2.userUpdateTextEditingValue$2(t1._widget.controller._change_notifier$_value.copyWith$1$selection(nextSelection), cause);
    },
    _expandSelection$2(offset, cause) {
      return this._expandSelection$3(offset, cause, null);
    },
    _extendSelection$2(offset, cause) {
      var tappedPosition, nextSelection,
        t1 = this.delegate.editableTextKey,
        t2 = t1.get$currentState();
      t2.toString;
      tappedPosition = t2.get$renderEditable().getPositionForPoint$1(offset);
      t2 = t1.get$currentState();
      t2.toString;
      nextSelection = t2.get$renderEditable()._selection.copyWith$1$extentOffset(tappedPosition.offset);
      t2 = t1.get$currentState();
      t2.toString;
      t1 = t1.get$currentState();
      t1.toString;
      t2.userUpdateTextEditingValue$2(t1._widget.controller._change_notifier$_value.copyWith$1$selection(nextSelection), cause);
    },
    get$_text_selection$_scrollPosition() {
      var scrollableState,
        t1 = this.delegate.editableTextKey;
      if ($.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1) == null)
        scrollableState = null;
      else {
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1);
        t1.toString;
        scrollableState = B.Scrollable_maybeOf(t1);
      }
      if (scrollableState == null)
        t1 = 0;
      else {
        t1 = scrollableState._scrollable$_position._pixels;
        t1.toString;
      }
      return t1;
    },
    get$_scrollDirection() {
      var scrollableState,
        t1 = this.delegate.editableTextKey;
      if ($.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1) == null)
        scrollableState = null;
      else {
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1);
        t1.toString;
        scrollableState = B.Scrollable_maybeOf(t1);
      }
      return scrollableState == null ? null : scrollableState._widget.axisDirection;
    },
    onTapTrackStart$0() {
      var t2,
        t1 = $.ServicesBinding__instance.ServicesBinding___ServicesBinding__keyboard_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1 = t1._pressedKeys;
      t2 = B._instanceType(t1)._eval$1("LinkedHashMapValuesIterable<2>");
      t2 = B.LinkedHashSet_LinkedHashSet$of(new B.LinkedHashMapValuesIterable(t1, t2), t2._eval$1("Iterable.E")).intersection$1(B.LinkedHashSet_LinkedHashSet$_literal([C.LogicalKeyboardKey_8589934850, C.LogicalKeyboardKey_8589934851], type$.LogicalKeyboardKey));
      this._isShiftPressed = t2.get$isNotEmpty(t2);
    },
    onTapTrackReset$0() {
      this._isShiftPressed = false;
    },
    onTapDown$1(details) {
      var kind, isShiftPressedValid, t3, _this = this,
        t1 = _this.delegate,
        t2 = t1._widget.enableInteractiveSelection;
      if (t2)
        t1.get$_isEnabled();
      if (!t2)
        return;
      t1 = t1.editableTextKey;
      t2 = t1.get$currentState();
      t2.toString;
      t2 = t2.get$renderEditable();
      t2 = t2._lastTapDownPosition = details.globalPosition;
      kind = details.kind;
      _this._shouldShowSelectionToolbar = kind === C.PointerDeviceKind_0 || kind === C.PointerDeviceKind_2;
      isShiftPressedValid = _this._isShiftPressed;
      if (isShiftPressedValid) {
        t3 = t1.get$currentState();
        t3.toString;
        t3.get$renderEditable()._selection;
      }
      switch (B.defaultTargetPlatform().index) {
        case 0:
          t2 = t1.get$currentState();
          t2.toString;
          t2._widget.toString;
          $label0$1: {
            t2 = C.PointerDeviceKind_2 === kind || C.PointerDeviceKind_3 === kind;
            if (t2) {
              t1 = t1.get$currentState();
              t1.toString;
              t1._widget.toString;
              break $label0$1;
            }
            break $label0$1;
          }
          if (t2)
            A.Scribe_isFeatureAvailable().then$1$1(new A.TextSelectionGestureDetectorBuilder_onTapDown_closure(_this), type$.Null);
          break;
        case 1:
        case 2:
          break;
        case 4:
          t3 = t1.get$currentState();
          t3.toString;
          t3.hideToolbar$0();
          if (isShiftPressedValid) {
            t1 = t1.get$currentState();
            t1.toString;
            _this._expandSelection$3(t2, D.SelectionChangedCause_0, t1.get$renderEditable()._editable$_hasFocus ? null : D.TextSelection_qBU);
            return;
          }
          t1 = t1.get$currentState();
          t1.toString;
          t1 = t1.get$renderEditable();
          t2 = t1._lastTapDownPosition;
          t2.toString;
          t1.selectPositionAt$2$cause$from(D.SelectionChangedCause_0, t2);
          break;
        case 3:
        case 5:
          t3 = t1.get$currentState();
          t3.toString;
          t3.hideToolbar$0();
          if (isShiftPressedValid) {
            _this._extendSelection$2(t2, D.SelectionChangedCause_0);
            return;
          }
          t1 = t1.get$currentState();
          t1.toString;
          t1 = t1.get$renderEditable();
          t2 = t1._lastTapDownPosition;
          t2.toString;
          t1.selectPositionAt$2$cause$from(D.SelectionChangedCause_0, t2);
          break;
      }
    },
    onForcePressStart$1(details) {
      var t1, t2;
      this._shouldShowSelectionToolbar = true;
      t1 = this.delegate;
      t2 = t1._widget.enableInteractiveSelection;
      if (t2)
        t1.get$_isEnabled();
      if (!t2)
        return;
      t1 = t1.editableTextKey;
      t2 = t1.get$currentState();
      t2.toString;
      t2.get$renderEditable().selectWordsInRange$2$cause$from(D.SelectionChangedCause_3, details.globalPosition);
      t1 = t1.get$currentState();
      t1.toString;
      t1.showToolbar$0();
    },
    onForcePressEnd$1(details) {
      var t1 = this.delegate.editableTextKey,
        t2 = t1.get$currentState();
      t2.toString;
      t2.get$renderEditable().selectWordsInRange$2$cause$from(D.SelectionChangedCause_3, details.globalPosition);
      if (this._shouldShowSelectionToolbar) {
        t1 = t1.get$currentState();
        t1.toString;
        t1.showToolbar$0();
      }
    },
    onSingleTapUp$1(details) {
      var isShiftPressedValid, t3, t4, fromSelection, previousSelection, textPosition, t5, position, word, newSelection, _this = this,
        t1 = _this.delegate,
        t2 = t1._widget.enableInteractiveSelection;
      if (t2)
        t1.get$_isEnabled();
      if (!t2) {
        t1 = t1.editableTextKey.get$currentState();
        t1.toString;
        t1.requestKeyboard$0();
        return;
      }
      isShiftPressedValid = _this._isShiftPressed;
      if (isShiftPressedValid) {
        t2 = t1.editableTextKey.get$currentState();
        t2.toString;
        t2.get$renderEditable()._selection;
      }
      switch (B.defaultTargetPlatform().index) {
        case 3:
        case 4:
        case 5:
          break;
        case 0:
          t2 = t1.editableTextKey;
          t3 = t2.get$currentState();
          t3.toString;
          t3.hideToolbar$1(false);
          if (isShiftPressedValid) {
            _this._extendSelection$2(details.globalPosition, D.SelectionChangedCause_0);
            return;
          }
          t3 = t2.get$currentState();
          t3.toString;
          t3 = t3.get$renderEditable();
          t4 = t3._lastTapDownPosition;
          t4.toString;
          t3.selectPositionAt$2$cause$from(D.SelectionChangedCause_0, t4);
          t2 = t2.get$currentState();
          t2.toString;
          t2.showSpellCheckSuggestionsToolbar$0();
          break;
        case 1:
          t2 = t1.editableTextKey;
          t3 = t2.get$currentState();
          t3.toString;
          t3.hideToolbar$1(false);
          if (isShiftPressedValid) {
            _this._extendSelection$2(details.globalPosition, D.SelectionChangedCause_0);
            return;
          }
          t2 = t2.get$currentState();
          t2.toString;
          t2 = t2.get$renderEditable();
          t3 = t2._lastTapDownPosition;
          t3.toString;
          t2.selectPositionAt$2$cause$from(D.SelectionChangedCause_0, t3);
          break;
        case 2:
          if (isShiftPressedValid) {
            t1 = t1.editableTextKey.get$currentState();
            t1.toString;
            fromSelection = t1.get$renderEditable()._editable$_hasFocus ? null : D.TextSelection_qBU;
            _this._expandSelection$3(details.globalPosition, D.SelectionChangedCause_0, fromSelection);
            return;
          }
          switch (details.kind.index) {
            case 1:
            case 4:
            case 2:
            case 3:
              t2 = t1.editableTextKey.get$currentState();
              t2.toString;
              t2 = t2.get$renderEditable();
              t3 = t2._lastTapDownPosition;
              t3.toString;
              t2.selectPositionAt$2$cause$from(D.SelectionChangedCause_0, t3);
              break;
            case 0:
            case 5:
              t2 = t1.editableTextKey;
              t3 = t2.get$currentState();
              t3.toString;
              previousSelection = t3.get$renderEditable()._selection;
              t3 = t2.get$currentState();
              t3.toString;
              textPosition = t3.get$renderEditable().getPositionForPoint$1(details.globalPosition);
              t3 = t2.get$currentState();
              t3.toString;
              if (t3.findSuggestionSpanAtCursorIndex$1(textPosition.offset) != null) {
                t3 = t2.get$currentState();
                t3.toString;
                t3 = t3.get$renderEditable();
                t4 = t3._lastTapDownPosition;
                t4.toString;
                t3.selectWordsInRange$2$cause$from(D.SelectionChangedCause_0, t4);
                t3 = t2.get$currentState();
                t3.toString;
                if (!previousSelection.$eq(0, t3._widget.controller._change_notifier$_value.selection)) {
                  t2 = t2.get$currentState();
                  t2.toString;
                  t2.showSpellCheckSuggestionsToolbar$0();
                } else {
                  t2 = t2.get$currentState();
                  t2.toString;
                  t2.toggleToolbar$1(false);
                }
              } else {
                if (!(_this._positionWasOnSelectionExclusive$1(textPosition) && previousSelection.start !== previousSelection.end)) {
                  t3 = false;
                  if (_this._positionWasOnSelectionInclusive$1(textPosition))
                    if (previousSelection.start === previousSelection.end)
                      if (textPosition.affinity === previousSelection.affinity) {
                        t3 = t2.get$currentState();
                        t3.toString;
                        t3 = !t3.get$renderEditable()._readOnly;
                      }
                } else
                  t3 = true;
                if (t3) {
                  t3 = t2.get$currentState();
                  t3.toString;
                  t3 = t3.get$renderEditable()._editable$_hasFocus;
                } else
                  t3 = false;
                if (t3) {
                  t2 = t2.get$currentState();
                  t2.toString;
                  t2.toggleToolbar$1(false);
                } else {
                  t3 = t2.get$currentState();
                  t3.toString;
                  t3 = t3.get$renderEditable();
                  t3._computeTextMetricsIfNeeded$0();
                  t4 = t3._editable$_textPainter;
                  t5 = t3._lastTapDownPosition;
                  t5.toString;
                  position = t4.getPositionForOffset$1(t3.globalToLocal$1(t5).$sub(0, t3.get$_paintOffset()));
                  word = t4._layoutCache.layout._paragraph.getWordBoundary$1(position);
                  newSelection = B._Cell$named("newSelection");
                  t4 = word.start;
                  if (position.offset <= t4)
                    newSelection._value = A.TextSelection$collapsed(C.TextAffinity_1, t4);
                  else
                    newSelection._value = A.TextSelection$collapsed(C.TextAffinity_0, word.end);
                  t3._setSelection$2(newSelection._readLocal$0(), D.SelectionChangedCause_0);
                  t3 = t2.get$currentState();
                  t3.toString;
                  t4 = false;
                  if (previousSelection.$eq(0, t3._widget.controller._change_notifier$_value.selection)) {
                    t3 = t2.get$currentState();
                    t3.toString;
                    if (t3.get$renderEditable()._editable$_hasFocus) {
                      t3 = t2.get$currentState();
                      t3.toString;
                      t3 = !t3.get$renderEditable()._readOnly;
                    } else
                      t3 = t4;
                  } else
                    t3 = t4;
                  if (t3) {
                    t2 = t2.get$currentState();
                    t2.toString;
                    t2.toggleToolbar$1(false);
                  } else {
                    t2 = t2.get$currentState();
                    t2.toString;
                    t2.hideToolbar$1(false);
                  }
                }
              }
              break;
          }
          break;
      }
      t1 = t1.editableTextKey.get$currentState();
      t1.toString;
      t1.requestKeyboard$0();
    },
    onSingleTapCancel$0() {
    },
    onSingleLongTapStart$1(details) {
      var t3, t4, t5, _this = this,
        t1 = _this.delegate,
        t2 = t1._widget.enableInteractiveSelection;
      if (t2)
        t1.get$_isEnabled();
      if (!t2)
        return;
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
          t2 = t1.editableTextKey;
          t3 = t2.get$currentState();
          t3.toString;
          if (!t3.get$renderEditable()._editable$_hasFocus) {
            _this._longPressStartedWithoutFocus = true;
            t2 = t2.get$currentState();
            t2.toString;
            t2 = t2.get$renderEditable();
            t3 = t2._lastTapDownPosition;
            t3.toString;
            t2.selectWordsInRange$2$cause$from(D.SelectionChangedCause_2, t3);
          } else {
            t3 = t2.get$currentState();
            t3.toString;
            if (t3.get$renderEditable()._readOnly) {
              t3 = t2.get$currentState();
              t3.toString;
              t3 = t3.get$renderEditable();
              t4 = t3._lastTapDownPosition;
              t4.toString;
              t3.selectWordsInRange$2$cause$from(D.SelectionChangedCause_2, t4);
              t3 = t2.get$currentState();
              t3.toString;
              if (t3._framework$_element._widget != null) {
                t2 = t2.get$currentState();
                t2.toString;
                t2 = t2._framework$_element;
                t2.toString;
                B.Feedback_forLongPress(t2);
              }
            } else {
              t3 = t2.get$currentState();
              t3.toString;
              t4 = details.globalPosition;
              t3.get$renderEditable().selectPositionAt$2$cause$from(D.SelectionChangedCause_2, t4);
              t3 = t2.get$currentState();
              t3.toString;
              t4 = t3.get$renderEditable().globalToLocal$1(t4);
              t3 = t2.get$currentState();
              t3.toString;
              t3 = t3._widget.controller._change_notifier$_value.selection;
              t5 = t2.get$currentState();
              t5.toString;
              t5 = t5._widget.controller._change_notifier$_value.selection;
              t2 = t2.get$currentState();
              t2.toString;
              t2.updateFloatingCursor$1(new B.RawFloatingCursorPoint(C.Offset_0_0, new B._Record_2(t4, new B.TextPosition(t3.baseOffset, t5.affinity)), C.FloatingCursorDragState_0));
            }
          }
          break;
        case 0:
        case 1:
        case 3:
        case 5:
          t2 = t1.editableTextKey;
          t3 = t2.get$currentState();
          t3.toString;
          t3 = t3.get$renderEditable();
          t4 = t3._lastTapDownPosition;
          t4.toString;
          t3.selectWordsInRange$2$cause$from(D.SelectionChangedCause_2, t4);
          t3 = t2.get$currentState();
          t3.toString;
          if (t3._framework$_element._widget != null) {
            t2 = t2.get$currentState();
            t2.toString;
            t2 = t2._framework$_element;
            t2.toString;
            B.Feedback_forLongPress(t2);
          }
          break;
      }
      _this._showMagnifierIfSupportedByPlatform$1(details.globalPosition);
      t1 = t1.editableTextKey.get$currentState();
      t1.toString;
      t1 = t1.get$renderEditable()._editable$_offset._pixels;
      t1.toString;
      _this._dragStartViewportOffset = t1;
      _this._dragStartScrollOffset = _this.get$_text_selection$_scrollPosition();
    },
    onSingleLongTapMoveUpdate$1(details) {
      var editableOffset, t3, t4, t5, _this = this,
        t1 = _this.delegate,
        t2 = t1._widget.enableInteractiveSelection;
      if (t2)
        t1.get$_isEnabled();
      if (!t2)
        return;
      t1 = t1.editableTextKey;
      t2 = t1.get$currentState();
      t2.toString;
      if (t2.get$renderEditable()._editable$_maxLines === 1) {
        t2 = t1.get$currentState();
        t2.toString;
        t2 = t2.get$renderEditable()._editable$_offset._pixels;
        t2.toString;
        editableOffset = new B.Offset(t2 - _this._dragStartViewportOffset, 0);
      } else {
        t2 = t1.get$currentState();
        t2.toString;
        t2 = t2.get$renderEditable()._editable$_offset._pixels;
        t2.toString;
        editableOffset = new B.Offset(0, t2 - _this._dragStartViewportOffset);
      }
      t2 = _this.get$_scrollDirection();
      switch (B.axisDirectionToAxis(t2 == null ? C.AxisDirection_3 : t2).index) {
        case 0:
          t2 = new B.Offset(_this.get$_text_selection$_scrollPosition() - _this._dragStartScrollOffset, 0);
          break;
        case 1:
          t2 = new B.Offset(0, _this.get$_text_selection$_scrollPosition() - _this._dragStartScrollOffset);
          break;
        default:
          t2 = null;
      }
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
          if (!_this._longPressStartedWithoutFocus) {
            t3 = t1.get$currentState();
            t3.toString;
            t3 = t3.get$renderEditable()._readOnly;
          } else
            t3 = true;
          t4 = details.globalPosition;
          t5 = details.offsetFromOrigin;
          if (t3) {
            t1 = t1.get$currentState();
            t1.toString;
            t1.get$renderEditable().selectWordsInRange$3$cause$from$to(D.SelectionChangedCause_2, t4.$sub(0, t5).$sub(0, editableOffset).$sub(0, t2), t4);
          } else {
            t2 = t1.get$currentState();
            t2.toString;
            t2.get$renderEditable().selectPositionAt$2$cause$from(D.SelectionChangedCause_2, t4);
            t1 = t1.get$currentState();
            t1.toString;
            t1.updateFloatingCursor$1(new B.RawFloatingCursorPoint(t5, null, C.FloatingCursorDragState_1));
          }
          break;
        case 0:
        case 1:
        case 3:
        case 5:
          t1 = t1.get$currentState();
          t1.toString;
          t3 = details.globalPosition;
          t1.get$renderEditable().selectWordsInRange$3$cause$from$to(D.SelectionChangedCause_2, t3.$sub(0, details.offsetFromOrigin).$sub(0, editableOffset).$sub(0, t2), t3);
          break;
      }
      _this._showMagnifierIfSupportedByPlatform$1(details.globalPosition);
    },
    onSingleLongTapEnd$1(details) {
      var t1, t2, t3, _this = this;
      _this._hideMagnifierIfSupportedByPlatform$0();
      if (_this._shouldShowSelectionToolbar) {
        t1 = _this.delegate.editableTextKey.get$currentState();
        t1.toString;
        t1.showToolbar$0();
      }
      _this._longPressStartedWithoutFocus = false;
      _this._dragStartScrollOffset = _this._dragStartViewportOffset = 0;
      t1 = false;
      if (B.defaultTargetPlatform() === C.TargetPlatform_2) {
        t2 = _this.delegate;
        t3 = t2._widget.enableInteractiveSelection;
        if (t3)
          t2.get$_isEnabled();
        if (t3) {
          t1 = t2.editableTextKey.get$currentState();
          t1.toString;
          t1 = t1._widget.controller._change_notifier$_value.selection;
          t1 = t1.start === t1.end;
        }
      }
      if (t1) {
        t1 = _this.delegate.editableTextKey.get$currentState();
        t1.toString;
        t1.updateFloatingCursor$1(new B.RawFloatingCursorPoint(null, null, C.FloatingCursorDragState_2));
      }
    },
    onSecondaryTap$0() {
      var t3,
        t1 = this.delegate,
        t2 = t1._widget.enableInteractiveSelection;
      if (t2)
        t1.get$_isEnabled();
      if (!t2)
        return;
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
          if (this.get$_lastSecondaryTapWasOnSelection()) {
            t2 = t1.editableTextKey.get$currentState();
            t2.toString;
            t2 = !t2.get$renderEditable()._editable$_hasFocus;
          } else
            t2 = true;
          if (t2) {
            t2 = t1.editableTextKey.get$currentState();
            t2.toString;
            t2 = t2.get$renderEditable();
            t3 = t2._lastTapDownPosition;
            t3.toString;
            t2.selectWordsInRange$2$cause$from(D.SelectionChangedCause_0, t3);
          }
          if (this._shouldShowSelectionToolbar) {
            t1 = t1.editableTextKey;
            t2 = t1.get$currentState();
            t2.toString;
            t2.hideToolbar$0();
            t1 = t1.get$currentState();
            t1.toString;
            t1.showToolbar$0();
          }
          break;
        case 0:
        case 1:
        case 3:
        case 5:
          t1 = t1.editableTextKey;
          t2 = t1.get$currentState();
          t2.toString;
          if (!t2.get$renderEditable()._editable$_hasFocus) {
            t2 = t1.get$currentState();
            t2.toString;
            t2 = t2.get$renderEditable();
            t3 = t2._lastTapDownPosition;
            t3.toString;
            t2.selectPositionAt$2$cause$from(D.SelectionChangedCause_0, t3);
          }
          t1 = t1.get$currentState();
          t1.toString;
          t1.toggleToolbar$0();
          break;
      }
    },
    onSecondaryTapDown$1(details) {
      var t1 = this.delegate.editableTextKey.get$currentState();
      t1.toString;
      t1 = t1.get$renderEditable();
      t1._lastSecondaryTapDownPosition = t1._lastTapDownPosition = details.globalPosition;
      this._shouldShowSelectionToolbar = true;
    },
    onDoubleTapDown$1(details) {
      var t3,
        t1 = this.delegate,
        t2 = t1._widget.enableInteractiveSelection;
      if (t2)
        t1.get$_isEnabled();
      if (t2) {
        t1 = t1.editableTextKey;
        t2 = t1.get$currentState();
        t2.toString;
        t2 = t2.get$renderEditable();
        t3 = t2._lastTapDownPosition;
        t3.toString;
        t2.selectWordsInRange$2$cause$from(D.SelectionChangedCause_1, t3);
        if (this._shouldShowSelectionToolbar) {
          t1 = t1.get$currentState();
          t1.toString;
          t1.showToolbar$0();
        }
      }
    },
    _selectParagraphsInRange$3$cause$from$to(cause, from, to) {
      var t1 = this.delegate.editableTextKey.get$currentState();
      t1.toString;
      this._selectTextBoundariesInRange$4$boundary$cause$from$to(new B.ParagraphBoundary(t1._widget.controller._change_notifier$_value.text), cause, from, to);
    },
    _selectParagraphsInRange$2$cause$from(cause, from) {
      return this._selectParagraphsInRange$3$cause$from$to(cause, from, null);
    },
    _selectLinesInRange$3$cause$from$to(cause, from, to) {
      var t1 = this.delegate.editableTextKey.get$currentState();
      t1.toString;
      this._selectTextBoundariesInRange$4$boundary$cause$from$to(new B.LineBoundary(t1.get$renderEditable()), cause, from, to);
    },
    _selectLinesInRange$2$cause$from(cause, from) {
      return this._selectLinesInRange$3$cause$from$to(cause, from, null);
    },
    _text_selection$_moveToTextBoundary$2(extent, textBoundary) {
      var start, end,
        t1 = extent.offset,
        t2 = this.delegate.editableTextKey,
        t3 = t2.get$currentState();
      t3.toString;
      start = textBoundary.getLeadingTextBoundaryAt$1(t1 === t3._widget.controller._change_notifier$_value.text.length ? t1 - 1 : t1);
      if (start == null)
        start = 0;
      end = textBoundary.getTrailingTextBoundaryAt$1(t1);
      if (end == null) {
        t1 = t2.get$currentState();
        t1.toString;
        end = t1._widget.controller._change_notifier$_value.text.length;
      }
      return new B.TextRange(start, end);
    },
    _selectTextBoundariesInRange$4$boundary$cause$from$to(boundary, cause, from, to) {
      var fromPosition, fromRange, toPosition, toRange, t3, newSelection,
        t1 = this.delegate.editableTextKey,
        t2 = t1.get$currentState();
      t2.toString;
      fromPosition = t2.get$renderEditable().getPositionForPoint$1(from);
      fromRange = this._text_selection$_moveToTextBoundary$2(fromPosition, boundary);
      if (to == null)
        toPosition = fromPosition;
      else {
        t2 = t1.get$currentState();
        t2.toString;
        toPosition = t2.get$renderEditable().getPositionForPoint$1(to);
      }
      toRange = toPosition.$eq(0, fromPosition) ? fromRange : this._text_selection$_moveToTextBoundary$2(toPosition, boundary);
      t2 = fromRange.start;
      t3 = toRange.end;
      newSelection = t2 < t3 ? B.TextSelection$(C.TextAffinity_1, t2, t3, false) : B.TextSelection$(C.TextAffinity_1, fromRange.end, toRange.start, false);
      t2 = t1.get$currentState();
      t2.toString;
      t1 = t1.get$currentState();
      t1.toString;
      t2.userUpdateTextEditingValue$2(t1._widget.controller._change_notifier$_value.copyWith$1$selection(newSelection), cause);
    },
    onTripleTapDown$1(details) {
      var _this = this,
        t1 = _this.delegate,
        t2 = t1._widget.enableInteractiveSelection;
      if (t2)
        t1.get$_isEnabled();
      if (!t2)
        return;
      t1 = t1.editableTextKey;
      t2 = t1.get$currentState();
      t2.toString;
      if (t2.get$renderEditable()._editable$_maxLines === 1) {
        t2 = t1.get$currentState();
        t2.toString;
        t2.selectAll$1(D.SelectionChangedCause_0);
      } else
        switch (B.defaultTargetPlatform().index) {
          case 0:
          case 1:
          case 2:
          case 4:
          case 5:
            _this._selectParagraphsInRange$2$cause$from(D.SelectionChangedCause_0, details.globalPosition);
            break;
          case 3:
            _this._selectLinesInRange$2$cause$from(D.SelectionChangedCause_0, details.globalPosition);
            break;
        }
      if (_this._shouldShowSelectionToolbar) {
        t1 = t1.get$currentState();
        t1.toString;
        t1.showToolbar$0();
      }
    },
    onDragSelectionStart$1(details) {
      var kind, _this = this,
        t1 = _this.delegate,
        t2 = t1._widget.enableInteractiveSelection;
      if (t2)
        t1.get$_isEnabled();
      if (!t2)
        return;
      kind = details.kind;
      _this._shouldShowSelectionToolbar = kind === C.PointerDeviceKind_0 || kind === C.PointerDeviceKind_2;
      t1 = t1.editableTextKey;
      t2 = t1.get$currentState();
      t2.toString;
      _this._dragStartSelection = t2.get$renderEditable()._selection;
      _this._dragStartScrollOffset = _this.get$_text_selection$_scrollPosition();
      t2 = t1.get$currentState();
      t2.toString;
      t2 = t2.get$renderEditable()._editable$_offset._pixels;
      t2.toString;
      _this._dragStartViewportOffset = t2;
      if (A._TextSelectionGestureDetectorState__getEffectiveConsecutiveTapCount(details.consecutiveTapCount) > 1)
        return;
      if (_this._isShiftPressed) {
        t2 = t1.get$currentState();
        t2.toString;
        t2.get$renderEditable();
        t2 = t1.get$currentState();
        t2.toString;
        t2 = t2.get$renderEditable()._selection.get$isValid();
      } else
        t2 = false;
      if (t2)
        switch (B.defaultTargetPlatform().index) {
          case 2:
          case 4:
            _this._expandSelection$2(details.globalPosition, D.SelectionChangedCause_6);
            break;
          case 0:
          case 1:
          case 3:
          case 5:
            _this._extendSelection$2(details.globalPosition, D.SelectionChangedCause_6);
            break;
        }
      else
        switch (B.defaultTargetPlatform().index) {
          case 2:
            switch (kind) {
              case C.PointerDeviceKind_1:
              case C.PointerDeviceKind_4:
                t1 = t1.get$currentState();
                t1.toString;
                t1.get$renderEditable().selectPositionAt$2$cause$from(D.SelectionChangedCause_6, details.globalPosition);
                break;
              case C.PointerDeviceKind_2:
              case C.PointerDeviceKind_3:
              case C.PointerDeviceKind_0:
              case C.PointerDeviceKind_5:
              case null:
              case void 0:
                break;
            }
            break;
          case 0:
          case 1:
            switch (kind) {
              case C.PointerDeviceKind_1:
              case C.PointerDeviceKind_4:
                t1 = t1.get$currentState();
                t1.toString;
                t1.get$renderEditable().selectPositionAt$2$cause$from(D.SelectionChangedCause_6, details.globalPosition);
                break;
              case C.PointerDeviceKind_2:
              case C.PointerDeviceKind_3:
              case C.PointerDeviceKind_0:
              case C.PointerDeviceKind_5:
                t2 = t1.get$currentState();
                t2.toString;
                if (t2.get$renderEditable()._editable$_hasFocus) {
                  t1 = t1.get$currentState();
                  t1.toString;
                  t2 = details.globalPosition;
                  t1.get$renderEditable().selectPositionAt$2$cause$from(D.SelectionChangedCause_6, t2);
                  _this._showMagnifierIfSupportedByPlatform$1(t2);
                }
                break;
              case null:
              case void 0:
                break;
            }
            break;
          case 3:
          case 4:
          case 5:
            t1 = t1.get$currentState();
            t1.toString;
            t1.get$renderEditable().selectPositionAt$2$cause$from(D.SelectionChangedCause_6, details.globalPosition);
            break;
        }
    },
    onDragSelectionUpdate$1(details) {
      var t3, editableOffset, t4, dragStartGlobalPosition, t5, t6, selection, nextExtent, isInverted, _this = this,
        t1 = _this.delegate,
        t2 = t1._widget.enableInteractiveSelection;
      if (t2)
        t1.get$_isEnabled();
      if (!t2)
        return;
      if (!_this._isShiftPressed) {
        t2 = t1.editableTextKey;
        t3 = t2.get$currentState();
        t3.toString;
        if (t3.get$renderEditable()._editable$_maxLines === 1) {
          t3 = t2.get$currentState();
          t3.toString;
          t3 = t3.get$renderEditable()._editable$_offset._pixels;
          t3.toString;
          editableOffset = new B.Offset(t3 - _this._dragStartViewportOffset, 0);
        } else {
          t3 = t2.get$currentState();
          t3.toString;
          t3 = t3.get$renderEditable()._editable$_offset._pixels;
          t3.toString;
          editableOffset = new B.Offset(0, t3 - _this._dragStartViewportOffset);
        }
        t3 = _this.get$_scrollDirection();
        switch (B.axisDirectionToAxis(t3 == null ? C.AxisDirection_3 : t3).index) {
          case 0:
            t3 = new B.Offset(_this.get$_text_selection$_scrollPosition() - _this._dragStartScrollOffset, 0);
            break;
          case 1:
            t3 = new B.Offset(0, _this.get$_text_selection$_scrollPosition() - _this._dragStartScrollOffset);
            break;
          default:
            t3 = null;
        }
        t4 = details.globalPosition;
        dragStartGlobalPosition = t4.$sub(0, details.offsetFromOrigin);
        t5 = details.consecutiveTapCount;
        if (A._TextSelectionGestureDetectorState__getEffectiveConsecutiveTapCount(t5) === 2) {
          t6 = t2.get$currentState();
          t6.toString;
          t6.get$renderEditable().selectWordsInRange$3$cause$from$to(D.SelectionChangedCause_6, dragStartGlobalPosition.$sub(0, editableOffset).$sub(0, t3), t4);
          switch (details.kind) {
            case C.PointerDeviceKind_2:
            case C.PointerDeviceKind_3:
            case C.PointerDeviceKind_0:
            case C.PointerDeviceKind_5:
              return _this._showMagnifierIfSupportedByPlatform$1(t4);
            case C.PointerDeviceKind_1:
            case C.PointerDeviceKind_4:
            case null:
            case void 0:
              return;
          }
        }
        if (A._TextSelectionGestureDetectorState__getEffectiveConsecutiveTapCount(t5) === 3)
          switch (B.defaultTargetPlatform().index) {
            case 0:
            case 1:
            case 2:
              switch (details.kind) {
                case C.PointerDeviceKind_1:
                case C.PointerDeviceKind_4:
                  return _this._selectParagraphsInRange$3$cause$from$to(D.SelectionChangedCause_6, dragStartGlobalPosition.$sub(0, editableOffset).$sub(0, t3), t4);
                case C.PointerDeviceKind_2:
                case C.PointerDeviceKind_3:
                case C.PointerDeviceKind_0:
                case C.PointerDeviceKind_5:
                case null:
                case void 0:
                  break;
              }
              return;
            case 3:
              return _this._selectLinesInRange$3$cause$from$to(D.SelectionChangedCause_6, dragStartGlobalPosition.$sub(0, editableOffset).$sub(0, t3), t4);
            case 5:
            case 4:
              return _this._selectParagraphsInRange$3$cause$from$to(D.SelectionChangedCause_6, dragStartGlobalPosition.$sub(0, editableOffset).$sub(0, t3), t4);
          }
        switch (B.defaultTargetPlatform().index) {
          case 2:
            switch (details.kind) {
              case C.PointerDeviceKind_1:
              case C.PointerDeviceKind_4:
                t1 = t2.get$currentState();
                t1.toString;
                return t1.get$renderEditable().selectPositionAt$3$cause$from$to(D.SelectionChangedCause_6, dragStartGlobalPosition.$sub(0, editableOffset).$sub(0, t3), t4);
              case C.PointerDeviceKind_2:
              case C.PointerDeviceKind_3:
              case C.PointerDeviceKind_0:
              case C.PointerDeviceKind_5:
              case null:
              case void 0:
                break;
            }
            return;
          case 0:
          case 1:
            switch (details.kind) {
              case C.PointerDeviceKind_1:
              case C.PointerDeviceKind_4:
              case C.PointerDeviceKind_2:
              case C.PointerDeviceKind_3:
                t1 = t2.get$currentState();
                t1.toString;
                return t1.get$renderEditable().selectPositionAt$3$cause$from$to(D.SelectionChangedCause_6, dragStartGlobalPosition.$sub(0, editableOffset).$sub(0, t3), t4);
              case C.PointerDeviceKind_0:
              case C.PointerDeviceKind_5:
                t1 = t2.get$currentState();
                t1.toString;
                if (t1.get$renderEditable()._editable$_hasFocus) {
                  t1 = t2.get$currentState();
                  t1.toString;
                  t1.get$renderEditable().selectPositionAt$2$cause$from(D.SelectionChangedCause_6, t4);
                  return _this._showMagnifierIfSupportedByPlatform$1(t4);
                }
                break;
              case null:
              case void 0:
                break;
            }
            return;
          case 4:
          case 3:
          case 5:
            t1 = t2.get$currentState();
            t1.toString;
            return t1.get$renderEditable().selectPositionAt$3$cause$from$to(D.SelectionChangedCause_6, dragStartGlobalPosition.$sub(0, editableOffset).$sub(0, t3), t4);
        }
      }
      t2 = _this._dragStartSelection;
      if (t2.start !== t2.end)
        t2 = B.defaultTargetPlatform() !== C.TargetPlatform_2 && B.defaultTargetPlatform() !== C.TargetPlatform_4;
      else
        t2 = true;
      if (t2)
        return _this._extendSelection$2(details.globalPosition, D.SelectionChangedCause_6);
      t1 = t1.editableTextKey;
      t2 = t1.get$currentState();
      t2.toString;
      selection = t2._widget.controller._change_notifier$_value.selection;
      t2 = t1.get$currentState();
      t2.toString;
      t3 = details.globalPosition;
      nextExtent = t2.get$renderEditable().getPositionForPoint$1(t3);
      t2 = _this._dragStartSelection;
      t4 = t2.baseOffset;
      t5 = nextExtent.offset;
      isInverted = t4 < t2.extentOffset ? t5 < t4 : t5 > t4;
      if (isInverted && selection.baseOffset === t4) {
        t2 = t1.get$currentState();
        t2.toString;
        t1 = t1.get$currentState();
        t1.toString;
        t2.userUpdateTextEditingValue$2(t1._widget.controller._change_notifier$_value.copyWith$1$selection(B.TextSelection$(C.TextAffinity_1, _this._dragStartSelection.extentOffset, t5, false)), D.SelectionChangedCause_6);
      } else if (!isInverted && t5 !== t4 && selection.baseOffset !== t4) {
        t2 = t1.get$currentState();
        t2.toString;
        t1 = t1.get$currentState();
        t1.toString;
        t2.userUpdateTextEditingValue$2(t1._widget.controller._change_notifier$_value.copyWith$1$selection(B.TextSelection$(C.TextAffinity_1, _this._dragStartSelection.baseOffset, t5, false)), D.SelectionChangedCause_6);
      } else
        _this._extendSelection$2(t3, D.SelectionChangedCause_6);
    },
    onDragSelectionEnd$1(details) {
      var t1, _this = this;
      if (_this._shouldShowSelectionToolbar && A._TextSelectionGestureDetectorState__getEffectiveConsecutiveTapCount(details.consecutiveTapCount) === 2) {
        t1 = _this.delegate.editableTextKey.get$currentState();
        t1.toString;
        t1.showToolbar$0();
      }
      if (_this._isShiftPressed)
        _this._dragStartSelection = null;
      _this._hideMagnifierIfSupportedByPlatform$0();
    }
  };
  A.TextSelectionGestureDetector.prototype = {
    createState$0() {
      return new A._TextSelectionGestureDetectorState();
    }
  };
  A._TextSelectionGestureDetectorState.prototype = {
    _handleTapTrackStart$0() {
      this._widget.onTapTrackStart.call$0();
    },
    _handleTapTrackReset$0() {
      this._widget.onTapTrackReset.call$0();
    },
    _text_selection$_handleTapDown$1(details) {
      var t1;
      this._widget.onTapDown.call$1(details);
      t1 = details.consecutiveTapCount;
      if (A._TextSelectionGestureDetectorState__getEffectiveConsecutiveTapCount(t1) === 2) {
        t1 = this._widget.onDoubleTapDown.call$1(details);
        return t1;
      }
      if (A._TextSelectionGestureDetectorState__getEffectiveConsecutiveTapCount(t1) === 3) {
        t1 = this._widget.onTripleTapDown.call$1(details);
        return t1;
      }
    },
    _text_selection$_handleTapUp$1(details) {
      if (A._TextSelectionGestureDetectorState__getEffectiveConsecutiveTapCount(details.consecutiveTapCount) === 1) {
        this._widget.onSingleTapUp.call$1(details);
        this._widget.onUserTap.call$0();
      } else
        this._widget.toString;
    },
    _text_selection$_handleTapCancel$0() {
      this._widget.onSingleTapCancel.call$0();
    },
    _text_selection$_handleDragStart$1(details) {
      this._widget.onDragSelectionStart.call$1(details);
    },
    _text_selection$_handleDragUpdate$1(details) {
      this._widget.onDragSelectionUpdate.call$1(details);
    },
    _text_selection$_handleDragEnd$1(details) {
      this._widget.onDragSelectionEnd.call$1(details);
    },
    _forcePressStarted$1(details) {
      var t1 = this._widget.onForcePressStart;
      if (t1 != null)
        t1.call$1(details);
    },
    _forcePressEnded$1(details) {
      var t1 = this._widget.onForcePressEnd;
      if (t1 != null)
        t1.call$1(details);
    },
    _handleLongPressStart$1(details) {
      this._widget.onSingleLongTapStart.call$1(details);
    },
    _handleLongPressMoveUpdate$1(details) {
      this._widget.onSingleLongTapMoveUpdate.call$1(details);
    },
    _handleLongPressEnd$1(details) {
      this._widget.onSingleLongTapEnd.call$1(details);
    },
    build$1(context) {
      var t1, t2, _this = this,
        gestures = B.LinkedHashMap_LinkedHashMap$_empty(type$.Type, type$.GestureRecognizerFactory_GestureRecognizer);
      gestures.$indexSet(0, C.Type_TapGestureRecognizer_mu4, new B.GestureRecognizerFactoryWithHandlers(new A._TextSelectionGestureDetectorState_build_closure(_this), new A._TextSelectionGestureDetectorState_build_closure0(_this), type$.GestureRecognizerFactoryWithHandlers_TapGestureRecognizer));
      _this._widget.toString;
      gestures.$indexSet(0, C.Type_LongPressGestureRecognizer_rMW, new B.GestureRecognizerFactoryWithHandlers(new A._TextSelectionGestureDetectorState_build_closure1(_this), new A._TextSelectionGestureDetectorState_build_closure2(_this), type$.GestureRecognizerFactoryWithHandlers_LongPressGestureRecognizer));
      _this._widget.toString;
      switch (B.defaultTargetPlatform().index) {
        case 0:
        case 1:
        case 2:
          gestures.$indexSet(0, D.Type_w8t, new B.GestureRecognizerFactoryWithHandlers(new A._TextSelectionGestureDetectorState_build_closure3(_this), new A._TextSelectionGestureDetectorState_build_closure4(_this), type$.GestureRecognizerFactoryWithHandlers_TapAndHorizontalDragGestureRecognizer));
          break;
        case 3:
        case 4:
        case 5:
          gestures.$indexSet(0, D.Type_TapAndPanGestureRecognizer_N1Y, new B.GestureRecognizerFactoryWithHandlers(new A._TextSelectionGestureDetectorState_build_closure5(_this), new A._TextSelectionGestureDetectorState_build_closure6(_this), type$.GestureRecognizerFactoryWithHandlers_TapAndPanGestureRecognizer));
          break;
      }
      t1 = _this._widget;
      if (t1.onForcePressStart != null || t1.onForcePressEnd != null)
        gestures.$indexSet(0, C.Type_ForcePressGestureRecognizer_C7M, new B.GestureRecognizerFactoryWithHandlers(new A._TextSelectionGestureDetectorState_build_closure7(_this), new A._TextSelectionGestureDetectorState_build_closure8(_this), type$.GestureRecognizerFactoryWithHandlers_ForcePressGestureRecognizer));
      t1 = _this._widget;
      t2 = t1.behavior;
      return new B.RawGestureDetector(t1.child, gestures, t2, true, null);
    }
  };
  A.ClipboardStatusNotifier.prototype = {
    addListener$1(listener) {
      var _this = this;
      if (_this.ChangeNotifier__count <= 0)
        $.WidgetsBinding__instance.WidgetsBinding__observers.push(_this);
      if (_this.value === D.ClipboardStatus_1)
        B.Future_Future$value(null, type$.void);
      _this.super$ChangeNotifier$addListener(listener);
    },
    removeListener$1(listener) {
      var _this = this;
      _this.super$ChangeNotifier$removeListener(listener);
      if (!_this._text_selection$_disposed && _this.ChangeNotifier__count <= 0)
        $.WidgetsBinding__instance.removeObserver$1(_this);
    },
    didChangeAppLifecycleState$1(state) {
      switch (state.index) {
        case 1:
          B.Future_Future$value(null, type$.void);
          break;
        case 0:
        case 2:
        case 3:
        case 4:
          break;
      }
    },
    dispose$0() {
      $.WidgetsBinding__instance.removeObserver$1(this);
      this._text_selection$_disposed = true;
      this.super$ChangeNotifier$dispose();
    }
  };
  A.ClipboardStatus.prototype = {
    _enumToString$0() {
      return "ClipboardStatus." + this._name;
    }
  };
  A.TextSelectionHandleControls.prototype = {
    handlePaste$1(delegate) {
      return this.handlePaste$body$TextSelectionHandleControls(delegate);
    },
    handlePaste$body$TextSelectionHandleControls(delegate) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void);
      var $async$handlePaste$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$handlePaste$1, $async$completer);
    }
  };
  A._ClipboardStatusNotifier_ValueNotifier_WidgetsBindingObserver.prototype = {};
  A.__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0() {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTicker());
      _this.SingleTickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  A.__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0() {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTicker());
      _this.SingleTickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  A.TextSelectionToolbarAnchors.prototype = {};
  A.TextSelectionToolbarLayoutDelegate.prototype = {
    getConstraintsForChild$1(constraints) {
      return new B.BoxConstraints(0, constraints.maxWidth, 0, constraints.maxHeight);
    },
    getPositionForChild$2(size, childSize) {
      var anchor, t1, t2, _this = this,
        fitsAbove = _this.fitsAbove;
      if (fitsAbove == null)
        fitsAbove = _this.anchorAbove._dy >= childSize._dy;
      anchor = fitsAbove ? _this.anchorAbove : _this.anchorBelow;
      t1 = A.TextSelectionToolbarLayoutDelegate_centerOn(anchor._dx, childSize._dx, size._dx);
      t2 = anchor._dy;
      return new B.Offset(t1, fitsAbove ? Math.max(0, t2 - childSize._dy) : t2);
    },
    shouldRelayout$1(oldDelegate) {
      return !this.anchorAbove.$eq(0, oldDelegate.anchorAbove) || !this.anchorBelow.$eq(0, oldDelegate.anchorBelow) || this.fitsAbove != oldDelegate.fitsAbove;
    }
  };
  A.UndoHistory.prototype = {
    createState$0() {
      var t1 = this.$ti;
      return new A.UndoHistoryState(new A._UndoStack(B._setArrayType([], t1._eval$1("JSArray<1>")), t1._eval$1("_UndoStack<1>")), t1._eval$1("UndoHistoryState<1>"));
    }
  };
  A.UndoHistoryState.prototype = {
    get$_throttledPush() {
      var t1 = this.__UndoHistoryState__throttledPush_F;
      t1 === $ && B.throwUnnamedLateFieldNI();
      return t1;
    },
    get$_undo_history$_effectiveController() {
      var t1 = this._widget.controller,
        t2 = this._undo_history$_controller;
      if (t2 == null) {
        t1 = $.$get$ChangeNotifier__emptyListeners();
        t1 = new A.UndoHistoryController(new B.ChangeNotifier(t1), new B.ChangeNotifier(t1), D.UndoHistoryValue_false_false, t1);
        this._undo_history$_controller = t1;
      } else
        t1 = t2;
      return t1;
    },
    undo$0() {
      var t2, t3, t4, _this = this,
        t1 = _this._undo_history$_stack;
      if (t1.get$currentValue() == null)
        return;
      t2 = _this._throttleTimer;
      t3 = t2 == null;
      t4 = t3 ? null : t2._handle != null;
      if (t4 === true) {
        if (!t3)
          t2.cancel$0();
        _this._update$1(t1.get$currentValue());
      } else
        _this._update$1(t1.undo$0());
      _this._updateState$0();
    },
    redo$0() {
      this._update$1(this._undo_history$_stack.redo$0());
      this._updateState$0();
    },
    _updateState$0() {
      var t1 = this.get$_undo_history$_effectiveController(),
        t2 = this._undo_history$_stack,
        t3 = t2._undo_history$_list,
        t4 = t3.length !== 0 && t2._undo_history$_index > 0;
      t1.set$value(new A.UndoHistoryValue(t4, t2.get$canRedo()));
      if (B.defaultTargetPlatform() !== C.TargetPlatform_2)
        return;
      t1 = $.$get$UndoManager__instance();
      if (t1._currentClient === this) {
        t3 = t3.length !== 0 && t2._undo_history$_index > 0;
        t2 = t2.get$canRedo();
        t1 = t1.__UndoManager__channel_A;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t1.invokeMethod$1$2("UndoManager.setUndoState", B.LinkedHashMap_LinkedHashMap$_literal(["canUndo", t3, "canRedo", t2], type$.String, type$.bool), type$.void);
      }
    },
    _undoFromIntent$1(intent) {
      this.undo$0();
    },
    _redoFromIntent$1(intent) {
      this.redo$0();
    },
    _update$1(nextValue) {
      var _this = this;
      if (nextValue == null)
        return;
      if (J.$eq$(nextValue, _this._undo_history$_lastValue))
        return;
      _this._undo_history$_lastValue = nextValue;
      _this._duringTrigger = true;
      try {
        _this._widget.onTriggered.call$1(nextValue);
      } finally {
        _this._duringTrigger = false;
      }
    },
    _push$0() {
      var t1, nextValue, _this = this;
      if (J.$eq$(_this._widget.value._change_notifier$_value, _this._undo_history$_lastValue))
        return;
      if (_this._duringTrigger)
        return;
      t1 = _this._widget;
      t1 = t1.shouldChangeUndoStack.call$2(_this._undo_history$_lastValue, t1.value._change_notifier$_value);
      if (!(t1 == null ? true : t1))
        return;
      t1 = _this._widget;
      nextValue = t1.undoStackModifier.call$1(t1.value._change_notifier$_value);
      if (nextValue == null)
        nextValue = _this._widget.value._change_notifier$_value;
      if (J.$eq$(nextValue, _this._undo_history$_lastValue))
        return;
      _this._undo_history$_lastValue = nextValue;
      _this._throttleTimer = _this._throttledPush$1(nextValue);
    },
    _handleFocus$0() {
      var t1, _this = this;
      if (!_this._widget.focusNode.get$hasFocus()) {
        t1 = $.$get$UndoManager__instance();
        if (t1._currentClient === _this)
          t1._currentClient = null;
        return;
      }
      $.$get$UndoManager__instance()._currentClient = _this;
      _this._updateState$0();
    },
    handlePlatformUndo$1(direction) {
      switch (direction.index) {
        case 0:
          this.undo$0();
          break;
        case 1:
          this.redo$0();
          break;
      }
    },
    initState$0() {
      var t1, _this = this;
      _this.super$State$initState();
      t1 = A._throttle(C.Duration_500000, new A.UndoHistoryState_initState_closure(_this), _this.$ti._precomputed1);
      _this.__UndoHistoryState__throttledPush_F !== $ && B.throwUnnamedLateFieldAI();
      _this.__UndoHistoryState__throttledPush_F = t1;
      _this._push$0();
      _this._widget.value.addListener$1(_this.get$_push());
      _this._handleFocus$0();
      _this._widget.focusNode.addListener$1(_this.get$_handleFocus());
      _this.get$_undo_history$_effectiveController().onUndo.addListener$1(_this.get$undo());
      _this.get$_undo_history$_effectiveController().onRedo.addListener$1(_this.get$redo());
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.value;
      if (_this._widget.value !== t1) {
        t2 = _this._undo_history$_stack;
        C.JSArray_methods.clear$0(t2._undo_history$_list);
        t2._undo_history$_index = -1;
        t2 = _this.get$_push();
        t1.removeListener$1(t2);
        _this._widget.value.addListener$1(t2);
      }
      t1 = oldWidget.focusNode;
      if (_this._widget.focusNode !== t1) {
        t2 = _this.get$_handleFocus();
        t1.removeListener$1(t2);
        _this._widget.focusNode.addListener$1(t2);
      }
      _this._widget.toString;
    },
    dispose$0() {
      var _this = this,
        t1 = $.$get$UndoManager__instance();
      if (t1._currentClient === _this)
        t1._currentClient = null;
      _this._widget.value.removeListener$1(_this.get$_push());
      _this._widget.focusNode.removeListener$1(_this.get$_handleFocus());
      _this.get$_undo_history$_effectiveController().onUndo.removeListener$1(_this.get$undo());
      _this.get$_undo_history$_effectiveController().onRedo.removeListener$1(_this.get$redo());
      t1 = _this._undo_history$_controller;
      if (t1 != null)
        t1.dispose$0();
      t1 = _this._throttleTimer;
      if (t1 != null)
        t1.cancel$0();
      _this.super$State$dispose();
    },
    build$1(context) {
      var t1 = type$.JSArray_of_void_Function_Action_Intent,
        t2 = type$.ObserverList_of_void_Function_Action_Intent;
      return B.Actions$(B.LinkedHashMap_LinkedHashMap$_literal([D.Type_UndoTextIntent_jvf, new B.CallbackAction(this.get$_undoFromIntent(), new B.ObserverList(B._setArrayType([], t1), t2), type$.CallbackAction_UndoTextIntent)._makeOverridableAction$1(context), D.Type_RedoTextIntent_jvf, new B.CallbackAction(this.get$_redoFromIntent(), new B.ObserverList(B._setArrayType([], t1), t2), type$.CallbackAction_RedoTextIntent)._makeOverridableAction$1(context)], type$.Type, type$.Action_Intent), this._widget.child);
    },
    _throttledPush$1(arg0) {
      return this.get$_throttledPush().call$1(arg0);
    }
  };
  A.UndoHistoryValue.prototype = {
    toString$0(_) {
      return "UndoHistoryValue(canUndo: " + this.canUndo + ", canRedo: " + this.canRedo + ")";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A.UndoHistoryValue && other.canUndo === this.canUndo && other.canRedo === this.canRedo;
    },
    get$hashCode(_) {
      var t1 = this.canUndo ? 519018 : 218159;
      return B.Object_hash(t1, this.canRedo ? 519018 : 218159, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A.UndoHistoryController.prototype = {
    dispose$0() {
      var t1 = this.onUndo,
        t2 = $.$get$ChangeNotifier__emptyListeners();
      t1.ChangeNotifier__listeners = t2;
      t1.ChangeNotifier__count = 0;
      t1 = this.onRedo;
      t1.ChangeNotifier__listeners = t2;
      t1.ChangeNotifier__count = 0;
      this.super$ChangeNotifier$dispose();
    }
  };
  A._UndoStack.prototype = {
    get$currentValue() {
      var t1 = this._undo_history$_list;
      return t1.length === 0 ? null : t1[this._undo_history$_index];
    },
    get$canRedo() {
      var t1 = this._undo_history$_list.length;
      return t1 !== 0 && this._undo_history$_index < t1 - 1;
    },
    push$1(value) {
      var t2, t3, _this = this,
        t1 = _this._undo_history$_list;
      if (t1.length === 0) {
        _this._undo_history$_index = 0;
        t1.push(value);
        return;
      }
      if (J.$eq$(value, _this.get$currentValue()))
        return;
      t2 = _this._undo_history$_index;
      t3 = t1.length;
      if (t2 !== t3 - 1)
        C.JSArray_methods.removeRange$2(t1, t2 + 1, t3);
      t1.push(value);
      _this._undo_history$_index = t1.length - 1;
    },
    undo$0() {
      var t1, _this = this;
      if (_this._undo_history$_list.length === 0)
        return null;
      t1 = _this._undo_history$_index;
      if (t1 !== 0)
        _this._undo_history$_index = t1 - 1;
      return _this.get$currentValue();
    },
    redo$0() {
      var t2, _this = this,
        t1 = _this._undo_history$_list.length;
      if (t1 === 0)
        return null;
      t2 = _this._undo_history$_index;
      if (t2 < t1 - 1)
        _this._undo_history$_index = t2 + 1;
      return _this.get$currentValue();
    },
    toString$0(_) {
      return "_UndoStack " + B.S(this._undo_history$_list);
    }
  };
  A._UndoHistoryState_State_UndoManagerClient.prototype = {};
  A.WidgetSpan.prototype = {
    build$3$dimensions$textScaler(builder, dimensions, textScaler) {
      var currentDimensions,
        t1 = this.style,
        hasStyle = t1 != null;
      if (hasStyle)
        builder.pushStyle$1(t1.getTextStyle$1$textScaler(textScaler));
      dimensions.toString;
      currentDimensions = dimensions[builder.get$placeholderCount()];
      t1 = currentDimensions.size;
      builder.addPlaceholder$5$baseline$baselineOffset(t1._dx, t1._dy, this.alignment, currentDimensions.baseline, currentDimensions.baselineOffset);
      if (hasStyle)
        builder.pop$0();
    },
    visitChildren$1(visitor) {
      return visitor.call$1(this);
    },
    visitDirectChildren$1(visitor) {
      return true;
    },
    getSpanForPositionVisitor$2(position, offset) {
      var t1 = offset._inline_span$_value;
      if (position.offset === t1)
        return this;
      offset._inline_span$_value = t1 + 1;
      return null;
    },
    codeUnitAtVisitor$2(index, offset) {
      var t1 = offset._inline_span$_value;
      offset._inline_span$_value = t1 + 1;
      return index - t1 === 0 ? 65532 : null;
    },
    compareTo$1(_, other) {
      var t1, t2, t3, candidate, result, _this = this;
      if (_this === other)
        return C.RenderComparison_0;
      if (B.getRuntimeTypeOfDartObject(other) !== B.getRuntimeTypeOfDartObject(_this))
        return C.RenderComparison_3;
      t1 = _this.style;
      t2 = t1 == null;
      t3 = other.style;
      if (t2 !== (t3 == null))
        return C.RenderComparison_3;
      type$.WidgetSpan._as(other);
      if (!_this.child.super$Object$$eq(0, other.child) || _this.alignment !== other.alignment)
        return C.RenderComparison_3;
      if (!t2) {
        t3.toString;
        candidate = t1.compareTo$1(0, t3);
        result = candidate.index > 0 ? candidate : C.RenderComparison_0;
        if (result === C.RenderComparison_3)
          return result;
      } else
        result = C.RenderComparison_0;
      return result;
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeTypeOfDartObject(_this))
        return false;
      if (!_this.super$InlineSpan$$eq(0, other))
        return false;
      t1 = false;
      if (other instanceof A._ScribblePlaceholder)
        if (other.child.super$Object$$eq(0, _this.child))
          t1 = other.alignment === _this.alignment;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return B.Object_hash(B.InlineSpan.prototype.get$hashCode.call(_this, 0), _this.child, _this.alignment, _this.baseline, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A.WidgetStateBorderSide.prototype = {$isWidgetStateProperty: 1};
  A._WidgetStateBorderSide.prototype = {
    resolve$1(states) {
      return this._resolve.call$1(states);
    }
  };
  A.WidgetStateTextStyle.prototype = {$isWidgetStateProperty: 1};
  A._WidgetStateTextStyle.prototype = {
    resolve$1(states) {
      return this._resolve.call$1(states);
    }
  };
  var typesOffset = hunkHelpers.updateTypes(["~()", "double(double)", "~(bool)", "TextBoundary()", "~(DragEndDetails)", "~(TapDownDetails)", "~(DragStartDetails)", "~(DragUpdateDetails)", "~(TapDragDownDetails)", "~(ForcePressDetails)", "bool(FocusableActionDetector)", "double(RenderBox,BoxConstraints)", "~(TapUpDetails)", "~(PointerEnterEvent)", "~(PointerExitEvent)", "~(AnimationStatus)", "~(PointerEvent)", "~(PaintingContext,Offset)", "~(String)", "TextPosition(TextPosition,bool,TextBoundary)", "~(TapDragUpDetails)", "~(LongPressStartDetails)", "~(LongPressMoveUpdateDetails)", "~(LongPressEndDetails)", "~(TapDragStartDetails)", "~(TapDragUpdateDetails)", "~(TapDragEndDetails)", "Future<@>(MethodCall)", "ChildSemanticsConfigurationsResult(List<SemanticsConfiguration>)", "~(TransposeCharactersIntent)", "~(ReplaceTextIntent)", "~(ScrollToDocumentBoundaryIntent)", "~(ScrollIntent)", "~(ExtendSelectionByPageIntent)", "~(UpdateSelectionIntent)", "Object?(DismissIntent)", "TextEditingValue(TextEditingValue,TextInputFormatter)", "TextFieldTapRegion(BuildContext)", "CompositedTransformTarget(BuildContext,ViewportOffset)", "StatefulWidget?(BuildContext,MagnifierController,ValueNotifier<MagnifierInfo>)", "~(TextSelection,SelectionChangedCause?)", "MouseCursor0(Set<WidgetState>)", "_SelectionToolbarWrapper(BuildContext)", "InputDecorator(BuildContext,Widget?)", "DesktopTextSelectionToolbarButton(ContextMenuButtonItem)", "~(TextSelection)", "CupertinoDesktopTextSelectionToolbarButton(ContextMenuButtonItem)", "~(FocusHighlightMode)", "~([Intent?])", "~(ScrollNotification)", "~(Layer0)", "~([Duration?])", "TapAndHorizontalDragGestureRecognizer()", "~(TapAndHorizontalDragGestureRecognizer)", "TapAndPanGestureRecognizer()", "~(TapAndPanGestureRecognizer)", "~(UndoTextIntent)", "~(RedoTextIntent)", "Widget(BuildContext,Offset,Offset,Widget)", "CupertinoTextSelectionToolbarButton(ContextMenuButtonItem)", "Widget(BuildContext,EditableTextState)", "Widget(BuildContext,Widget)", "Widget?(BuildContext,MagnifierController,ValueNotifier<MagnifierInfo>)", "Widget(BuildContext)"]);
  A._CupertinoButtonState__animate_closure.prototype = {
    call$1(value) {
      var t1 = this.$this;
      if (t1._framework$_element != null && this.wasHeldDown !== t1._buttonHeldDown)
        t1._animate$0();
    },
    $signature: 23
  };
  A._CupertinoButtonState__onShowFocusHighlight_closure.prototype = {
    call$0() {
      this.$this.___CupertinoButtonState_isFocused_A = this.showHighlight;
    },
    $signature: 0
  };
  A._CupertinoDesktopTextSelectionToolbarButtonState__onEnter_closure.prototype = {
    call$0() {
      this.$this._isHovered = true;
    },
    $signature: 0
  };
  A._CupertinoDesktopTextSelectionToolbarButtonState__onExit_closure.prototype = {
    call$0() {
      this.$this._isHovered = false;
    },
    $signature: 0
  };
  A._CupertinoTextMagnifierState_initState_closure.prototype = {
    call$0() {
      return this.$this.setState$1(new A._CupertinoTextMagnifierState_initState__closure());
    },
    $signature: 0
  };
  A._CupertinoTextMagnifierState_initState__closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._CupertinoTextMagnifierState__determineMagnifierPositionAndFocalPoint_closure.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this;
      t1._currentAdjustedMagnifierPosition = _this.adjustedMagnifierPosition;
      t1._verticalFocalPointAdjustment = _this.verticalCenterOfCurrentLine - _this.verticalPositionOfLens;
    },
    $signature: 0
  };
  A._RenderCupertinoTextSelectionToolbarShape_paint_closure.prototype = {
    call$2(innerContext, innerOffset) {
      return innerContext.paintChild$2(this.child, innerOffset);
    },
    $signature: 18
  };
  A._CupertinoTextSelectionToolbarContentState__statusListener_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._nextPage;
      t2.toString;
      t1._text_selection_toolbar0$_page = t2;
      t1._nextPage = null;
    },
    $signature: 0
  };
  A._CupertinoTextSelectionToolbarContentState_build_closure.prototype = {
    call$1(child) {
      return B.Center$(child, 1, 1);
    },
    $signature: 555
  };
  A._CupertinoTextSelectionToolbarItemsElement_mount_closure.prototype = {
    call$1(i) {
      var t1 = this._box_0;
      return t1.previousChild = this.$this.inflateWidget$2(this.toolbarItems.children[i], new B.IndexedSlot(t1.previousChild, i, type$.IndexedSlot_nullable_Element));
    },
    $signature: 556
  };
  A._RenderCupertinoTextSelectionToolbarItems_performLayout_closure.prototype = {
    call$1(renderObjectChild) {
      var t1, childHeight;
      type$.RenderBox._as(renderObjectChild);
      t1 = this.$this;
      childHeight = renderObjectChild._computeIntrinsics$3(C._IntrinsicDimension_3, type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(t1)).maxWidth, renderObjectChild.get$computeMaxIntrinsicHeight());
      t1 = this._box_0;
      if (childHeight > t1.greatestHeight)
        t1.greatestHeight = childHeight;
    },
    $signature: 11
  };
  A._RenderCupertinoTextSelectionToolbarItems_performLayout_closure0.prototype = {
    call$1(renderObjectChild) {
      var t3, t4, paginationButtonsWidth, t5, t6, t7, currentButtonPosition, _this = this,
        t1 = _this._box_0,
        t2 = ++t1.i;
      type$.RenderBox._as(renderObjectChild);
      t3 = renderObjectChild.parentData;
      t3.toString;
      type$.ToolbarItemsParentData._as(t3);
      t3.shouldPaint = false;
      t4 = _this.$this;
      if (renderObjectChild === t4._backButton || renderObjectChild === t4._nextButton || t1.currentPage > t4._text_selection_toolbar0$_page)
        return;
      if (t1.currentPage === 0)
        paginationButtonsWidth = t2 === t4.ContainerRenderObjectMixin__childCount + 1 ? 0 : t4._nextButton.get$size()._dx;
      else
        paginationButtonsWidth = _this.subsequentPageButtonsWidth;
      t2 = type$.BoxConstraints;
      t5 = t2._as(B.RenderObject.prototype.get$constraints.call(t4));
      t6 = t1.greatestHeight;
      renderObjectChild.layout$2$parentUsesSize(new B.BoxConstraints(0, t5.maxWidth - paginationButtonsWidth, t6, t6), true);
      if (t1.currentButtonPosition + paginationButtonsWidth + renderObjectChild.get$size()._dx > t2._as(B.RenderObject.prototype.get$constraints.call(t4)).maxWidth) {
        ++t1.currentPage;
        t1.currentButtonPosition = t4._backButton.get$size()._dx + t4._dividerWidth;
        t5 = t4._backButton.get$size();
        t6 = t4._nextButton.get$size();
        t2 = t2._as(B.RenderObject.prototype.get$constraints.call(t4));
        t7 = t1.greatestHeight;
        renderObjectChild.layout$2$parentUsesSize(new B.BoxConstraints(0, t2.maxWidth - (t5._dx + t6._dx), t7, t7), true);
      }
      t2 = t1.currentButtonPosition;
      t3.offset = new B.Offset(t2, 0);
      currentButtonPosition = t2 + (renderObjectChild.get$size()._dx + t4._dividerWidth);
      t1.currentButtonPosition = currentButtonPosition;
      t4 = t1.currentPage === t4._text_selection_toolbar0$_page;
      t3.shouldPaint = t4;
      if (t4)
        _this.toolbarWidth._value = currentButtonPosition;
    },
    $signature: 11
  };
  A._RenderCupertinoTextSelectionToolbarItems_paint_closure.prototype = {
    call$1(renderObjectChild) {
      var t1, childOffset, t2, t3, t4, _this = this;
      type$.RenderBox._as(renderObjectChild);
      t1 = renderObjectChild.parentData;
      t1.toString;
      type$.ToolbarItemsParentData._as(t1);
      if (t1.shouldPaint) {
        childOffset = t1.offset.$add(0, _this.offset);
        t2 = _this.context;
        t2.paintChild$2(renderObjectChild, childOffset);
        if (t1.ContainerParentDataMixin_nextSibling != null || renderObjectChild === _this.$this._backButton) {
          t1 = t2.get$canvas();
          t2 = new B.Offset(renderObjectChild.get$size()._dx, 0).$add(0, childOffset);
          t3 = new B.Offset(renderObjectChild.get$size()._dx, renderObjectChild.get$size()._dy).$add(0, childOffset);
          t4 = $.$get$_renderer().createPaint$0();
          t4.set$color(_this.$this._dividerColor);
          t1.drawLine$3(t2, t3, t4);
        }
      }
    },
    $signature: 11
  };
  A._RenderCupertinoTextSelectionToolbarItems_hitTestChild_closure.prototype = {
    call$2(result, transformed) {
      return this.child.hitTest$2$position(result, transformed);
    },
    $signature: 16
  };
  A._RenderCupertinoTextSelectionToolbarItems_redepthChildren_closure.prototype = {
    call$1(renderObjectChild) {
      this.$this.redepthChild$1(type$.RenderBox._as(renderObjectChild));
    },
    $signature: 11
  };
  A._RenderCupertinoTextSelectionToolbarItems_visitChildrenForSemantics_closure.prototype = {
    call$1(renderObjectChild) {
      var t1;
      type$.RenderBox._as(renderObjectChild);
      t1 = renderObjectChild.parentData;
      t1.toString;
      if (type$.ToolbarItemsParentData._as(t1).shouldPaint)
        this.visitor.call$1(renderObjectChild);
    },
    $signature: 11
  };
  A._RenderCupertinoTextSelectionToolbarItems_debugDescribeChildren_closure.prototype = {
    call$1(renderObjectChild) {
      var t1, t2;
      type$.RenderBox._as(renderObjectChild);
      t1 = this.$this;
      if (renderObjectChild === t1._backButton)
        this.value.push(B.DiagnosticableTreeNode$("back button", null, renderObjectChild));
      else {
        t2 = this.value;
        if (renderObjectChild === t1._nextButton)
          t2.push(B.DiagnosticableTreeNode$("next button", null, renderObjectChild));
        else
          t2.push(B.DiagnosticableTreeNode$("menu item", null, renderObjectChild));
      }
    },
    $signature: 11
  };
  A._CupertinoTextSelectionToolbarButtonState__onTapDown_closure.prototype = {
    call$0() {
      return this.$this.isPressed = true;
    },
    $signature: 0
  };
  A._CupertinoTextSelectionToolbarButtonState__onTapUp_closure.prototype = {
    call$0() {
      return this.$this.isPressed = false;
    },
    $signature: 0
  };
  A._CupertinoTextSelectionToolbarButtonState__onTapCancel_closure.prototype = {
    call$0() {
      return this.$this.isPressed = false;
    },
    $signature: 0
  };
  A.BaseTapAndDragGestureRecognizer__handleDragUpdateThrottled_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.onDragUpdate;
      t2.toString;
      t1 = t1._lastDragUpdateDetails;
      t1.toString;
      return t2.call$1(t1);
    },
    $signature: 0
  };
  A.BaseTapAndDragGestureRecognizer_addAllowedPointer_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._TapStatusTrackerMixin__down;
      if (t2 != null) {
        t1._checkTapDown$1(t2);
        if (t1._TapStatusTrackerMixin__consecutiveTapCount > 1)
          t1.resolve$1(C.GestureDisposition_0);
      }
      return null;
    },
    $signature: 0
  };
  A.BaseTapAndDragGestureRecognizer__checkTapDown_closure.prototype = {
    call$0() {
      return this.$this.onTapDown.call$1(this.details);
    },
    $signature: 0
  };
  A.BaseTapAndDragGestureRecognizer__checkTapUp_closure.prototype = {
    call$0() {
      return this.$this.onTapUp.call$1(this.upDetails);
    },
    $signature: 0
  };
  A.BaseTapAndDragGestureRecognizer__checkDragStart_closure.prototype = {
    call$0() {
      return this.$this.onDragStart.call$1(this.details);
    },
    $signature: 0
  };
  A.BaseTapAndDragGestureRecognizer__checkDragUpdate_closure.prototype = {
    call$0() {
      return this.$this.onDragUpdate.call$1(this.details);
    },
    $signature: 0
  };
  A.BaseTapAndDragGestureRecognizer__checkDragEnd_closure.prototype = {
    call$0() {
      return this.$this.onDragEnd.call$1(this.endDetails);
    },
    $signature: 0
  };
  A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure.prototype = {
    call$1(buttonItem) {
      return A.CupertinoTextSelectionToolbarButton$buttonItem(buttonItem);
    },
    $signature: typesOffset + 59
  };
  A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure0.prototype = {
    call$1(buttonItem) {
      var t1 = this.context;
      return A.DesktopTextSelectionToolbarButton$text(t1, buttonItem.onPressed, A.AdaptiveTextSelectionToolbar_getButtonLabel(t1, buttonItem));
    },
    $signature: typesOffset + 44
  };
  A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure1.prototype = {
    call$1(buttonItem) {
      return A.CupertinoDesktopTextSelectionToolbarButton$text(buttonItem.onPressed, A.AdaptiveTextSelectionToolbar_getButtonLabel(this.context, buttonItem));
    },
    $signature: typesOffset + 46
  };
  A._HelperErrorState__handleChange_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._RenderDecoration_performLayout_centerLayout.prototype = {
    call$2(box, x) {
      var t1 = box.parentData;
      t1.toString;
      type$.BoxParentData._as(t1).offset = new B.Offset(x, (this.height - box.get$size()._dy) / 2);
      return box.get$size()._dx;
    },
    $signature: 49
  };
  A._RenderDecoration_performLayout_baselineLayout.prototype = {
    call$2(box, x) {
      var t2,
        t1 = box.parentData;
      t1.toString;
      type$.BoxParentData._as(t1);
      t2 = box.getDistanceToBaseline$1(C.TextBaseline_0);
      t2.toString;
      t1.offset = new B.Offset(x, this.baseline - t2);
      return box.get$size()._dx;
    },
    $signature: 49
  };
  A._RenderDecoration_paint_doPaint.prototype = {
    call$1(child) {
      var t1;
      if (child != null) {
        t1 = child.parentData;
        t1.toString;
        this.context.paintChild$2(child, type$.BoxParentData._as(t1).offset.$add(0, this.offset));
      }
    },
    $signature: 557
  };
  A._RenderDecoration_hitTestChildren_closure.prototype = {
    call$2(result, transformed) {
      return this.child.hitTest$2$position(result, transformed);
    },
    $signature: 16
  };
  A._InputDecoratorState__handleChange_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._InputDecoratorState_build_closure.prototype = {
    call$1(value) {
      var t1;
      $label0$0: {
        if (value <= 0.25) {
          t1 = -value;
          break $label0$0;
        }
        if (value < 0.75) {
          t1 = value - 0.5;
          break $label0$0;
        }
        t1 = (1 - value) * 4;
        break $label0$0;
      }
      return B.Matrix4_Matrix4$translationValues(t1 * 4, 0, 0);
    },
    $signature: 109
  };
  A._InputDecoratorDefaultsM3_hintStyle_closure.prototype = {
    call$1(states) {
      var t1, t2, _null = null;
      if (states.contains$1(0, C.WidgetState_6)) {
        t1 = this.$this.get$_input_decorator$_colors().onSurface;
        return B.TextStyle$(_null, _null, B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
      }
      t1 = this.$this.get$_input_decorator$_colors();
      t2 = t1._onSurfaceVariant;
      return B.TextStyle$(_null, _null, t2 == null ? t1.onSurface : t2, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $signature: 46
  };
  A._InputDecoratorDefaultsM3_fillColor_closure.prototype = {
    call$1(states) {
      var t1, t2;
      if (states.contains$1(0, C.WidgetState_6)) {
        t1 = this.$this.get$_input_decorator$_colors().onSurface;
        return B.Color$fromARGB(10, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
      }
      t1 = this.$this.get$_input_decorator$_colors();
      t2 = t1._surfaceContainerHighest;
      return t2 == null ? t1.surface : t2;
    },
    $signature: 8
  };
  A._InputDecoratorDefaultsM3_activeIndicatorBorder_closure.prototype = {
    call$1(states) {
      var t1, t2, _this = this;
      if (states.contains$1(0, C.WidgetState_6)) {
        t1 = _this.$this.get$_input_decorator$_colors().onSurface;
        return new B.BorderSide(B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255), 1, C.BorderStyle_1, -1);
      }
      if (states.contains$1(0, D.WidgetState_7)) {
        if (states.contains$1(0, C.WidgetState_1))
          return new B.BorderSide(_this.$this.get$_input_decorator$_colors().error, 2, C.BorderStyle_1, -1);
        if (states.contains$1(0, C.WidgetState_0)) {
          t1 = _this.$this.get$_input_decorator$_colors();
          t2 = t1._onErrorContainer;
          return new B.BorderSide(t2 == null ? t1.onError : t2, 1, C.BorderStyle_1, -1);
        }
        return new B.BorderSide(_this.$this.get$_input_decorator$_colors().error, 1, C.BorderStyle_1, -1);
      }
      if (states.contains$1(0, C.WidgetState_1))
        return new B.BorderSide(_this.$this.get$_input_decorator$_colors().primary, 2, C.BorderStyle_1, -1);
      if (states.contains$1(0, C.WidgetState_0))
        return new B.BorderSide(_this.$this.get$_input_decorator$_colors().onSurface, 1, C.BorderStyle_1, -1);
      t1 = _this.$this.get$_input_decorator$_colors();
      t2 = t1._onSurfaceVariant;
      return new B.BorderSide(t2 == null ? t1.onSurface : t2, 1, C.BorderStyle_1, -1);
    },
    $signature: 198
  };
  A._InputDecoratorDefaultsM3_outlineBorder_closure.prototype = {
    call$1(states) {
      var t1, t2, _this = this;
      if (states.contains$1(0, C.WidgetState_6)) {
        t1 = _this.$this.get$_input_decorator$_colors().onSurface;
        return new B.BorderSide(B.Color$fromARGB(31, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255), 1, C.BorderStyle_1, -1);
      }
      if (states.contains$1(0, D.WidgetState_7)) {
        if (states.contains$1(0, C.WidgetState_1))
          return new B.BorderSide(_this.$this.get$_input_decorator$_colors().error, 2, C.BorderStyle_1, -1);
        if (states.contains$1(0, C.WidgetState_0)) {
          t1 = _this.$this.get$_input_decorator$_colors();
          t2 = t1._onErrorContainer;
          return new B.BorderSide(t2 == null ? t1.onError : t2, 1, C.BorderStyle_1, -1);
        }
        return new B.BorderSide(_this.$this.get$_input_decorator$_colors().error, 1, C.BorderStyle_1, -1);
      }
      if (states.contains$1(0, C.WidgetState_1))
        return new B.BorderSide(_this.$this.get$_input_decorator$_colors().primary, 2, C.BorderStyle_1, -1);
      if (states.contains$1(0, C.WidgetState_0))
        return new B.BorderSide(_this.$this.get$_input_decorator$_colors().onSurface, 1, C.BorderStyle_1, -1);
      t1 = _this.$this.get$_input_decorator$_colors();
      t2 = t1._outline;
      if (t2 == null) {
        t2 = t1._onBackground;
        t1 = t2 == null ? t1.onSurface : t2;
      } else
        t1 = t2;
      return new B.BorderSide(t1, 1, C.BorderStyle_1, -1);
    },
    $signature: 198
  };
  A._InputDecoratorDefaultsM3_prefixIconColor_closure.prototype = {
    call$1(states) {
      var t1, t2;
      if (states.contains$1(0, C.WidgetState_6)) {
        t1 = this.$this.get$_input_decorator$_colors().onSurface;
        return B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
      }
      t1 = this.$this.get$_input_decorator$_colors();
      t2 = t1._onSurfaceVariant;
      return t2 == null ? t1.onSurface : t2;
    },
    $signature: 8
  };
  A._InputDecoratorDefaultsM3_suffixIconColor_closure.prototype = {
    call$1(states) {
      var t1, t2, _this = this;
      if (states.contains$1(0, C.WidgetState_6)) {
        t1 = _this.$this.get$_input_decorator$_colors().onSurface;
        return B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
      }
      if (states.contains$1(0, D.WidgetState_7)) {
        if (states.contains$1(0, C.WidgetState_0)) {
          t1 = _this.$this.get$_input_decorator$_colors();
          t2 = t1._onErrorContainer;
          return t2 == null ? t1.onError : t2;
        }
        return _this.$this.get$_input_decorator$_colors().error;
      }
      t1 = _this.$this.get$_input_decorator$_colors();
      t2 = t1._onSurfaceVariant;
      return t2 == null ? t1.onSurface : t2;
    },
    $signature: 8
  };
  A._InputDecoratorDefaultsM3_labelStyle_closure.prototype = {
    call$1(states) {
      var t2,
        t1 = this.$this,
        textStyle = t1.get$_input_decorator$_textTheme().bodyLarge;
      if (textStyle == null)
        textStyle = C.TextStyle_ZyH;
      if (states.contains$1(0, C.WidgetState_6)) {
        t1 = t1.get$_input_decorator$_colors().onSurface;
        return textStyle.copyWith$1$color(B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255));
      }
      if (states.contains$1(0, D.WidgetState_7)) {
        if (states.contains$1(0, C.WidgetState_1))
          return textStyle.copyWith$1$color(t1.get$_input_decorator$_colors().error);
        if (states.contains$1(0, C.WidgetState_0)) {
          t1 = t1.get$_input_decorator$_colors();
          t2 = t1._onErrorContainer;
          return textStyle.copyWith$1$color(t2 == null ? t1.onError : t2);
        }
        return textStyle.copyWith$1$color(t1.get$_input_decorator$_colors().error);
      }
      if (states.contains$1(0, C.WidgetState_1))
        return textStyle.copyWith$1$color(t1.get$_input_decorator$_colors().primary);
      if (states.contains$1(0, C.WidgetState_0)) {
        t1 = t1.get$_input_decorator$_colors();
        t2 = t1._onSurfaceVariant;
        return textStyle.copyWith$1$color(t2 == null ? t1.onSurface : t2);
      }
      t1 = t1.get$_input_decorator$_colors();
      t2 = t1._onSurfaceVariant;
      return textStyle.copyWith$1$color(t2 == null ? t1.onSurface : t2);
    },
    $signature: 46
  };
  A._InputDecoratorDefaultsM3_floatingLabelStyle_closure.prototype = {
    call$1(states) {
      var t2,
        t1 = this.$this,
        textStyle = t1.get$_input_decorator$_textTheme().bodyLarge;
      if (textStyle == null)
        textStyle = C.TextStyle_ZyH;
      if (states.contains$1(0, C.WidgetState_6)) {
        t1 = t1.get$_input_decorator$_colors().onSurface;
        return textStyle.copyWith$1$color(B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255));
      }
      if (states.contains$1(0, D.WidgetState_7)) {
        if (states.contains$1(0, C.WidgetState_1))
          return textStyle.copyWith$1$color(t1.get$_input_decorator$_colors().error);
        if (states.contains$1(0, C.WidgetState_0)) {
          t1 = t1.get$_input_decorator$_colors();
          t2 = t1._onErrorContainer;
          return textStyle.copyWith$1$color(t2 == null ? t1.onError : t2);
        }
        return textStyle.copyWith$1$color(t1.get$_input_decorator$_colors().error);
      }
      if (states.contains$1(0, C.WidgetState_1))
        return textStyle.copyWith$1$color(t1.get$_input_decorator$_colors().primary);
      if (states.contains$1(0, C.WidgetState_0)) {
        t1 = t1.get$_input_decorator$_colors();
        t2 = t1._onSurfaceVariant;
        return textStyle.copyWith$1$color(t2 == null ? t1.onSurface : t2);
      }
      t1 = t1.get$_input_decorator$_colors();
      t2 = t1._onSurfaceVariant;
      return textStyle.copyWith$1$color(t2 == null ? t1.onSurface : t2);
    },
    $signature: 46
  };
  A._InputDecoratorDefaultsM3_helperStyle_closure.prototype = {
    call$1(states) {
      var t2,
        t1 = this.$this,
        textStyle = t1.get$_input_decorator$_textTheme().bodySmall;
      if (textStyle == null)
        textStyle = C.TextStyle_ZyH;
      if (states.contains$1(0, C.WidgetState_6)) {
        t1 = t1.get$_input_decorator$_colors().onSurface;
        return textStyle.copyWith$1$color(B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255));
      }
      t1 = t1.get$_input_decorator$_colors();
      t2 = t1._onSurfaceVariant;
      return textStyle.copyWith$1$color(t2 == null ? t1.onSurface : t2);
    },
    $signature: 46
  };
  A._InputDecoratorDefaultsM3_errorStyle_closure.prototype = {
    call$1(states) {
      var t1 = this.$this,
        textStyle = t1.get$_input_decorator$_textTheme().bodySmall;
      if (textStyle == null)
        textStyle = C.TextStyle_ZyH;
      return textStyle.copyWith$1$color(t1.get$_input_decorator$_colors().error);
    },
    $signature: 46
  };
  A.TextMagnifier_adaptiveMagnifierConfiguration_closure.prototype = {
    call$3(context, controller, magnifierInfo) {
      switch (B.defaultTargetPlatform().index) {
        case 2:
          return new A.CupertinoTextMagnifier(controller, magnifierInfo, null);
        case 0:
          return new A.TextMagnifier(magnifierInfo, null);
        case 1:
        case 3:
        case 4:
        case 5:
          return null;
      }
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: typesOffset + 39
  };
  A._TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1.setState$1(new A._TextMagnifierState__determineMagnifierPositionAndFocalPoint__closure(t1));
    },
    $signature: 0
  };
  A._TextMagnifierState__determineMagnifierPositionAndFocalPoint__closure.prototype = {
    call$0() {
      this.$this._positionShouldBeAnimatedTimer = null;
    },
    $signature: 0
  };
  A._TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure0.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this;
      t1._magnifierPosition = _this.finalMagnifierPosition;
      t1._positionShouldBeAnimatedTimer = _this._box_0.positionShouldBeAnimated;
      t1._extraFocalPointOffset = _this.focalPointAdjustmentForScreenBoundsAdjustment;
    },
    $signature: 0
  };
  A._TextButtonDefaultsM3_foregroundColor_closure.prototype = {
    call$1(states) {
      var t1;
      if (states.contains$1(0, C.WidgetState_6)) {
        t1 = this.$this.get$_text_button$_colors().onSurface;
        return B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
      }
      return this.$this.get$_text_button$_colors().primary;
    },
    $signature: 8
  };
  A._TextButtonDefaultsM3_overlayColor_closure.prototype = {
    call$1(states) {
      if (states.contains$1(0, C.WidgetState_2))
        return this.$this.get$_text_button$_colors().primary.withOpacity$1(0.1);
      if (states.contains$1(0, C.WidgetState_0))
        return this.$this.get$_text_button$_colors().primary.withOpacity$1(0.08);
      if (states.contains$1(0, C.WidgetState_1))
        return this.$this.get$_text_button$_colors().primary.withOpacity$1(0.1);
      return null;
    },
    $signature: 101
  };
  A._TextButtonDefaultsM3_iconColor_closure.prototype = {
    call$1(states) {
      var t1, _this = this;
      if (states.contains$1(0, C.WidgetState_6)) {
        t1 = _this.$this.get$_text_button$_colors().onSurface;
        return B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
      }
      if (states.contains$1(0, C.WidgetState_2))
        return _this.$this.get$_text_button$_colors().primary;
      if (states.contains$1(0, C.WidgetState_0))
        return _this.$this.get$_text_button$_colors().primary;
      if (states.contains$1(0, C.WidgetState_1))
        return _this.$this.get$_text_button$_colors().primary;
      return _this.$this.get$_text_button$_colors().primary;
    },
    $signature: 8
  };
  A._TextButtonDefaultsM3_mouseCursor_closure.prototype = {
    call$1(states) {
      if (states.contains$1(0, C.WidgetState_6))
        return C.SystemMouseCursor_basic;
      return C.SystemMouseCursor_click;
    },
    $signature: 47
  };
  A._TextFieldState__handleFocusChanged_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._TextFieldState__handleSelectionChanged_closure.prototype = {
    call$0() {
      this.$this._showSelectionHandles = this.willShowSelectionHandles;
    },
    $signature: 0
  };
  A._TextFieldState__handleHover_closure.prototype = {
    call$0() {
      this.$this._text_field$_isHovering = this.hovering;
    },
    $signature: 0
  };
  A._TextFieldState__handleStatesControllerChange_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._TextFieldState_build_closure.prototype = {
    call$0() {
      var t2,
        t1 = this.$this;
      if (!t1.get$_effectiveFocusNode().get$hasFocus()) {
        t2 = t1.get$_effectiveFocusNode();
        t2 = t2._canRequestFocus && C.JSArray_methods.every$1(t2.get$ancestors(), B.focus_manager_FocusNode__allowDescendantsToBeFocused$closure());
      } else
        t2 = false;
      if (t2)
        t1.get$_effectiveFocusNode().requestFocus$0();
    },
    $signature: 0
  };
  A._TextFieldState_build_closure0.prototype = {
    call$0() {
      this.$this.get$_effectiveFocusNode().unfocus$0();
    },
    $signature: 0
  };
  A._TextFieldState_build_closure1.prototype = {
    call$0() {
      var t2,
        t1 = this.$this;
      if (!t1.get$_effectiveFocusNode().get$hasFocus()) {
        t2 = t1.get$_effectiveFocusNode();
        t2 = t2._canRequestFocus && C.JSArray_methods.every$1(t2.get$ancestors(), B.focus_manager_FocusNode__allowDescendantsToBeFocused$closure());
      } else
        t2 = false;
      if (t2)
        t1.get$_effectiveFocusNode().requestFocus$0();
    },
    $signature: 0
  };
  A._TextFieldState_build_closure2.prototype = {
    call$0() {
      this.$this.get$_effectiveFocusNode().unfocus$0();
    },
    $signature: 0
  };
  A._TextFieldState_build_closure3.prototype = {
    call$0() {
      var t2,
        t1 = this.$this;
      if (!t1.get$_effectiveFocusNode().get$hasFocus()) {
        t2 = t1.get$_effectiveFocusNode();
        t2 = t2._canRequestFocus && C.JSArray_methods.every$1(t2.get$ancestors(), B.focus_manager_FocusNode__allowDescendantsToBeFocused$closure());
      } else
        t2 = false;
      if (t2)
        t1.get$_effectiveFocusNode().requestFocus$0();
    },
    $signature: 0
  };
  A._TextFieldState_build_closure4.prototype = {
    call$0() {
      this.$this.get$_effectiveFocusNode().unfocus$0();
    },
    $signature: 0
  };
  A._TextFieldState_build_closure5.prototype = {
    call$2(context, child) {
      var t6, t7, t8,
        t1 = this.$this,
        t2 = t1._getEffectiveDecoration$0(),
        t3 = t1._widget,
        t4 = t3.style,
        t5 = t3.textAlign;
      t3 = t3.textAlignVertical;
      t6 = t1._text_field$_isHovering;
      t7 = this.focusNode.get$hasFocus();
      t8 = this.controller._change_notifier$_value.text;
      t1._widget.toString;
      return new A.InputDecorator(t2, t4, t5, t3, t7, t6, false, t8.length === 0, child, null);
    },
    $signature: typesOffset + 43
  };
  A._TextFieldState_build_closure7.prototype = {
    call$1($event) {
      return this.$this._handleHover$1(true);
    },
    $signature: 54
  };
  A._TextFieldState_build_closure8.prototype = {
    call$1($event) {
      return this.$this._handleHover$1(false);
    },
    $signature: 45
  };
  A._TextFieldState_build_closure6.prototype = {
    call$2(context, child) {
      var t2, t3, t4, t5, _null = null,
        t1 = this.$this;
      t1.get$_isEnabled();
      t2 = this._box_0;
      t3 = t2.semanticsMaxValueLength;
      t4 = t1.get$_effectiveController()._change_notifier$_value.text;
      t4 = (t4.length === 0 ? C.StringCharacters_GVp : new B.StringCharacters(t4)).get$length(0);
      t1._widget.toString;
      t5 = t2.handleDidGainAccessibilityFocus;
      t2 = t2.handleDidLoseAccessibilityFocus;
      t1.get$_isEnabled();
      return B.Semantics$(_null, child, false, t4, true, false, _null, _null, _null, _null, _null, t3, _null, _null, _null, t5, t2, _null, new A._TextFieldState_build__closure(t1), _null, _null, new A._TextFieldState_build__closure0(t1), _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $signature: 561
  };
  A._TextFieldState_build__closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      if (!t1.get$_effectiveController()._change_notifier$_value.selection.get$isValid())
        t1.get$_effectiveController().set$selection(A.TextSelection$collapsed(C.TextAffinity_1, t1.get$_effectiveController()._change_notifier$_value.text.length));
      t1._requestKeyboard$0();
    },
    $signature: 0
  };
  A._TextFieldState_build__closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.get$_effectiveFocusNode();
      if (t2._canRequestFocus && C.JSArray_methods.every$1(t2.get$ancestors(), B.focus_manager_FocusNode__allowDescendantsToBeFocused$closure()) && !t1.get$_effectiveFocusNode().get$hasFocus())
        t1.get$_effectiveFocusNode().requestFocus$0();
      else {
        t1._widget.toString;
        t1._requestKeyboard$0();
      }
    },
    $signature: 0
  };
  A._m3StateInputStyle_closure.prototype = {
    call$1(states) {
      var t1, _null = null;
      if (states.contains$1(0, C.WidgetState_6)) {
        t1 = B.Theme_of(this.context).textTheme.bodyLarge.color;
        return B.TextStyle$(_null, _null, t1 == null ? _null : t1.withOpacity$1(0.38), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
      }
      return B.TextStyle$(_null, _null, B.Theme_of(this.context).textTheme.bodyLarge.color, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $signature: 46
  };
  A.__TextFieldState_State_RestorationMixin_dispose_closure.prototype = {
    call$2(property, listener) {
      if (!property._restoration0$_disposed)
        property.removeListener$1(listener);
    },
    $signature: 44
  };
  A._TextSelectionToolbarOverflowableState_build_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.setState$1(new A._TextSelectionToolbarOverflowableState_build__closure(t1));
    },
    $signature: 0
  };
  A._TextSelectionToolbarOverflowableState_build__closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._overflowOpen = !t1._overflowOpen;
    },
    $signature: 0
  };
  A._TextSelectionToolbarTrailingEdgeAlignRenderBox_hitTestChildren_closure.prototype = {
    call$2(result, transformed) {
      return this.$this.RenderObjectWithChildMixin__child.hitTest$2$position(result, transformed);
    },
    $signature: 16
  };
  A._RenderTextSelectionToolbarItemsLayout__layoutChildren_closure.prototype = {
    call$1(renderObjectChild) {
      var t2, t3, t4, width,
        t1 = this._box_0;
      ++t1.i;
      t2 = this.$this;
      if (t2._lastIndexThatFits !== -1 && !t2._overflowOpen)
        return;
      type$.RenderBox._as(renderObjectChild);
      t3 = this.sizedConstraints;
      t4 = t3.maxWidth;
      renderObjectChild.layout$2$parentUsesSize(new B.BoxConstraints(0, t4, 0, t3.maxHeight), true);
      width = t1.width + renderObjectChild.get$size()._dx;
      t1.width = width;
      if (width > t4 && t2._lastIndexThatFits === -1)
        t2._lastIndexThatFits = t1.i - 1;
    },
    $signature: 11
  };
  A._RenderTextSelectionToolbarItemsLayout__placeChildren_closure.prototype = {
    call$1(renderObjectChild) {
      var t3, t4, fitWidth,
        t1 = this._box_0,
        t2 = ++t1.i;
      type$.RenderBox._as(renderObjectChild);
      t3 = renderObjectChild.parentData;
      t3.toString;
      type$.ToolbarItemsParentData._as(t3);
      if (renderObjectChild === this.navButton)
        return;
      t4 = this.$this;
      if (!t4._shouldPaintChild$2(renderObjectChild, t2)) {
        t3.shouldPaint = false;
        return;
      }
      t3.shouldPaint = true;
      if (!t4._overflowOpen) {
        t2 = t1.fitWidth;
        t3.offset = new B.Offset(t2, 0);
        fitWidth = t2 + renderObjectChild.get$size()._dx;
        t1.fitWidth = fitWidth;
        t1.nextSize = new B.Size(fitWidth, Math.max(renderObjectChild.get$size()._dy, t1.nextSize._dy));
      } else {
        t2 = t1.overflowHeight;
        t3.offset = new B.Offset(0, t2);
        t1.overflowHeight = t2 + renderObjectChild.get$size()._dy;
        t1.nextSize = new B.Size(Math.max(renderObjectChild.get$size()._dx, t1.nextSize._dx), t1.overflowHeight);
      }
    },
    $signature: 11
  };
  A._RenderTextSelectionToolbarItemsLayout__resizeChildrenWhenOverflow_closure.prototype = {
    call$1(renderObjectChild) {
      var t1, t2, t3;
      type$.RenderBox._as(renderObjectChild);
      t1 = renderObjectChild.parentData;
      t1.toString;
      type$.ToolbarItemsParentData._as(t1);
      t2 = ++this._box_0.i;
      if (renderObjectChild === this.navButton)
        return;
      t3 = this.$this;
      if (!t3._shouldPaintChild$2(renderObjectChild, t2)) {
        t1.shouldPaint = false;
        return;
      }
      renderObjectChild.layout$2$parentUsesSize(B.BoxConstraints$tightFor(null, t3.get$size()._dx), true);
    },
    $signature: 11
  };
  A._RenderTextSelectionToolbarItemsLayout_paint_closure.prototype = {
    call$1(renderObjectChild) {
      var t1;
      type$.RenderBox._as(renderObjectChild);
      t1 = renderObjectChild.parentData;
      t1.toString;
      type$.ToolbarItemsParentData._as(t1);
      if (!t1.shouldPaint)
        return;
      this.context.paintChild$2(renderObjectChild, t1.offset.$add(0, this.offset));
    },
    $signature: 11
  };
  A._RenderTextSelectionToolbarItemsLayout_hitTestChildren_closure.prototype = {
    call$2(result, transformed) {
      return this._box_0.child.hitTest$2$position(result, transformed);
    },
    $signature: 16
  };
  A._RenderTextSelectionToolbarItemsLayout_visitChildrenForSemantics_closure.prototype = {
    call$1(renderObjectChild) {
      var t1;
      type$.RenderBox._as(renderObjectChild);
      t1 = renderObjectChild.parentData;
      t1.toString;
      if (type$.ToolbarItemsParentData._as(t1).shouldPaint)
        this.visitor.call$1(renderObjectChild);
    },
    $signature: 11
  };
  A._ShapeDecorationPainter__precache_closure.prototype = {
    call$1(shadow) {
      return shadow.toPaint$0();
    },
    $signature: 562
  };
  A._ShapeDecorationPainter__precache_closure0.prototype = {
    call$1(shadow) {
      return this.rect.shift$1(shadow.offset).inflate$1(shadow.spreadRadius);
    },
    $signature: 563
  };
  A._ShapeDecorationPainter__precache_closure1.prototype = {
    call$1(shadow) {
      return this.$this._shape_decoration$_decoration.shape.getOuterPath$2$textDirection(this.rect.shift$1(shadow.offset).inflate$1(shadow.spreadRadius), this.textDirection);
    },
    $signature: 564
  };
  A.RenderAnimatedSize_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.__RenderAnimatedSize__controller_F;
      t2 === $ && B.throwUnnamedLateFieldNI();
      t2 = t2.__AnimationController__value_A;
      t2 === $ && B.throwUnnamedLateFieldNI();
      if (t2 !== t1._animated_size$_lastValue)
        t1.markNeedsLayout$0();
    },
    $signature: 0
  };
  A.RenderEditable_getBoxesForSelection_closure.prototype = {
    call$1(textBox) {
      var t1 = this.$this;
      return new B.TextBox(textBox.left + t1.get$_paintOffset()._dx, textBox.top + t1.get$_paintOffset()._dy, textBox.right + t1.get$_paintOffset()._dx, textBox.bottom + t1.get$_paintOffset()._dy, textBox.direction);
    },
    $signature: 95
  };
  A.RenderEditable_describeSemanticsConfiguration_closure.prototype = {
    call$1(info) {
      return false;
    },
    $signature: 565
  };
  A.RenderEditable__createShowOnScreenFor_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.showOnScreen$2$descendant$rect(t1, t1._editable$_cachedChildNodes.$index(0, this.key)._semantics$_rect);
    },
    $signature: 0
  };
  A.RenderEditable_getRectForComposingRange_closure.prototype = {
    call$2(accum, incoming) {
      var t1 = accum == null ? null : accum.expandToInclude$1(new B.Rect(incoming.left, incoming.top, incoming.right, incoming.bottom));
      return t1 == null ? new B.Rect(incoming.left, incoming.top, incoming.right, incoming.bottom) : t1;
    },
    $signature: 566
  };
  A.RenderEditable_computeMinIntrinsicWidth_closure.prototype = {
    call$2(child, constraints) {
      return new B.Size(child._computeIntrinsics$3(C._IntrinsicDimension_0, 1 / 0, child.get$computeMinIntrinsicWidth()), 0);
    },
    $signature: 43
  };
  A.RenderEditable_computeMaxIntrinsicWidth_closure.prototype = {
    call$2(child, constraints) {
      return new B.Size(child._computeIntrinsics$3(C._IntrinsicDimension_1, 1 / 0, child.get$computeMaxIntrinsicWidth()), 0);
    },
    $signature: 43
  };
  A.RenderFollowerLayer_hitTestChildren_closure.prototype = {
    call$2(result, position) {
      return this.$this.super$RenderProxyBoxMixin$hitTestChildren(result, position);
    },
    $signature: 16
  };
  A.FilteringTextInputFormatter__processRegion_adjustIndex.prototype = {
    call$1(originalIndex) {
      var _this = this,
        t1 = _this.regionStart,
        replacedLength = originalIndex <= t1 && originalIndex < _this.regionEnd ? 0 : _this.replacementString.length;
      return replacedLength - (C.JSInt_methods.clamp$2(originalIndex, t1, _this.regionEnd) - t1);
    },
    $signature: 76
  };
  A.Actions_invoke_closure.prototype = {
    call$1(element) {
      var t2, result, _this = this,
        t1 = element._widget;
      t1.toString;
      t2 = _this.intent;
      result = B.Actions__castAction(type$._ActionsScope._as(t1), t2, _this.T);
      t1 = result != null;
      if (t1 && result._actions$_isEnabled$2(t2, _this.context))
        _this._box_0.returnValue = B.Actions__findDispatcher(element).invokeAction$3(result, t2, _this.context);
      return t1;
    },
    $signature: 57
  };
  A._FocusableActionDetectorState_initState_closure.prototype = {
    call$1(duration) {
      var t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager._highlightManager._highlightMode;
      if (t1 == null)
        t1 = B._HighlightModeManager__defaultModeForPlatform();
      this.$this._updateHighlightMode$1(t1);
    },
    $signature: 6
  };
  A._FocusableActionDetectorState__updateHighlightMode_closure.prototype = {
    call$0() {
      var t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager._highlightManager._highlightMode;
      switch ((t1 == null ? B._HighlightModeManager__defaultModeForPlatform() : t1).index) {
        case 0:
          t1 = false;
          break;
        case 1:
          t1 = true;
          break;
        default:
          t1 = null;
      }
      this.$this._canShowHighlight = t1;
    },
    $signature: 0
  };
  A._FocusableActionDetectorState__handleMouseEnter_closure.prototype = {
    call$0() {
      this.$this._hovering = true;
    },
    $signature: 0
  };
  A._FocusableActionDetectorState__handleMouseExit_closure.prototype = {
    call$0() {
      this.$this._hovering = false;
    },
    $signature: 0
  };
  A._FocusableActionDetectorState__handleFocusChange_closure.prototype = {
    call$0() {
      this.$this._focused = this.focused;
    },
    $signature: 0
  };
  A._FocusableActionDetectorState__mayTriggerCallback_shouldShowHoverHighlight.prototype = {
    call$1(target) {
      var t1 = this.$this;
      return t1._hovering && target.enabled && t1._canShowHighlight;
    },
    $signature: typesOffset + 10
  };
  A._FocusableActionDetectorState__mayTriggerCallback_canRequestFocus.prototype = {
    call$1(target) {
      var _0_0,
        t1 = this.$this._framework$_element;
      t1.toString;
      t1 = B.MediaQuery__maybeOf(t1, C._MediaQueryAspect_17);
      _0_0 = t1 == null ? null : t1.navigationMode;
      $label0$0: {
        if (C.NavigationMode_0 === _0_0 || _0_0 == null) {
          t1 = target.enabled;
          break $label0$0;
        }
        if (C.NavigationMode_1 === _0_0) {
          t1 = true;
          break $label0$0;
        }
        t1 = null;
      }
      return t1;
    },
    $signature: typesOffset + 10
  };
  A._FocusableActionDetectorState__mayTriggerCallback_shouldShowFocusHighlight.prototype = {
    call$1(target) {
      var t1 = this.$this;
      return t1._focused && t1._canShowHighlight && this.canRequestFocus.call$1(target);
    },
    $signature: typesOffset + 10
  };
  A._FocusableActionDetectorState_didUpdateWidget_closure.prototype = {
    call$1(duration) {
      this.$this._mayTriggerCallback$1$oldWidget(this.oldWidget);
    },
    $signature: 6
  };
  A.ClipPath_shape_closure.prototype = {
    call$1(context) {
      return B.ClipPath$(this.child, this.clipBehavior, new B.ShapeBorderClipper(this.shape, B.Directionality_maybeOf(context), null));
    },
    $signature: 567
  };
  A.ContextMenuController_show_closure.prototype = {
    call$1(context) {
      return new A._CaptureAll(this.capturedThemes._themes, this.contextMenuBuilder.call$1(context), null);
    },
    $signature: 13
  };
  A.EditableTextState__onChangedClipboardStatus_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A.EditableTextState_cutSelection_closure.prototype = {
    call$1(__wc0_formal) {
      var t1 = this.$this;
      if (t1._framework$_element != null)
        t1.bringIntoView$1(t1._widget.controller._change_notifier$_value.selection.get$extent());
    },
    $signature: 6
  };
  A.EditableTextState__pasteText_closure.prototype = {
    call$1(__wc0_formal) {
      var t1 = this.$this;
      if (t1._framework$_element != null)
        t1.bringIntoView$1(t1._widget.controller._change_notifier$_value.selection.get$extent());
    },
    $signature: 6
  };
  A.EditableTextState_buttonItemsForToolbarOptions_closure.prototype = {
    call$0() {
      this.$this.cutSelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_buttonItemsForToolbarOptions_closure0.prototype = {
    call$0() {
      this.$this.copySelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_buttonItemsForToolbarOptions_closure1.prototype = {
    call$0() {
      this.$this.pasteText$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_buttonItemsForToolbarOptions_closure2.prototype = {
    call$0() {
      this.$this.selectAll$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_contextMenuButtonItems_closure.prototype = {
    call$0() {
      return this.$this.copySelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_contextMenuButtonItems_closure0.prototype = {
    call$0() {
      return this.$this.cutSelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_contextMenuButtonItems_closure1.prototype = {
    call$0() {
      return this.$this.pasteText$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_contextMenuButtonItems_closure2.prototype = {
    call$0() {
      return this.$this.selectAll$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_contextMenuButtonItems_closure3.prototype = {
    call$0() {
      return this.$this.lookUpSelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_contextMenuButtonItems_closure4.prototype = {
    call$0() {
      return this.$this.searchWebForSelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_contextMenuButtonItems_closure5.prototype = {
    call$0() {
      return this.$this.shareSelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_contextMenuButtonItems_closure6.prototype = {
    call$0() {
      return this.$this._startLiveTextInput$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState__textProcessingActionButtonItems_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, processedText, t1, t2, t3, selectedText;
      var $async$call$0 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.selection;
              t2 = $async$self.$this;
              t3 = t2._widget;
              selectedText = C.JSString_methods.substring$2(t3.controller._change_notifier$_value.text, t1.start, t1.end);
              $async$goto = selectedText.length !== 0 ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return B._asyncAwait(t2._processTextService.processTextAction$3($async$self.action.id, selectedText, t3.readOnly), $async$call$0);
            case 4:
              // returning from await.
              processedText = $async$result;
              if (processedText != null && t2.get$_allowPaste())
                t2._pasteText$2(D.SelectionChangedCause_5, processedText);
              else
                t2.hideToolbar$0();
            case 3:
              // join
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 9
  };
  A.EditableTextState_initState_closure.prototype = {
    call$0() {
      return this.$this._justResumed = true;
    },
    $signature: 0
  };
  A.EditableTextState_didChangeDependencies_closure.prototype = {
    call$1(__wc0_formal) {
      var t2,
        t1 = this.$this;
      if (t1._framework$_element != null && t1.get$renderEditable()._box$_size != null) {
        t1._nextFocusChangeIsInternal = true;
        $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager.addListener$1(t1.get$_unflagInternalFocus());
        t2 = t1._framework$_element;
        t2.toString;
        B.FocusScope_of(t2).autofocus$1(t1._widget.focusNode);
      }
    },
    $signature: 6
  };
  A.EditableTextState_didUpdateWidget_closure.prototype = {
    call$1(__wc0_formal) {
      var t1, _this = this;
      if (_this.shouldShowToolbar)
        _this.$this._selectionOverlay.showToolbar$0();
      if (_this.shouldShowHandles) {
        t1 = _this.$this._selectionOverlay;
        t1._updateSelectionOverlay$0();
        t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t1.showHandles$0();
      }
    },
    $signature: 6
  };
  A.EditableTextState_didUpdateWidget_closure0.prototype = {
    call$1(__wc1_formal) {
      this.$this._openInputConnection$0();
    },
    $signature: 6
  };
  A.EditableTextState__scheduleShowCaretOnScreen_closure.prototype = {
    call$1(__wc0_formal) {
      var t2, t3, lineHeight, bottomSpacing, handleHeight, interactiveHandleHeight, caretPadding, targetOffset, selection, rectToReveal, selectionBoxes,
        t1 = this.$this;
      t1._showCaretOnScreenScheduled = false;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey);
      t2 = t2 == null ? null : t2.get$renderObject();
      type$.nullable_RenderEditable._as(t2);
      if (t2 != null) {
        t3 = t2._selection.get$isValid();
        t3 = !t3 || t1.get$_scrollController()._positions.length === 0;
      } else
        t3 = true;
      if (t3)
        return;
      lineHeight = t2._editable$_textPainter._getOrCreateLayoutTemplate$0().get$height();
      bottomSpacing = t1._widget.scrollPadding.bottom;
      t3 = t1._selectionOverlay;
      if ((t3 == null ? null : t3.selectionControls) != null) {
        handleHeight = t3.selectionControls.getHandleSize$1(lineHeight)._dy;
        interactiveHandleHeight = Math.max(handleHeight, 48);
        bottomSpacing = Math.max(handleHeight / 2 - t1._selectionOverlay.selectionControls.getHandleAnchor$2(C.TextSelectionHandleType_2, lineHeight)._dy + interactiveHandleHeight / 2, bottomSpacing);
      }
      caretPadding = t1._widget.scrollPadding.copyWith$1$bottom(bottomSpacing);
      targetOffset = t1._getOffsetToRevealCaret$1(t2.getLocalRectForCaret$1(t2._selection.get$extent()));
      selection = t1._widget.controller._change_notifier$_value.selection;
      if (selection.start === selection.end)
        rectToReveal = targetOffset.rect;
      else {
        selectionBoxes = t2.getBoxesForSelection$1(selection);
        if (selectionBoxes.length === 0)
          rectToReveal = targetOffset.rect;
        else if (selection.baseOffset < selection.extentOffset) {
          t3 = C.JSArray_methods.get$last(selectionBoxes);
          rectToReveal = new B.Rect(t3.left, t3.top, t3.right, t3.bottom);
        } else {
          t3 = C.JSArray_methods.get$first(selectionBoxes);
          rectToReveal = new B.Rect(t3.left, t3.top, t3.right, t3.bottom);
        }
      }
      t3 = targetOffset.offset;
      if (this.withAnimation) {
        t1.get$_scrollController().animateTo$3$curve$duration(t3, C.Cubic_Dkk, C.Duration_100000);
        t2.showOnScreen$3$curve$duration$rect(C.Cubic_Dkk, C.Duration_100000, caretPadding.inflateRect$1(rectToReveal));
      } else {
        t1.get$_scrollController().jumpTo$1(t3);
        t2.showOnScreen$1$rect(caretPadding.inflateRect$1(rectToReveal));
      }
    },
    $signature: 6
  };
  A.EditableTextState_didChangeMetrics_closure.prototype = {
    call$1(__wc0_formal) {
      var t1 = this.$this._selectionOverlay;
      if (t1 != null) {
        t1._updateSelectionOverlay$0();
        t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
        t1 === $ && B.throwUnnamedLateFieldNI();
        t1.markNeedsBuild$0();
      }
    },
    $signature: 6
  };
  A.EditableTextState__formatAndSetValue_closure.prototype = {
    call$2(newValue, formatter) {
      return formatter.formatEditUpdate$2(this.$this._widget.controller._change_notifier$_value, newValue);
    },
    $signature: typesOffset + 36
  };
  A.EditableTextState__startCursorBlink_closure.prototype = {
    call$1(timer) {
      this.$this._onCursorTick$0();
    },
    $signature: 199
  };
  A.EditableTextState__onCursorTick_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A.EditableTextState__onCursorTick_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1.get$_cursorBlinkOpacityController().animateWith$1(t1.get$_iosBlinkCursorSimulation())._primaryCompleter.future.whenComplete$1(t1.get$_onCursorTick());
    },
    $signature: 0
  };
  A.EditableTextState__onCursorTick_closure1.prototype = {
    call$1(timer) {
      this.$this._onCursorTick$0();
    },
    $signature: 199
  };
  A.EditableTextState__didChangeTextEditingValue_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A.EditableTextState__handleFocusChanged_closure.prototype = {
    call$0() {
      this.$this._currentPromptRectRange = null;
    },
    $signature: 0
  };
  A.EditableTextState_insertTextPlaceholder_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._widget.controller._change_notifier$_value;
      t1._placeholderLocation = t2.text.length - t2.selection.end;
    },
    $signature: 0
  };
  A.EditableTextState_removeTextPlaceholder_closure.prototype = {
    call$0() {
      this.$this._placeholderLocation = -1;
    },
    $signature: 0
  };
  A.EditableTextState_showAutocorrectionPromptRect_closure.prototype = {
    call$0() {
      this.$this._currentPromptRectRange = new B.TextRange(this.start, this.end);
    },
    $signature: 0
  };
  A.EditableTextState__semanticsOnCopy_closure.prototype = {
    call$0() {
      this.$this.copySelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState__semanticsOnCut_closure.prototype = {
    call$0() {
      this.$this.cutSelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState__semanticsOnPaste_closure.prototype = {
    call$0() {
      var t1 = this.controls;
      if (t1 != null)
        t1.handlePaste$1(this.$this);
      this.$this.pasteText$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState__actions_closure.prototype = {
    call$1(intent) {
      return this.$this.pasteText$1(C.SelectionChangedCause_4);
    },
    $signature: 569
  };
  A.EditableTextState_build_closure.prototype = {
    call$1(context) {
      var t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, _null = null,
        _s12_ = "EditableText",
        t1 = this.$this,
        t2 = t1._widget,
        t3 = t2.groupId;
      if (t2.focusNode.get$hasFocus()) {
        t1._widget.toString;
        t2 = new A.EditableTextState_build__closure(t1, context);
      } else
        t2 = _null;
      t4 = t1._widget;
      t5 = t4.onTapUpOutside;
      t6 = t4.mouseCursor;
      t7 = t4.controller;
      t8 = t4.focusNode;
      t9 = t4.undoController;
      t4 = t4.maxLines !== 1 ? C.AxisDirection_2 : C.AxisDirection_1;
      t10 = t1.get$_scrollController();
      t11 = t1._widget;
      t12 = t11.scrollPhysics;
      t13 = t11.dragStartBehavior;
      t11 = t11.restorationId;
      t14 = B.ScrollConfiguration_of(context).copyWith$2$overscroll$scrollbars(false, t1._widget.maxLines !== 1);
      return A.TextFieldTapRegion$(B.MouseRegion$(new A.UndoHistory(t7, new A.EditableTextState_build__closure0(t1), new A.EditableTextState_build__closure1(), new A.EditableTextState_build__closure2(t1), t8, t9, B.Focus$(false, _null, new B.NotificationListener(new A.EditableTextState_build__closure3(t1), E.Scrollable$(t4, C.Clip_1, t10, t13, true, C.HitTestBehavior_1, t1._scrollableKey, t12, t11, t14, _null, new A.EditableTextState_build__closure4(t1, this.controls, this.effectiveTextScaler)), _null, type$.NotificationListener_ScrollNotification), _s12_, _null, _null, t8, false, _null, _null, _null, _null, _null, _null), _null, type$.UndoHistory_TextEditingValue), t6, _null, _null, _null, _null), _s12_, t3, t2, t5);
    },
    $signature: typesOffset + 37
  };
  A.EditableTextState_build__closure.prototype = {
    call$1($event) {
      A.Actions_invoke(this.context, new A.EditableTextTapOutsideIntent(this.$this._widget.focusNode, $event), type$.EditableTextTapOutsideIntent);
      return null;
    },
    $signature: 64
  };
  A.EditableTextState_build__closure2.prototype = {
    call$1(value) {
      this.$this.userUpdateTextEditingValue$2(value, C.SelectionChangedCause_4);
    },
    $signature: 570
  };
  A.EditableTextState_build__closure0.prototype = {
    call$2(oldValue, newValue) {
      var t1;
      if (!newValue.selection.get$isValid())
        return false;
      if (oldValue == null)
        return true;
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
        case 1:
        case 3:
        case 5:
          t1 = this.$this._widget.controller._change_notifier$_value.composing;
          if (t1.start !== t1.end)
            return false;
          break;
        case 0:
          break;
      }
      return oldValue.text !== newValue.text || !oldValue.composing.$eq(0, newValue.composing);
    },
    $signature: 571
  };
  A.EditableTextState_build__closure1.prototype = {
    call$1(value) {
      return B.defaultTargetPlatform() === C.TargetPlatform_0 ? value.copyWith$1$composing(C.TextRange_m1_m1) : value;
    },
    $signature: 572
  };
  A.EditableTextState_build__closure3.prototype = {
    call$1(notification) {
      var t1 = this.$this;
      t1._handleContextMenuOnScroll$1(notification);
      t1._scribbleCacheKey = null;
      return false;
    },
    $signature: 51
  };
  A.EditableTextState_build__closure4.prototype = {
    call$2(context, offset) {
      var t5, t6, t7, t8, t9, t10, effectiveOpacity, t11, t12, t13, t14, t15, t16, t17, t0, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, _null = null,
        t1 = this.$this,
        t2 = this.controls,
        t3 = t1._semanticsOnCopy$1(t2),
        t4 = t1._semanticsOnCut$1(t2);
      t2 = t1._semanticsOnPaste$1(t2);
      t5 = t1._editableKey;
      t1.get$_stylusHandwritingEnabled();
      t6 = t1._widget.focusNode;
      t7 = t1.buildTextSpan$0();
      t8 = t1._widget;
      t9 = t8.controller._change_notifier$_value;
      t8 = t8.cursorColor.get$alpha();
      t10 = t1.get$_cursorBlinkOpacityController().__AnimationController__value_A;
      t10 === $ && B.throwUnnamedLateFieldNI();
      effectiveOpacity = Math.min(t8 / 255, t10);
      t10 = t1._widget.cursorColor.withOpacity$1(effectiveOpacity);
      t8 = t1._widget;
      t11 = t8.backgroundCursorColor;
      t12 = t8.readOnly;
      t8 = t8.focusNode.get$hasFocus();
      t13 = t1._widget;
      t14 = t13.maxLines;
      t15 = t13.minLines;
      t13 = t13.get$strutStyle();
      t16 = t1._selectionOverlay;
      if (t16 == null)
        t16 = _null;
      else {
        t16 = t16.__TextSelectionOverlay__selectionOverlay_F;
        t16 === $ && B.throwUnnamedLateFieldNI();
        t16 = $.ContextMenuController__shownInstance === t16._spellCheckToolbarController;
      }
      if (t16 === true) {
        t1.__EditableTextState__spellCheckConfiguration_A === $ && B.throwUnnamedLateFieldNI();
        t16 = t1._widget;
        t17 = t16.selectionColor;
        t0 = t17;
        t17 = t16;
        t16 = t0;
      } else {
        t16 = t1._widget;
        t17 = t16.selectionColor;
        t0 = t17;
        t17 = t16;
        t16 = t0;
      }
      t18 = this.effectiveTextScaler;
      t19 = t1.get$_editable_text$_textDirection();
      t1._widget.toString;
      t20 = B.DefaultTextHeightBehavior_maybeOf(context);
      t21 = t1._widget;
      t22 = t21.obscuringCharacter;
      t23 = t21.obscureText;
      t24 = t21.cursorWidth;
      t25 = t21.cursorHeight;
      t26 = t21.cursorRadius;
      t27 = t21.cursorOffset;
      if (t27 == null)
        t27 = C.Offset_0_0;
      t28 = t21.selectionHeightStyle;
      t29 = t21.selectionWidthStyle;
      t30 = t21.paintCursorAboveText;
      if (t21.enableInteractiveSelection)
        t21 = !t21.readOnly || !t23;
      else
        t21 = false;
      t31 = t1._framework$_element;
      t31.toString;
      t31 = B.InheritedModel_inheritFrom(t31, C._MediaQueryAspect_2, type$.MediaQuery).data;
      t32 = t1._currentPromptRectRange;
      t33 = t1._widget;
      return new A.CompositedTransformTarget(t1._toolbarLayerLink, B.Semantics$(_null, new A._ScribbleFocusable(new A.SizeChangedLayoutNotifier(new A._Editable(t7, t9, t10, t1._startHandleLayerLink, t1._endHandleLayerLink, t11, t1._cursorVisibilityNotifier, true, t12, t8, t14, t15, false, t13, t16, t18, t17.textAlign, t19, _null, t22, t23, t20, C.TextWidthBasis_0, offset, true, t24, t25, t26, t27, t30, t28, t29, t21, t1, t31.devicePixelRatio, t32, t33.autocorrectionTextRectColor, t33.clipBehavior, B.WidgetSpan_extractFromInlineSpan(t7, t18), t5), _null), t6, t5, new A.EditableTextState_build___closure(t1), true, _null), false, _null, _null, false, _null, _null, _null, _null, _null, _null, _null, t3, t4, _null, _null, _null, _null, _null, t2, _null, _null, _null, _null, _null, _null, _null, _null, _null), _null);
    },
    $signature: typesOffset + 38
  };
  A.EditableTextState_build___closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._openInputConnection$0();
      t1._updateSelectionRects$1$force(true);
    },
    $signature: 0
  };
  A._ScribbleFocusableState_isInScribbleRect_closure.prototype = {
    call$1(entry) {
      return entry.target.$eq(0, this.$this.get$renderEditable());
    },
    $signature: 573
  };
  A._AnimatedPositionedState_forEachTween_closure.prototype = {
    call$1(value) {
      return new B.Tween(B._asDouble(value), null, type$.Tween_double);
    },
    $signature: 29
  };
  A._AnimatedPositionedState_forEachTween_closure0.prototype = {
    call$1(value) {
      return new B.Tween(B._asDouble(value), null, type$.Tween_double);
    },
    $signature: 29
  };
  A._AnimatedPositionedState_forEachTween_closure1.prototype = {
    call$1(value) {
      return new B.Tween(B._asDouble(value), null, type$.Tween_double);
    },
    $signature: 29
  };
  A._AnimatedPositionedState_forEachTween_closure2.prototype = {
    call$1(value) {
      return new B.Tween(B._asDouble(value), null, type$.Tween_double);
    },
    $signature: 29
  };
  A._AnimatedPositionedState_forEachTween_closure3.prototype = {
    call$1(value) {
      return new B.Tween(B._asDouble(value), null, type$.Tween_double);
    },
    $signature: 29
  };
  A._AnimatedPositionedState_forEachTween_closure4.prototype = {
    call$1(value) {
      return new B.Tween(B._asDouble(value), null, type$.Tween_double);
    },
    $signature: 29
  };
  A.InheritedTheme_capture_closure.prototype = {
    call$1(ancestor) {
      var _0_2_isSet, t1, t2, _0_2, themeType;
      if (ancestor.$eq(0, this.to))
        return false;
      _0_2_isSet = ancestor instanceof B.InheritedElement;
      if (_0_2_isSet) {
        t1 = ancestor._widget;
        t1.toString;
        t2 = t1 instanceof B.InheritedTheme;
        _0_2 = t1;
        t1 = t2;
      } else {
        _0_2 = null;
        t1 = false;
      }
      if (t1) {
        if (_0_2_isSet)
          t1 = _0_2;
        else {
          t1 = ancestor._widget;
          t1.toString;
        }
        type$.InheritedTheme._as(t1);
        themeType = B.getRuntimeTypeOfDartObject(t1);
        t2 = this.themeTypes;
        if (!t2.contains$1(0, themeType)) {
          t2.add$1(0, themeType);
          this.themes.push(t1);
        }
      }
      return true;
    },
    $signature: 30
  };
  A.MagnifierController_show_closure.prototype = {
    call$1(context) {
      return new A._CaptureAll(this.capturedThemes._themes, this.builder.call$1(context), null);
    },
    $signature: 13
  };
  A.SizeChangedLayoutNotifier_createRenderObject_closure.prototype = {
    call$0() {
      this.context.dispatchNotification$1(D.C_SizeChangedLayoutNotification);
    },
    $signature: 0
  };
  A.SelectionOverlay_showMagnifier_closure.prototype = {
    call$1(__wc0_formal) {
      return this.builtMagnifier;
    },
    $signature: 13
  };
  A.SelectionOverlay_showHandles_closure.prototype = {
    call$1(context) {
      var t2, handle, _null = null,
        t1 = this.$this,
        selectionControls = t1.selectionControls;
      if (selectionControls != null)
        t2 = t1._startHandleType === C.TextSelectionHandleType_2 && t1._isDraggingEndHandle;
      else
        t2 = true;
      if (t2)
        handle = C.SizedBox_0_0_null_null;
      else {
        t2 = t1._startHandleType;
        handle = A._SelectionHandleOverlay$(t1.dragStartBehavior, t1.startHandleLayerLink, t1.get$_handleStartHandleDragEnd(), t1.get$_handleStartHandleDragStart(), t1.get$_handleStartHandleDragUpdate(), t1.onSelectionHandleTapped, t1._lineHeightAtStart, selectionControls, t2, t1.startHandlesVisible);
      }
      return new A._CaptureAll(this.capturedThemes._themes, A.TextFieldTapRegion$(new B.ExcludeSemantics(true, handle, _null), _null, D.Type_EditableText_O5i, _null, _null), _null);
    },
    $signature: 13
  };
  A.SelectionOverlay_showHandles_closure0.prototype = {
    call$1(context) {
      var t3, handle, _null = null,
        t1 = this.$this,
        selectionControls = t1.selectionControls,
        t2 = true;
      if (selectionControls != null) {
        t3 = t1._endHandleType === C.TextSelectionHandleType_2;
        if (!(t3 && t1._isDraggingStartHandle))
          t2 = t3 && !t1._isDraggingStartHandle && !t1._isDraggingEndHandle;
      }
      if (t2)
        handle = C.SizedBox_0_0_null_null;
      else {
        t2 = t1._endHandleType;
        handle = A._SelectionHandleOverlay$(t1.dragStartBehavior, t1.endHandleLayerLink, t1.get$_handleEndHandleDragEnd(), t1.get$_handleEndHandleDragStart(), t1.get$_handleEndHandleDragUpdate(), t1.onSelectionHandleTapped, t1._lineHeightAtEnd, selectionControls, t2, t1.endHandlesVisible);
      }
      return new A._CaptureAll(this.capturedThemes._themes, A.TextFieldTapRegion$(new B.ExcludeSemantics(true, handle, _null), _null, D.Type_EditableText_O5i, _null, _null), _null);
    },
    $signature: 13
  };
  A.SelectionOverlay_showToolbar_closure.prototype = {
    call$1(context) {
      var t1 = this.$this,
        t2 = B.MatrixUtils_transformPoint(this.renderBox.getTransformTo$1(null), C.Offset_0_0);
      return new A._SelectionToolbarWrapper(this.contextMenuBuilder.call$1(context), new B.Offset(-t2._dx, -t2._dy), t1.toolbarLayerLink, t1.toolbarVisible, null);
    },
    $signature: typesOffset + 42
  };
  A.SelectionOverlay_markNeedsBuild_closure.prototype = {
    call$1(duration) {
      var t2,
        t1 = this.$this;
      t1._text_selection$_buildScheduled = false;
      t2 = t1._handles;
      if (t2 != null)
        t2._1.markNeedsBuild$0();
      t2 = t1._handles;
      if (t2 != null)
        t2._0.markNeedsBuild$0();
      t2 = t1._toolbar;
      if (t2 != null)
        t2.markNeedsBuild$0();
      t2 = $.ContextMenuController__shownInstance;
      if (t2 === t1._contextMenuController) {
        t1 = $.ContextMenuController__menuOverlayEntry;
        if (t1 != null)
          t1.markNeedsBuild$0();
      } else if (t2 === t1._spellCheckToolbarController) {
        t1 = $.ContextMenuController__menuOverlayEntry;
        if (t1 != null)
          t1.markNeedsBuild$0();
      }
    },
    $signature: 6
  };
  A.SelectionOverlay__buildToolbar_closure.prototype = {
    call$1(context) {
      this.$this.selectionControls.toString;
      return C.SizedBox_0_0_null_null;
    },
    $signature: 13
  };
  A._SelectionHandleOverlayState_build_closure.prototype = {
    call$0() {
      return B.PanGestureRecognizer$(this.$this, B.LinkedHashSet_LinkedHashSet$_literal([C.PointerDeviceKind_0, C.PointerDeviceKind_2, C.PointerDeviceKind_5], type$.PointerDeviceKind));
    },
    $signature: 174
  };
  A._SelectionHandleOverlayState_build_closure0.prototype = {
    call$1(instance) {
      var t1 = this.$this._widget;
      instance.dragStartBehavior = t1.dragStartBehavior;
      instance.gestureSettings = this.eagerlyAcceptDragWhenCollapsed ? D.DeviceGestureSettings_1 : null;
      instance.onStart = t1.onSelectionHandleDragStart;
      instance.onUpdate = t1.onSelectionHandleDragUpdate;
      instance.onEnd = t1.onSelectionHandleDragEnd;
    },
    $signature: 175
  };
  A.TextSelectionGestureDetectorBuilder_onTapDown_closure.prototype = {
    call$1(isAvailable) {
      var t1, t2;
      if (isAvailable) {
        t1 = this.$this.delegate.editableTextKey.get$currentState();
        t1.toString;
        t1 = t1.get$renderEditable();
        t2 = t1._lastTapDownPosition;
        t2.toString;
        t1.selectPositionAt$2$cause$from(D.SelectionChangedCause_7, t2);
        D.OptionalMethodChannel_13P.invokeMethod$1$1("Scribe.startStylusHandwriting", type$.void);
      }
    },
    $signature: 82
  };
  A._TextSelectionGestureDetectorState_build_closure.prototype = {
    call$0() {
      return B.TapGestureRecognizer$(this.$this, null);
    },
    $signature: 166
  };
  A._TextSelectionGestureDetectorState_build_closure0.prototype = {
    call$1(instance) {
      var t1 = this.$this._widget;
      instance.onSecondaryTap = t1.onSecondaryTap;
      instance.onSecondaryTapDown = t1.onSecondaryTapDown;
    },
    $signature: 167
  };
  A._TextSelectionGestureDetectorState_build_closure1.prototype = {
    call$0() {
      return B.LongPressGestureRecognizer$(this.$this, B.LinkedHashSet_LinkedHashSet$_literal([C.PointerDeviceKind_0], type$.PointerDeviceKind));
    },
    $signature: 168
  };
  A._TextSelectionGestureDetectorState_build_closure2.prototype = {
    call$1(instance) {
      var t1 = this.$this;
      instance.onLongPressStart = t1.get$_handleLongPressStart();
      instance.onLongPressMoveUpdate = t1.get$_handleLongPressMoveUpdate();
      instance.onLongPressEnd = t1.get$_handleLongPressEnd();
    },
    $signature: 169
  };
  A._TextSelectionGestureDetectorState_build_closure3.prototype = {
    call$0() {
      var _null = null,
        t1 = type$.int;
      return new A.TapAndHorizontalDragGestureRecognizer(C.DragStartBehavior_1, D._DragState_00, B.LinkedHashSet_LinkedHashSet$_empty(t1), _null, _null, 0, _null, _null, _null, _null, _null, _null, B.LinkedHashMap_LinkedHashMap$_empty(t1, type$.GestureArenaEntry), B.HashSet_HashSet(t1), this.$this, _null, B.recognizer_GestureRecognizer__defaultButtonAcceptBehavior$closure(), B.LinkedHashMap_LinkedHashMap$_empty(t1, type$.PointerDeviceKind));
    },
    $signature: typesOffset + 52
  };
  A._TextSelectionGestureDetectorState_build_closure4.prototype = {
    call$1(instance) {
      var t1;
      instance.dragStartBehavior = C.DragStartBehavior_0;
      instance.eagerVictoryOnDrag = B.defaultTargetPlatform() !== C.TargetPlatform_2;
      t1 = this.$this;
      instance._TapStatusTrackerMixin_onTapTrackStart = t1.get$_handleTapTrackStart();
      instance._TapStatusTrackerMixin_onTapTrackReset = t1.get$_handleTapTrackReset();
      instance.onTapDown = t1.get$_text_selection$_handleTapDown();
      instance.onDragStart = t1.get$_text_selection$_handleDragStart();
      instance.onDragUpdate = t1.get$_text_selection$_handleDragUpdate();
      instance.onDragEnd = t1.get$_text_selection$_handleDragEnd();
      instance.onTapUp = t1.get$_text_selection$_handleTapUp();
      instance.onCancel = t1.get$_text_selection$_handleTapCancel();
    },
    $signature: typesOffset + 53
  };
  A._TextSelectionGestureDetectorState_build_closure5.prototype = {
    call$0() {
      var _null = null,
        t1 = type$.int;
      return new A.TapAndPanGestureRecognizer(C.DragStartBehavior_1, D._DragState_00, B.LinkedHashSet_LinkedHashSet$_empty(t1), _null, _null, 0, _null, _null, _null, _null, _null, _null, B.LinkedHashMap_LinkedHashMap$_empty(t1, type$.GestureArenaEntry), B.HashSet_HashSet(t1), this.$this, _null, B.recognizer_GestureRecognizer__defaultButtonAcceptBehavior$closure(), B.LinkedHashMap_LinkedHashMap$_empty(t1, type$.PointerDeviceKind));
    },
    $signature: typesOffset + 54
  };
  A._TextSelectionGestureDetectorState_build_closure6.prototype = {
    call$1(instance) {
      var t1;
      instance.dragStartBehavior = C.DragStartBehavior_0;
      t1 = this.$this;
      instance._TapStatusTrackerMixin_onTapTrackStart = t1.get$_handleTapTrackStart();
      instance._TapStatusTrackerMixin_onTapTrackReset = t1.get$_handleTapTrackReset();
      instance.onTapDown = t1.get$_text_selection$_handleTapDown();
      instance.onDragStart = t1.get$_text_selection$_handleDragStart();
      instance.onDragUpdate = t1.get$_text_selection$_handleDragUpdate();
      instance.onDragEnd = t1.get$_text_selection$_handleDragEnd();
      instance.onTapUp = t1.get$_text_selection$_handleTapUp();
      instance.onCancel = t1.get$_text_selection$_handleTapCancel();
    },
    $signature: typesOffset + 55
  };
  A._TextSelectionGestureDetectorState_build_closure7.prototype = {
    call$0() {
      return B.ForcePressGestureRecognizer$(this.$this, null);
    },
    $signature: 574
  };
  A._TextSelectionGestureDetectorState_build_closure8.prototype = {
    call$1(instance) {
      var t1 = this.$this,
        t2 = t1._widget;
      instance.onStart = t2.onForcePressStart != null ? t1.get$_forcePressStarted() : null;
      instance.onEnd = t2.onForcePressEnd != null ? t1.get$_forcePressEnded() : null;
    },
    $signature: 575
  };
  A.UndoHistoryState_initState_closure.prototype = {
    call$1(currentValue) {
      var t1 = this.$this;
      t1._undo_history$_stack.push$1(currentValue);
      t1._updateState$0();
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1)");
    }
  };
  A._throttle_closure.prototype = {
    call$1(currentArg) {
      var t2, t3, _this = this,
        t1 = _this.arg;
      t1._value = currentArg;
      t2 = _this._box_0;
      t3 = t2.timer;
      if (t3 != null && t3._handle != null) {
        t3.toString;
        return t3;
      }
      return t2.timer = B.Timer_Timer(_this.duration, new A._throttle__closure(t2, _this.$function, t1));
    },
    $signature() {
      return this.T._eval$1("Timer(0)");
    }
  };
  A._throttle__closure.prototype = {
    call$0() {
      this.$function.call$1(this.arg._readLocal$0());
      this._box_0.timer = null;
    },
    $signature: 0
  };
  (function aliases() {
    var _ = A.__CupertinoButtonState_State_SingleTickerProviderStateMixin.prototype;
    _.super$__CupertinoButtonState_State_SingleTickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin.prototype;
    _.super$__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin.prototype;
    _.super$__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin.prototype;
    _.super$__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin$attach = _.attach$1;
    _.super$__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin$detach = _.detach$0;
    _ = A._TapStatusTrackerMixin.prototype;
    _.super$_TapStatusTrackerMixin$handleEvent = _.handleEvent$1;
    _.super$_TapStatusTrackerMixin$rejectGesture = _.rejectGesture$1;
    _ = A._BaseTapAndDragGestureRecognizer_OneSequenceGestureRecognizer__TapStatusTrackerMixin.prototype;
    _.super$_BaseTapAndDragGestureRecognizer_OneSequenceGestureRecognizer__TapStatusTrackerMixin$addAllowedPointer = _.addAllowedPointer$1;
    _.super$_BaseTapAndDragGestureRecognizer_OneSequenceGestureRecognizer__TapStatusTrackerMixin$dispose = _.dispose$0;
    _ = A.__BorderContainerState_State_TickerProviderStateMixin.prototype;
    _.super$__BorderContainerState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__HelperErrorState_State_SingleTickerProviderStateMixin.prototype;
    _.super$__HelperErrorState_State_SingleTickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__InputDecoratorState_State_TickerProviderStateMixin.prototype;
    _.super$__InputDecoratorState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__TextFieldState_State_RestorationMixin.prototype;
    _.super$__TextFieldState_State_RestorationMixin$didUpdateWidget = _.didUpdateWidget$1;
    _.super$__TextFieldState_State_RestorationMixin$didChangeDependencies = _.didChangeDependencies$0;
    _.super$__TextFieldState_State_RestorationMixin$dispose = _.dispose$0;
    _ = A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin.prototype;
    _.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin$attach = _.attach$1;
    _.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin$detach = _.detach$0;
    _ = A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin.prototype;
    _.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin$attach = _.attach$1;
    _.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin$detach = _.detach$0;
    _ = A._EditableTextState_State_AutomaticKeepAliveClientMixin.prototype;
    _.super$_EditableTextState_State_AutomaticKeepAliveClientMixin$initState = _.initState$0;
    _ = A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin.prototype;
    _.super$_EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin.prototype;
    _.super$__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin.prototype;
    _.super$__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin$dispose = _.dispose$0;
  })();
  (function installTearOffs() {
    var _instance_1_u = hunkHelpers._instance_1u,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance = hunkHelpers.installInstanceTearOff,
      _static = hunkHelpers.installStaticTearOff,
      _static_2 = hunkHelpers._static_2,
      _instance_2_u = hunkHelpers._instance_2u,
      _static_1 = hunkHelpers._static_1;
    var _;
    _instance_1_u(_ = A._CupertinoButtonState.prototype, "get$_handleTapDown", "_handleTapDown$1", 5);
    _instance_1_u(_, "get$_handleTapUp", "_handleTapUp$1", 12);
    _instance_0_u(_, "get$_handleTapCancel", "_handleTapCancel$0", 0);
    _instance(_, "get$_handleTap", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_handleTap$1", "_handleTap$0"], 48, 0, 0);
    _instance_1_u(_, "get$_onShowFocusHighlight", "_onShowFocusHighlight$1", 2);
    _instance_1_u(_ = A._CupertinoDesktopTextSelectionToolbarButtonState.prototype, "get$_onEnter", "_onEnter$1", 13);
    _instance_1_u(_, "get$_onExit", "_onExit$1", 14);
    _instance_0_u(A._CupertinoTextMagnifierState.prototype, "get$_magnifier0$_determineMagnifierPositionAndFocalPoint", "_magnifier0$_determineMagnifierPositionAndFocalPoint$0", 0);
    _static(A, "text_selection_toolbar0_CupertinoTextSelectionToolbar__defaultToolbarBuilder$closure", 4, null, ["call$4"], ["CupertinoTextSelectionToolbar__defaultToolbarBuilder"], 58, 0);
    _instance_1_u(_ = A._CupertinoTextSelectionToolbarContentState.prototype, "get$_onHorizontalDragEnd", "_onHorizontalDragEnd$1", 4);
    _instance_0_u(_, "get$_handleNextPage", "_handleNextPage$0", 0);
    _instance_0_u(_, "get$_handlePreviousPage", "_handlePreviousPage$0", 0);
    _instance_1_u(_, "get$_statusListener", "_statusListener$1", 15);
    _instance_1_u(_ = A._CupertinoTextSelectionToolbarButtonState.prototype, "get$_onTapDown", "_onTapDown$1", 5);
    _instance_1_u(_, "get$_onTapUp", "_onTapUp$1", 12);
    _instance_0_u(_, "get$_onTapCancel", "_onTapCancel$0", 0);
    _instance_1_u(_ = A._TapStatusTrackerMixin.prototype, "get$handleEvent", "handleEvent$1", 16);
    _instance_0_u(_, "get$_consecutiveTapTimerTimeout", "_consecutiveTapTimerTimeout$0", 0);
    _instance_1_u(A.BaseTapAndDragGestureRecognizer.prototype, "get$handleEvent", "handleEvent$1", 16);
    _static_2(A, "input_decorator__RenderDecoration__getBaseline$closure", "_RenderDecoration__getBaseline", 11);
    _static_2(A, "input_decorator__RenderDecoration__getDryBaseline$closure", "_RenderDecoration__getDryBaseline", 11);
    _instance_0_u(A._HelperErrorState.prototype, "get$_input_decorator$_handleChange", "_input_decorator$_handleChange$0", 0);
    _instance_1_u(_ = A._RenderDecoration.prototype, "get$computeMinIntrinsicWidth", "computeMinIntrinsicWidth$1", 1);
    _instance_1_u(_, "get$computeMaxIntrinsicWidth", "computeMaxIntrinsicWidth$1", 1);
    _instance_1_u(_, "get$computeMinIntrinsicHeight", "computeMinIntrinsicHeight$1", 1);
    _instance_1_u(_, "get$computeMaxIntrinsicHeight", "computeMaxIntrinsicHeight$1", 1);
    _instance_2_u(_, "get$_paintLabel", "_paintLabel$2", 17);
    _instance_1_u(_, "get$_childSemanticsConfigurationDelegate", "_childSemanticsConfigurationDelegate$1", 28);
    _instance_0_u(A._InputDecoratorState.prototype, "get$_input_decorator$_handleChange", "_input_decorator$_handleChange$0", 0);
    _instance_0_u(A._TextMagnifierState.prototype, "get$_determineMagnifierPositionAndFocalPoint", "_determineMagnifierPositionAndFocalPoint$0", 0);
    _static_2(A, "text_field_TextField__defaultContextMenuBuilder$closure", "TextField__defaultContextMenuBuilder", 60);
    _instance_0_u(A._TextFieldSelectionGestureDetectorBuilder.prototype, "get$onUserTap", "onUserTap$0", 0);
    _instance_0_u(_ = A._TextFieldState.prototype, "get$_text_field$_handleFocusChanged", "_text_field$_handleFocusChanged$0", 0);
    _instance_2_u(_, "get$_text_field$_handleSelectionChanged", "_text_field$_handleSelectionChanged$2", 40);
    _instance_0_u(_, "get$_handleSelectionHandleTapped", "_handleSelectionHandleTapped$0", 0);
    _instance_0_u(_, "get$_handleStatesControllerChange", "_handleStatesControllerChange$0", 0);
    _static_2(A, "text_selection_toolbar_TextSelectionToolbar__defaultToolbarBuilder$closure", "TextSelectionToolbar__defaultToolbarBuilder", 61);
    _instance_1_u(A.RenderAnimatedSize.prototype, "get$_animationStatusListener", "_animationStatusListener$1", 15);
    _instance_0_u(_ = A.RenderEditable.prototype, "get$markNeedsPaint", "markNeedsPaint$0", 0);
    _instance_0_u(_, "get$_showHideCursor", "_showHideCursor$0", 0);
    _instance_1_u(_, "get$_handleSetText", "_handleSetText$1", 18);
    _instance_1_u(_, "get$_handleSetSelection", "_handleSetSelection$1", 45);
    _instance_1_u(_, "get$_handleMoveCursorForwardByCharacter", "_handleMoveCursorForwardByCharacter$1", 2);
    _instance_1_u(_, "get$_handleMoveCursorBackwardByCharacter", "_handleMoveCursorBackwardByCharacter$1", 2);
    _instance_1_u(_, "get$_handleMoveCursorForwardByWord", "_handleMoveCursorForwardByWord$1", 2);
    _instance_1_u(_, "get$_handleMoveCursorBackwardByWord", "_handleMoveCursorBackwardByWord$1", 2);
    _instance_1_u(_, "get$computeMinIntrinsicWidth", "computeMinIntrinsicWidth$1", 1);
    _instance_1_u(_, "get$computeMaxIntrinsicWidth", "computeMaxIntrinsicWidth$1", 1);
    _instance_1_u(_, "get$computeMinIntrinsicHeight", "computeMinIntrinsicHeight$1", 1);
    _instance_1_u(_, "get$computeMaxIntrinsicHeight", "computeMaxIntrinsicHeight$1", 1);
    _instance_1_u(_, "get$_editable$_handleTapDown", "_editable$_handleTapDown$1", 5);
    _instance_0_u(_, "get$_editable$_handleTap", "_editable$_handleTap$0", 0);
    _instance_0_u(_, "get$_editable$_handleLongPress", "_editable$_handleLongPress$0", 0);
    _instance_2_u(_, "get$_paintContents", "_paintContents$2", 17);
    _instance_1_u(A.UndoManager.prototype, "get$_handleUndoManagerInvocation", "_handleUndoManagerInvocation$1", 27);
    _instance_1_u(_ = A._FocusableActionDetectorState.prototype, "get$_handleFocusHighlightModeChange", "_handleFocusHighlightModeChange$1", 47);
    _instance_1_u(_, "get$_handleMouseEnter", "_handleMouseEnter$1", 13);
    _instance_1_u(_, "get$_handleMouseExit", "_handleMouseExit$1", 14);
    _instance_1_u(_, "get$_actions$_handleFocusChange", "_actions$_handleFocusChange$1", 2);
    _instance_0_u(_ = A.EditableTextState.prototype, "get$_onChangedClipboardStatus", "_onChangedClipboardStatus$0", 0);
    _instance_0_u(_, "get$_onFloatingCursorResetTick", "_onFloatingCursorResetTick$0", 0);
    _instance_0_u(_, "get$_restartConnectionIfNeeded", "_restartConnectionIfNeeded$0", 0);
    _instance_0_u(_, "get$_unflagInternalFocus", "_unflagInternalFocus$0", 0);
    _instance_1_u(_, "get$_handleContextMenuOnParentScroll", "_handleContextMenuOnParentScroll$1", 49);
    _instance_0_u(_, "get$_onCursorColorTick", "_onCursorColorTick$0", 0);
    _instance_0_u(_, "get$_onCursorTick", "_onCursorTick$0", 0);
    _instance_0_u(_, "get$_didChangeTextEditingValue", "_didChangeTextEditingValue$0", 0);
    _instance_0_u(_, "get$_editable_text$_handleFocusChanged", "_editable_text$_handleFocusChanged$0", 0);
    _instance_1_u(_, "get$_compositeCallback", "_compositeCallback$1", 50);
    _instance(_, "get$_schedulePeriodicPostFrameCallbacks", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_schedulePeriodicPostFrameCallbacks$1", "_schedulePeriodicPostFrameCallbacks$0"], 51, 0, 0);
    _instance_1_u(_, "get$performSelector", "performSelector$1", 18);
    _instance(_, "get$_moveBeyondTextBoundary", 0, 3, null, ["call$3"], ["_moveBeyondTextBoundary$3"], 19, 0, 0);
    _instance(_, "get$_moveToTextBoundary", 0, 3, null, ["call$3"], ["_moveToTextBoundary$3"], 19, 0, 0);
    _instance_0_u(_, "get$_characterBoundary", "_characterBoundary$0", 3);
    _instance_0_u(_, "get$_nextWordBoundary", "_nextWordBoundary$0", 3);
    _instance_0_u(_, "get$_linebreak", "_linebreak$0", 3);
    _instance_0_u(_, "get$_paragraphBoundary", "_paragraphBoundary$0", 3);
    _instance_0_u(_, "get$_documentBoundary", "_documentBoundary$0", 3);
    _instance_1_u(_, "get$_transposeCharacters", "_transposeCharacters$1", 29);
    _instance_1_u(_, "get$_replaceText", "_replaceText$1", 30);
    _instance_1_u(_, "get$_scrollToDocumentBoundary", "_scrollToDocumentBoundary$1", 31);
    _instance_1_u(_, "get$_editable_text$_scroll", "_editable_text$_scroll$1", 32);
    _instance_1_u(_, "get$_extendSelectionByPage", "_extendSelectionByPage$1", 33);
    _instance_1_u(_, "get$_updateSelection", "_updateSelection$1", 34);
    _instance_1_u(_, "get$_hideToolbarIfVisible", "_hideToolbarIfVisible$1", 35);
    _static(A, "magnifier_TextMagnifierConfiguration__none$closure", 3, null, ["call$3"], ["TextMagnifierConfiguration__none"], 62, 0);
    _instance_0_u(_ = A.TextSelectionOverlay.prototype, "get$_updateTextSelectionOverlayVisibilities", "_updateTextSelectionOverlayVisibilities$0", 0);
    _instance_1_u(_, "get$_handleSelectionEndHandleDragStart", "_handleSelectionEndHandleDragStart$1", 6);
    _instance_1_u(_, "get$_handleSelectionEndHandleDragUpdate", "_handleSelectionEndHandleDragUpdate$1", 7);
    _instance_1_u(_, "get$_handleSelectionStartHandleDragStart", "_handleSelectionStartHandleDragStart$1", 6);
    _instance_1_u(_, "get$_handleSelectionStartHandleDragUpdate", "_handleSelectionStartHandleDragUpdate$1", 7);
    _instance_1_u(_, "get$_handleAnyDragEnd", "_handleAnyDragEnd$1", 4);
    _instance_1_u(_ = A.SelectionOverlay.prototype, "get$_handleStartHandleDragStart", "_handleStartHandleDragStart$1", 6);
    _instance_1_u(_, "get$_handleStartHandleDragUpdate", "_handleStartHandleDragUpdate$1", 7);
    _instance_1_u(_, "get$_handleStartHandleDragEnd", "_handleStartHandleDragEnd$1", 4);
    _instance_1_u(_, "get$_handleEndHandleDragStart", "_handleEndHandleDragStart$1", 6);
    _instance_1_u(_, "get$_handleEndHandleDragUpdate", "_handleEndHandleDragUpdate$1", 7);
    _instance_1_u(_, "get$_handleEndHandleDragEnd", "_handleEndHandleDragEnd$1", 4);
    _instance_1_u(_, "get$_buildToolbar", "_buildToolbar$1", 63);
    _instance_0_u(A._SelectionToolbarWrapperState.prototype, "get$_toolbarVisibilityChanged", "_toolbarVisibilityChanged$0", 0);
    _instance_0_u(A._SelectionHandleOverlayState.prototype, "get$_handleVisibilityChanged", "_handleVisibilityChanged$0", 0);
    _instance_0_u(_ = A.TextSelectionGestureDetectorBuilder.prototype, "get$onTapTrackStart", "onTapTrackStart$0", 0);
    _instance_0_u(_, "get$onTapTrackReset", "onTapTrackReset$0", 0);
    _instance_1_u(_, "get$onTapDown", "onTapDown$1", 8);
    _instance_1_u(_, "get$onForcePressStart", "onForcePressStart$1", 9);
    _instance_1_u(_, "get$onForcePressEnd", "onForcePressEnd$1", 9);
    _instance_1_u(_, "get$onSingleTapUp", "onSingleTapUp$1", 20);
    _instance_0_u(_, "get$onSingleTapCancel", "onSingleTapCancel$0", 0);
    _instance_1_u(_, "get$onSingleLongTapStart", "onSingleLongTapStart$1", 21);
    _instance_1_u(_, "get$onSingleLongTapMoveUpdate", "onSingleLongTapMoveUpdate$1", 22);
    _instance_1_u(_, "get$onSingleLongTapEnd", "onSingleLongTapEnd$1", 23);
    _instance_0_u(_, "get$onSecondaryTap", "onSecondaryTap$0", 0);
    _instance_1_u(_, "get$onSecondaryTapDown", "onSecondaryTapDown$1", 5);
    _instance_1_u(_, "get$onDoubleTapDown", "onDoubleTapDown$1", 8);
    _instance_1_u(_, "get$onTripleTapDown", "onTripleTapDown$1", 8);
    _instance_1_u(_, "get$onDragSelectionStart", "onDragSelectionStart$1", 24);
    _instance_1_u(_, "get$onDragSelectionUpdate", "onDragSelectionUpdate$1", 25);
    _instance_1_u(_, "get$onDragSelectionEnd", "onDragSelectionEnd$1", 26);
    _instance_0_u(_ = A._TextSelectionGestureDetectorState.prototype, "get$_handleTapTrackStart", "_handleTapTrackStart$0", 0);
    _instance_0_u(_, "get$_handleTapTrackReset", "_handleTapTrackReset$0", 0);
    _instance_1_u(_, "get$_text_selection$_handleTapDown", "_text_selection$_handleTapDown$1", 8);
    _instance_1_u(_, "get$_text_selection$_handleTapUp", "_text_selection$_handleTapUp$1", 20);
    _instance_0_u(_, "get$_text_selection$_handleTapCancel", "_text_selection$_handleTapCancel$0", 0);
    _instance_1_u(_, "get$_text_selection$_handleDragStart", "_text_selection$_handleDragStart$1", 24);
    _instance_1_u(_, "get$_text_selection$_handleDragUpdate", "_text_selection$_handleDragUpdate$1", 25);
    _instance_1_u(_, "get$_text_selection$_handleDragEnd", "_text_selection$_handleDragEnd$1", 26);
    _instance_1_u(_, "get$_forcePressStarted", "_forcePressStarted$1", 9);
    _instance_1_u(_, "get$_forcePressEnded", "_forcePressEnded$1", 9);
    _instance_1_u(_, "get$_handleLongPressStart", "_handleLongPressStart$1", 21);
    _instance_1_u(_, "get$_handleLongPressMoveUpdate", "_handleLongPressMoveUpdate$1", 22);
    _instance_1_u(_, "get$_handleLongPressEnd", "_handleLongPressEnd$1", 23);
    _instance_0_u(A.ClipboardStatusNotifier.prototype, "get$dispose", "dispose$0", 0);
    _instance_0_u(_ = A.UndoHistoryState.prototype, "get$undo", "undo$0", 0);
    _instance_0_u(_, "get$redo", "redo$0", 0);
    _instance_1_u(_, "get$_undoFromIntent", "_undoFromIntent$1", 56);
    _instance_1_u(_, "get$_redoFromIntent", "_redoFromIntent$1", 57);
    _instance_0_u(_, "get$_push", "_push$0", 0);
    _instance_0_u(_, "get$_handleFocus", "_handleFocus$0", 0);
    _instance_0_u(A.UndoHistoryController.prototype, "get$dispose", "dispose$0", 0);
    _static_1(A, "widget_state_WidgetStateMouseCursor__textable$closure", "WidgetStateMouseCursor__textable", 41);
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _mixin = hunkHelpers.mixin,
      _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(B.Tween, [A.SizeTween, A._InputBorderTween]);
    _inheritMany(B._Enum, [A.CupertinoButtonSize, A._CupertinoButtonStyle, A._CupertinoTextSelectionToolbarItemsSlot, A._DragState0, A._DecorationSlot, A._TextSelectionToolbarItemPosition, A.RenderAnimatedSizeState, A.MaxLengthEnforcement, A.SmartDashesType, A.SmartQuotesType, A.TextCapitalization0, A.UndoDirection, A.ContextMenuButtonType, A.ClipboardStatus]);
    _inheritMany(B.StatefulWidget, [A.CupertinoButton, A.CupertinoDesktopTextSelectionToolbarButton, A.CupertinoTextMagnifier, A._CupertinoTextSelectionToolbarContent, A.CupertinoTextSelectionToolbarButton, A._BorderContainer, A._HelperError, A.InputDecorator, A.TextMagnifier, A.TextField, A._TextSelectionToolbarOverflowable, A.FocusableActionDetector, A.AnimatedSize, A.EditableText, A._ScribbleFocusable, A._SelectionToolbarWrapper, A._SelectionHandleOverlay, A.TextSelectionGestureDetector, A.UndoHistory]);
    _inheritMany(B.State, [A.__CupertinoButtonState_State_SingleTickerProviderStateMixin, A._CupertinoDesktopTextSelectionToolbarButtonState, A.__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin, A.__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin, A._CupertinoTextSelectionToolbarButtonState, A.__BorderContainerState_State_TickerProviderStateMixin, A.__HelperErrorState_State_SingleTickerProviderStateMixin, A.__InputDecoratorState_State_TickerProviderStateMixin, A._TextMagnifierState, A.__TextFieldState_State_RestorationMixin, A.__TextSelectionToolbarOverflowableState_State_TickerProviderStateMixin, A._FocusableActionDetectorState, A.__AnimatedSizeState_State_SingleTickerProviderStateMixin, A._EditableTextState_State_AutomaticKeepAliveClientMixin, A._ScribbleFocusableState, A.__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin, A.__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin, A._TextSelectionGestureDetectorState, A._UndoHistoryState_State_UndoManagerClient]);
    _inherit(A._CupertinoButtonState, A.__CupertinoButtonState_State_SingleTickerProviderStateMixin);
    _inheritMany(B.Closure, [A._CupertinoButtonState__animate_closure, A._CupertinoTextSelectionToolbarContentState_build_closure, A._CupertinoTextSelectionToolbarItemsElement_mount_closure, A._RenderCupertinoTextSelectionToolbarItems_performLayout_closure, A._RenderCupertinoTextSelectionToolbarItems_performLayout_closure0, A._RenderCupertinoTextSelectionToolbarItems_paint_closure, A._RenderCupertinoTextSelectionToolbarItems_redepthChildren_closure, A._RenderCupertinoTextSelectionToolbarItems_visitChildrenForSemantics_closure, A._RenderCupertinoTextSelectionToolbarItems_debugDescribeChildren_closure, A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure, A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure0, A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure1, A._RenderDecoration_paint_doPaint, A._InputDecoratorState_build_closure, A._InputDecoratorDefaultsM3_hintStyle_closure, A._InputDecoratorDefaultsM3_fillColor_closure, A._InputDecoratorDefaultsM3_activeIndicatorBorder_closure, A._InputDecoratorDefaultsM3_outlineBorder_closure, A._InputDecoratorDefaultsM3_prefixIconColor_closure, A._InputDecoratorDefaultsM3_suffixIconColor_closure, A._InputDecoratorDefaultsM3_labelStyle_closure, A._InputDecoratorDefaultsM3_floatingLabelStyle_closure, A._InputDecoratorDefaultsM3_helperStyle_closure, A._InputDecoratorDefaultsM3_errorStyle_closure, A.TextMagnifier_adaptiveMagnifierConfiguration_closure, A._TextButtonDefaultsM3_foregroundColor_closure, A._TextButtonDefaultsM3_overlayColor_closure, A._TextButtonDefaultsM3_iconColor_closure, A._TextButtonDefaultsM3_mouseCursor_closure, A._TextFieldState_build_closure7, A._TextFieldState_build_closure8, A._m3StateInputStyle_closure, A._RenderTextSelectionToolbarItemsLayout__layoutChildren_closure, A._RenderTextSelectionToolbarItemsLayout__placeChildren_closure, A._RenderTextSelectionToolbarItemsLayout__resizeChildrenWhenOverflow_closure, A._RenderTextSelectionToolbarItemsLayout_paint_closure, A._RenderTextSelectionToolbarItemsLayout_visitChildrenForSemantics_closure, A._ShapeDecorationPainter__precache_closure, A._ShapeDecorationPainter__precache_closure0, A._ShapeDecorationPainter__precache_closure1, A.RenderEditable_getBoxesForSelection_closure, A.RenderEditable_describeSemanticsConfiguration_closure, A.FilteringTextInputFormatter__processRegion_adjustIndex, A.Actions_invoke_closure, A._FocusableActionDetectorState_initState_closure, A._FocusableActionDetectorState__mayTriggerCallback_shouldShowHoverHighlight, A._FocusableActionDetectorState__mayTriggerCallback_canRequestFocus, A._FocusableActionDetectorState__mayTriggerCallback_shouldShowFocusHighlight, A._FocusableActionDetectorState_didUpdateWidget_closure, A.ClipPath_shape_closure, A.ContextMenuController_show_closure, A.EditableTextState_cutSelection_closure, A.EditableTextState__pasteText_closure, A.EditableTextState_didChangeDependencies_closure, A.EditableTextState_didUpdateWidget_closure, A.EditableTextState_didUpdateWidget_closure0, A.EditableTextState__scheduleShowCaretOnScreen_closure, A.EditableTextState_didChangeMetrics_closure, A.EditableTextState__startCursorBlink_closure, A.EditableTextState__onCursorTick_closure1, A.EditableTextState__actions_closure, A.EditableTextState_build_closure, A.EditableTextState_build__closure, A.EditableTextState_build__closure2, A.EditableTextState_build__closure1, A.EditableTextState_build__closure3, A._ScribbleFocusableState_isInScribbleRect_closure, A._AnimatedPositionedState_forEachTween_closure, A._AnimatedPositionedState_forEachTween_closure0, A._AnimatedPositionedState_forEachTween_closure1, A._AnimatedPositionedState_forEachTween_closure2, A._AnimatedPositionedState_forEachTween_closure3, A._AnimatedPositionedState_forEachTween_closure4, A.InheritedTheme_capture_closure, A.MagnifierController_show_closure, A.SelectionOverlay_showMagnifier_closure, A.SelectionOverlay_showHandles_closure, A.SelectionOverlay_showHandles_closure0, A.SelectionOverlay_showToolbar_closure, A.SelectionOverlay_markNeedsBuild_closure, A.SelectionOverlay__buildToolbar_closure, A._SelectionHandleOverlayState_build_closure0, A.TextSelectionGestureDetectorBuilder_onTapDown_closure, A._TextSelectionGestureDetectorState_build_closure0, A._TextSelectionGestureDetectorState_build_closure2, A._TextSelectionGestureDetectorState_build_closure4, A._TextSelectionGestureDetectorState_build_closure6, A._TextSelectionGestureDetectorState_build_closure8, A.UndoHistoryState_initState_closure, A._throttle_closure]);
    _inheritMany(B.Closure0Args, [A._CupertinoButtonState__onShowFocusHighlight_closure, A._CupertinoDesktopTextSelectionToolbarButtonState__onEnter_closure, A._CupertinoDesktopTextSelectionToolbarButtonState__onExit_closure, A._CupertinoTextMagnifierState_initState_closure, A._CupertinoTextMagnifierState_initState__closure, A._CupertinoTextMagnifierState__determineMagnifierPositionAndFocalPoint_closure, A._CupertinoTextSelectionToolbarContentState__statusListener_closure, A._CupertinoTextSelectionToolbarButtonState__onTapDown_closure, A._CupertinoTextSelectionToolbarButtonState__onTapUp_closure, A._CupertinoTextSelectionToolbarButtonState__onTapCancel_closure, A.BaseTapAndDragGestureRecognizer__handleDragUpdateThrottled_closure, A.BaseTapAndDragGestureRecognizer_addAllowedPointer_closure, A.BaseTapAndDragGestureRecognizer__checkTapDown_closure, A.BaseTapAndDragGestureRecognizer__checkTapUp_closure, A.BaseTapAndDragGestureRecognizer__checkDragStart_closure, A.BaseTapAndDragGestureRecognizer__checkDragUpdate_closure, A.BaseTapAndDragGestureRecognizer__checkDragEnd_closure, A._HelperErrorState__handleChange_closure, A._InputDecoratorState__handleChange_closure, A._TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure, A._TextMagnifierState__determineMagnifierPositionAndFocalPoint__closure, A._TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure0, A._TextFieldState__handleFocusChanged_closure, A._TextFieldState__handleSelectionChanged_closure, A._TextFieldState__handleHover_closure, A._TextFieldState__handleStatesControllerChange_closure, A._TextFieldState_build_closure, A._TextFieldState_build_closure0, A._TextFieldState_build_closure1, A._TextFieldState_build_closure2, A._TextFieldState_build_closure3, A._TextFieldState_build_closure4, A._TextFieldState_build__closure0, A._TextFieldState_build__closure, A._TextSelectionToolbarOverflowableState_build_closure, A._TextSelectionToolbarOverflowableState_build__closure, A.RenderAnimatedSize_closure, A.RenderEditable__createShowOnScreenFor_closure, A._FocusableActionDetectorState__updateHighlightMode_closure, A._FocusableActionDetectorState__handleMouseEnter_closure, A._FocusableActionDetectorState__handleMouseExit_closure, A._FocusableActionDetectorState__handleFocusChange_closure, A.EditableTextState__onChangedClipboardStatus_closure, A.EditableTextState_buttonItemsForToolbarOptions_closure, A.EditableTextState_buttonItemsForToolbarOptions_closure0, A.EditableTextState_buttonItemsForToolbarOptions_closure1, A.EditableTextState_buttonItemsForToolbarOptions_closure2, A.EditableTextState_contextMenuButtonItems_closure, A.EditableTextState_contextMenuButtonItems_closure0, A.EditableTextState_contextMenuButtonItems_closure1, A.EditableTextState_contextMenuButtonItems_closure2, A.EditableTextState_contextMenuButtonItems_closure3, A.EditableTextState_contextMenuButtonItems_closure4, A.EditableTextState_contextMenuButtonItems_closure5, A.EditableTextState_contextMenuButtonItems_closure6, A.EditableTextState__textProcessingActionButtonItems_closure, A.EditableTextState_initState_closure, A.EditableTextState__onCursorTick_closure, A.EditableTextState__onCursorTick_closure0, A.EditableTextState__didChangeTextEditingValue_closure, A.EditableTextState__handleFocusChanged_closure, A.EditableTextState_insertTextPlaceholder_closure, A.EditableTextState_removeTextPlaceholder_closure, A.EditableTextState_showAutocorrectionPromptRect_closure, A.EditableTextState__semanticsOnCopy_closure, A.EditableTextState__semanticsOnCut_closure, A.EditableTextState__semanticsOnPaste_closure, A.EditableTextState_build___closure, A.SizeChangedLayoutNotifier_createRenderObject_closure, A._SelectionHandleOverlayState_build_closure, A._TextSelectionGestureDetectorState_build_closure, A._TextSelectionGestureDetectorState_build_closure1, A._TextSelectionGestureDetectorState_build_closure3, A._TextSelectionGestureDetectorState_build_closure5, A._TextSelectionGestureDetectorState_build_closure7, A._throttle__closure]);
    _inheritMany(B.Object, [A.TextSelectionControls, A._TapDragDownDetails_Object_Diagnosticable, A._TapDragUpDetails_Object_Diagnosticable, A._TapDragStartDetails_Object_Diagnosticable, A._TapDragUpdateDetails_Object_Diagnosticable, A._TapDragEndDetails_Object_Diagnosticable, A._TapStatusTrackerMixin, A._Decoration, A._RenderDecorationLayout, A.InputDecoration, A.TextSelectionGestureDetectorBuilder, A.TextAlignVertical, A.TextSelectionPoint, A.VerticalCaretMovementRun, A.LayerLink, A.AutofillConfiguration, A.BrowserContextMenu, A.ClipboardData, A.ProcessTextAction, A.DefaultProcessTextService, A.SuggestionSpan, A.SpellCheckResults, A.DefaultSpellCheckService, A.TextInputFormatter, A._MutableTextRange, A._TextEditingValueAccumulator, A.TextInputConfiguration, A.TextSelectionDelegate, A.TextInputClient, A.SelectionRect, A.TextInputConnection, A.UndoManager, A.UndoManagerClient, A._AppLifecycleListener_Object_WidgetsBindingObserver, A.ContextMenuButtonItem, A.ContextMenuController, A.ToolbarOptions, A._KeyFrame, A._ScribbleCacheKey, A.CapturedThemes, A.MagnifierInfo, A.TextMagnifierConfiguration, A.MagnifierController, A.MagnifierDecoration, A.SlottedMultiChildRenderObjectWidgetMixin, A.SlottedContainerRenderObjectMixin, A.SpellCheckConfiguration, A.TextSelectionOverlay, A.SelectionOverlay, A.TextSelectionHandleControls, A.TextSelectionToolbarAnchors, A.UndoHistoryValue, A._UndoStack]);
    _inheritMany(A.TextSelectionControls, [A.CupertinoDesktopTextSelectionControls, A.CupertinoTextSelectionControls, A.DesktopTextSelectionControls, A.MaterialTextSelectionControls]);
    _inherit(A.__CupertinoDesktopTextSelectionHandleControls_CupertinoDesktopTextSelectionControls_TextSelectionHandleControls, A.CupertinoDesktopTextSelectionControls);
    _inherit(A._CupertinoDesktopTextSelectionHandleControls, A.__CupertinoDesktopTextSelectionHandleControls_CupertinoDesktopTextSelectionControls_TextSelectionHandleControls);
    _inheritMany(B.StatelessWidget, [A.CupertinoDesktopTextSelectionToolbar, A.CupertinoMagnifier, A.CupertinoTextSelectionToolbar, A.AdaptiveTextSelectionToolbar, A.DesktopTextSelectionToolbar, A.DesktopTextSelectionToolbarButton, A.Magnifier, A.TextSelectionToolbar, A._TextSelectionToolbarContainer, A._TextSelectionToolbarOverflowButton, A.TextSelectionToolbarTextButton, A._CaptureAll, A.RawMagnifier]);
    _inherit(A._CupertinoTextMagnifierState, A.__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin);
    _inheritMany(B.CustomPainter, [A._CupertinoTextSelectionHandlePainter, A._CupertinoChevronPainter, A._LiveTextIconPainter, A._InputBorderPainter, A._TextSelectionHandlePainter]);
    _inherit(A._CupertinoTextSelectionHandleControls_CupertinoTextSelectionControls_TextSelectionHandleControls, A.CupertinoTextSelectionControls);
    _inherit(A.CupertinoTextSelectionHandleControls, A._CupertinoTextSelectionHandleControls_CupertinoTextSelectionControls_TextSelectionHandleControls);
    _inheritMany(B.SingleChildRenderObjectWidget, [A._CupertinoTextSelectionToolbarShape, A._TextSelectionToolbarTrailingEdgeAlign, A._AnimatedSize, A.CompositedTransformTarget, A.CompositedTransformFollower, A._CompositionCallback, A._Magnifier, A.SizeChangedLayoutNotifier, A.TapRegion]);
    _inherit(A._RenderCupertinoTextSelectionToolbarShape, B.RenderShiftedBox);
    _inheritMany(B.Closure2Args, [A._RenderCupertinoTextSelectionToolbarShape_paint_closure, A._RenderCupertinoTextSelectionToolbarItems_hitTestChild_closure, A._RenderDecoration_performLayout_centerLayout, A._RenderDecoration_performLayout_baselineLayout, A._RenderDecoration_hitTestChildren_closure, A._TextFieldState_build_closure5, A._TextFieldState_build_closure6, A.__TextFieldState_State_RestorationMixin_dispose_closure, A._TextSelectionToolbarTrailingEdgeAlignRenderBox_hitTestChildren_closure, A._RenderTextSelectionToolbarItemsLayout_hitTestChildren_closure, A.RenderEditable_getRectForComposingRange_closure, A.RenderEditable_computeMinIntrinsicWidth_closure, A.RenderEditable_computeMaxIntrinsicWidth_closure, A.RenderFollowerLayer_hitTestChildren_closure, A.EditableTextState__formatAndSetValue_closure, A.EditableTextState_build__closure0, A.EditableTextState_build__closure4]);
    _inherit(A._CupertinoTextSelectionToolbarContentState, A.__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin);
    _inheritMany(A._CupertinoChevronPainter, [A._LeftCupertinoChevronPainter, A._RightCupertinoChevronPainter]);
    _inheritMany(B.RenderObjectWidget, [A._CupertinoTextSelectionToolbarItems, A._SlottedMultiChildRenderObjectWidget_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin]);
    _inheritMany(B.RenderObjectElement, [A._CupertinoTextSelectionToolbarItemsElement, A.SlottedRenderObjectElement]);
    _inheritMany(B.RenderBox, [A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin, A.__RenderDecoration_RenderBox_SlottedContainerRenderObjectMixin, A.__RenderTextSelectionToolbarItemsLayout_RenderBox_ContainerRenderObjectMixin, A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin, A._RenderEditableCustomPaint]);
    _inherit(A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin);
    _inherit(A._RenderCupertinoTextSelectionToolbarItems, A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin);
    _inherit(A.TapDragDownDetails, A._TapDragDownDetails_Object_Diagnosticable);
    _inherit(A.TapDragUpDetails, A._TapDragUpDetails_Object_Diagnosticable);
    _inherit(A.TapDragStartDetails, A._TapDragStartDetails_Object_Diagnosticable);
    _inherit(A.TapDragUpdateDetails, A._TapDragUpdateDetails_Object_Diagnosticable);
    _inherit(A.TapDragEndDetails, A._TapDragEndDetails_Object_Diagnosticable);
    _inherit(A._BaseTapAndDragGestureRecognizer_OneSequenceGestureRecognizer__TapStatusTrackerMixin, B.OneSequenceGestureRecognizer);
    _inherit(A.BaseTapAndDragGestureRecognizer, A._BaseTapAndDragGestureRecognizer_OneSequenceGestureRecognizer__TapStatusTrackerMixin);
    _inheritMany(A.BaseTapAndDragGestureRecognizer, [A.TapAndHorizontalDragGestureRecognizer, A.TapAndPanGestureRecognizer]);
    _inherit(A.__DesktopTextSelectionHandleControls_DesktopTextSelectionControls_TextSelectionHandleControls, A.DesktopTextSelectionControls);
    _inherit(A._DesktopTextSelectionHandleControls, A.__DesktopTextSelectionHandleControls_DesktopTextSelectionControls_TextSelectionHandleControls);
    _inherit(A.InputBorder, B.ShapeBorder);
    _inherit(A.UnderlineInputBorder, A.InputBorder);
    _inheritMany(B.ChangeNotifier, [A._InputBorderGap, A.RenderEditablePainter]);
    _inherit(A._BorderContainerState, A.__BorderContainerState_State_TickerProviderStateMixin);
    _inherit(A._HelperErrorState, A.__HelperErrorState_State_SingleTickerProviderStateMixin);
    _inherit(A._RenderDecoration, A.__RenderDecoration_RenderBox_SlottedContainerRenderObjectMixin);
    _inherit(A.SlottedMultiChildRenderObjectWidget, A._SlottedMultiChildRenderObjectWidget_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin);
    _inherit(A._Decorator, A.SlottedMultiChildRenderObjectWidget);
    _inherit(A._InputDecoratorState, A.__InputDecoratorState_State_TickerProviderStateMixin);
    _inherit(A._InputDecoratorDefaultsM3, B.InputDecorationTheme);
    _inherit(A.TextButton, B.ButtonStyleButton);
    _inherit(A._TextButtonDefaultsM3, B.ButtonStyle);
    _inherit(A._TextFieldSelectionGestureDetectorBuilder, A.TextSelectionGestureDetectorBuilder);
    _inherit(A._TextFieldState, A.__TextFieldState_State_RestorationMixin);
    _inherit(A._MaterialTextSelectionHandleControls_MaterialTextSelectionControls_TextSelectionHandleControls, A.MaterialTextSelectionControls);
    _inherit(A.MaterialTextSelectionHandleControls, A._MaterialTextSelectionHandleControls_MaterialTextSelectionControls_TextSelectionHandleControls);
    _inherit(A._TextSelectionToolbarOverflowableState, A.__TextSelectionToolbarOverflowableState_State_TickerProviderStateMixin);
    _inheritMany(B.RenderProxyBox, [A._TextSelectionToolbarTrailingEdgeAlignRenderBox, A.RenderLeaderLayer, A.RenderFollowerLayer, A._RenderCompositionCallback, A._RenderMagnification, A._RenderSizeChangedWithCallback]);
    _inheritMany(B.MultiChildRenderObjectWidget, [A._TextSelectionToolbarItemsLayout, A._Editable]);
    _inherit(A._TextSelectionToolbarItemsLayoutElement, B.MultiChildRenderObjectElement);
    _inherit(A._RenderTextSelectionToolbarItemsLayout, A.__RenderTextSelectionToolbarItemsLayout_RenderBox_ContainerRenderObjectMixin);
    _inherit(A.PlaceholderSpan, B.InlineSpan);
    _inherit(A.ShapeDecoration, B.Decoration);
    _inherit(A._ShapeDecorationPainter, B.BoxPainter);
    _inherit(A.RenderAnimatedSize, B.RenderAligningShiftedBox);
    _inherit(A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin, A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin);
    _inherit(A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin_RenderInlineChildrenContainerDefaults, A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin);
    _inherit(A.RenderEditable, A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin_RenderInlineChildrenContainerDefaults);
    _inheritMany(A.RenderEditablePainter, [A._TextHighlightPainter, A._CaretPainter, A._CompositeRenderEditablePainter]);
    _inherit(A.FollowerLayer, B.ContainerLayer0);
    _inherit(A.FilteringTextInputFormatter, A.TextInputFormatter);
    _inherit(A._AnimatedSizeState, A.__AnimatedSizeState_State_SingleTickerProviderStateMixin);
    _inherit(A._AppLifecycleListener_Object_WidgetsBindingObserver_Diagnosticable, A._AppLifecycleListener_Object_WidgetsBindingObserver);
    _inherit(A.AppLifecycleListener, A._AppLifecycleListener_Object_WidgetsBindingObserver_Diagnosticable);
    _inheritMany(B.SingleChildLayoutDelegate, [A.DesktopTextSelectionToolbarLayoutDelegate, A.TextSelectionToolbarLayoutDelegate]);
    _inheritMany(B.ValueNotifier, [A.TextEditingController, A._ClipboardStatusNotifier_ValueNotifier_WidgetsBindingObserver, A.UndoHistoryController]);
    _inherit(A._DiscreteKeyFrameSimulation, B.Simulation);
    _inherit(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver, A._EditableTextState_State_AutomaticKeepAliveClientMixin);
    _inherit(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin, A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver);
    _inherit(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate, A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin);
    _inherit(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate_TextInputClient, A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate);
    _inherit(A.EditableTextState, A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate_TextInputClient);
    _inherit(A.WidgetSpan, A.PlaceholderSpan);
    _inherit(A._ScribblePlaceholder, A.WidgetSpan);
    _inherit(A._CodePointBoundary, B.TextBoundary);
    _inheritMany(B.ContextAction, [A._DeleteTextAction, A._UpdateTextSelectionAction, A._UpdateTextSelectionVerticallyAction, A._SelectAllAction, A._CopySelectionAction, A._EditableTextTapOutsideAction]);
    _inherit(A.ClipboardStatusNotifier, A._ClipboardStatusNotifier_ValueNotifier_WidgetsBindingObserver);
    _inherit(A._WebClipboardStatusNotifier, A.ClipboardStatusNotifier);
    _inherit(A.AnimatedPositioned, B.ImplicitlyAnimatedWidget);
    _inherit(A._AnimatedPositionedState, B.AnimatedWidgetBaseState);
    _inherit(A._NegativeClip, B.CustomClipper);
    _inherit(A.SizeChangedLayoutNotification, B.LayoutChangedNotification);
    _inherit(A.RenderTapRegion, B.RenderProxyBoxWithHitTestBehavior);
    _inherit(A.TextFieldTapRegion, A.TapRegion);
    _inheritMany(B.Intent, [A.ReplaceTextIntent, A.UpdateSelectionIntent, A.EditableTextTapOutsideIntent]);
    _inherit(A.ToolbarItemsParentData, B.ContainerBoxParentData);
    _inherit(A._SelectionToolbarWrapperState, A.__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin);
    _inherit(A._SelectionHandleOverlayState, A.__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin);
    _inherit(A.UndoHistoryState, A._UndoHistoryState_State_UndoManagerClient);
    _inherit(A.WidgetStateBorderSide, B.BorderSide);
    _inherit(A._WidgetStateBorderSide, A.WidgetStateBorderSide);
    _inherit(A.WidgetStateTextStyle, B.TextStyle);
    _inherit(A._WidgetStateTextStyle, A.WidgetStateTextStyle);
    _mixinHard(A.__CupertinoButtonState_State_SingleTickerProviderStateMixin, B.SingleTickerProviderStateMixin);
    _mixin(A.__CupertinoDesktopTextSelectionHandleControls_CupertinoDesktopTextSelectionControls_TextSelectionHandleControls, A.TextSelectionHandleControls);
    _mixinHard(A.__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin, B.SingleTickerProviderStateMixin);
    _mixin(A._CupertinoTextSelectionHandleControls_CupertinoTextSelectionControls_TextSelectionHandleControls, A.TextSelectionHandleControls);
    _mixinHard(A.__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin, B.TickerProviderStateMixin);
    _mixinHard(A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin, B.ContainerRenderObjectMixin);
    _mixin(A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, B.RenderBoxContainerDefaultsMixin);
    _mixinHard(A._BaseTapAndDragGestureRecognizer_OneSequenceGestureRecognizer__TapStatusTrackerMixin, A._TapStatusTrackerMixin);
    _mixin(A._TapDragDownDetails_Object_Diagnosticable, B.Diagnosticable);
    _mixin(A._TapDragEndDetails_Object_Diagnosticable, B.Diagnosticable);
    _mixin(A._TapDragStartDetails_Object_Diagnosticable, B.Diagnosticable);
    _mixin(A._TapDragUpDetails_Object_Diagnosticable, B.Diagnosticable);
    _mixin(A._TapDragUpdateDetails_Object_Diagnosticable, B.Diagnosticable);
    _mixin(A.__DesktopTextSelectionHandleControls_DesktopTextSelectionControls_TextSelectionHandleControls, A.TextSelectionHandleControls);
    _mixinHard(A.__BorderContainerState_State_TickerProviderStateMixin, B.TickerProviderStateMixin);
    _mixinHard(A.__HelperErrorState_State_SingleTickerProviderStateMixin, B.SingleTickerProviderStateMixin);
    _mixinHard(A.__InputDecoratorState_State_TickerProviderStateMixin, B.TickerProviderStateMixin);
    _mixinHard(A.__RenderDecoration_RenderBox_SlottedContainerRenderObjectMixin, A.SlottedContainerRenderObjectMixin);
    _mixinHard(A.__TextFieldState_State_RestorationMixin, B.RestorationMixin);
    _mixin(A._MaterialTextSelectionHandleControls_MaterialTextSelectionControls_TextSelectionHandleControls, A.TextSelectionHandleControls);
    _mixinHard(A.__RenderTextSelectionToolbarItemsLayout_RenderBox_ContainerRenderObjectMixin, B.ContainerRenderObjectMixin);
    _mixinHard(A.__TextSelectionToolbarOverflowableState_State_TickerProviderStateMixin, B.TickerProviderStateMixin);
    _mixinHard(A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin, B.RelayoutWhenSystemFontsChangeMixin);
    _mixinHard(A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin, B.ContainerRenderObjectMixin);
    _mixin(A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin_RenderInlineChildrenContainerDefaults, B.RenderInlineChildrenContainerDefaults);
    _mixinHard(A.__AnimatedSizeState_State_SingleTickerProviderStateMixin, B.SingleTickerProviderStateMixin);
    _mixin(A._AppLifecycleListener_Object_WidgetsBindingObserver, B.WidgetsBindingObserver);
    _mixin(A._AppLifecycleListener_Object_WidgetsBindingObserver_Diagnosticable, B.Diagnosticable);
    _mixinHard(A._EditableTextState_State_AutomaticKeepAliveClientMixin, B.AutomaticKeepAliveClientMixin);
    _mixin(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver, B.WidgetsBindingObserver);
    _mixinHard(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin, B.TickerProviderStateMixin);
    _mixin(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate, A.TextSelectionDelegate);
    _mixin(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate_TextInputClient, A.TextInputClient);
    _mixinHard(A._SlottedMultiChildRenderObjectWidget_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin, A.SlottedMultiChildRenderObjectWidgetMixin);
    _mixin(A._ClipboardStatusNotifier_ValueNotifier_WidgetsBindingObserver, B.WidgetsBindingObserver);
    _mixinHard(A.__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin, B.SingleTickerProviderStateMixin);
    _mixinHard(A.__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin, B.SingleTickerProviderStateMixin);
    _mixin(A._UndoHistoryState_State_UndoManagerClient, A.UndoManagerClient);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"SizeTween":{"Tween":["Size?"],"Animatable":["Size?"],"Animatable.T":"Size?","Tween.T":"Size?"},"CupertinoButton":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoButtonState":{"State":["CupertinoButton"]},"_CupertinoDesktopTextSelectionHandleControls":{"TextSelectionHandleControls":[]},"CupertinoDesktopTextSelectionToolbar":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"CupertinoDesktopTextSelectionToolbarButton":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoDesktopTextSelectionToolbarButtonState":{"State":["CupertinoDesktopTextSelectionToolbarButton"]},"CupertinoTextMagnifier":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoTextMagnifierState":{"State":["CupertinoTextMagnifier"]},"CupertinoMagnifier":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoTextSelectionHandlePainter":{"Listenable":[]},"CupertinoTextSelectionHandleControls":{"TextSelectionHandleControls":[]},"_CupertinoTextSelectionToolbarContent":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"CupertinoTextSelectionToolbar":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoTextSelectionToolbarShape":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderCupertinoTextSelectionToolbarShape":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"_CupertinoTextSelectionToolbarContentState":{"State":["_CupertinoTextSelectionToolbarContent"]},"_LeftCupertinoChevronPainter":{"Listenable":[]},"_RightCupertinoChevronPainter":{"Listenable":[]},"_CupertinoChevronPainter":{"Listenable":[]},"_CupertinoTextSelectionToolbarItems":{"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoTextSelectionToolbarItemsElement":{"RenderObjectElement":[],"Element":[],"DiagnosticableTree":[],"BuildContext":[]},"_RenderCupertinoTextSelectionToolbarItems":{"RenderBoxContainerDefaultsMixin":["RenderBox","ToolbarItemsParentData"],"RenderBox":[],"ContainerRenderObjectMixin":["RenderBox","ToolbarItemsParentData"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[],"ContainerRenderObjectMixin.1":"ToolbarItemsParentData","RenderBoxContainerDefaultsMixin.1":"ToolbarItemsParentData","ContainerRenderObjectMixin.0":"RenderBox"},"CupertinoTextSelectionToolbarButton":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoTextSelectionToolbarButtonState":{"State":["CupertinoTextSelectionToolbarButton"]},"_LiveTextIconPainter":{"Listenable":[]},"TapAndHorizontalDragGestureRecognizer":{"GestureRecognizer":[],"DiagnosticableTree":[],"GestureArenaMember":[]},"TapAndPanGestureRecognizer":{"GestureRecognizer":[],"DiagnosticableTree":[],"GestureArenaMember":[]},"BaseTapAndDragGestureRecognizer":{"GestureRecognizer":[],"DiagnosticableTree":[],"GestureArenaMember":[]},"AdaptiveTextSelectionToolbar":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_DesktopTextSelectionHandleControls":{"TextSelectionHandleControls":[]},"DesktopTextSelectionToolbar":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"DesktopTextSelectionToolbarButton":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"InputBorder":{"ShapeBorder":[]},"UnderlineInputBorder":{"InputBorder":[],"ShapeBorder":[]},"_BorderContainer":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_HelperError":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"InputDecorator":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_InputBorderGap":{"Listenable":[]},"_InputBorderTween":{"Tween":["InputBorder"],"Animatable":["InputBorder"],"Animatable.T":"InputBorder","Tween.T":"InputBorder"},"_InputBorderPainter":{"Listenable":[]},"_BorderContainerState":{"State":["_BorderContainer"]},"_HelperErrorState":{"State":["_HelperError"]},"_RenderDecoration":{"RenderBox":[],"SlottedContainerRenderObjectMixin":["_DecorationSlot","RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[],"SlottedContainerRenderObjectMixin.0":"_DecorationSlot","SlottedContainerRenderObjectMixin.1":"RenderBox"},"_Decorator":{"SlottedMultiChildRenderObjectWidgetMixin":["_DecorationSlot","RenderBox"],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[],"SlottedMultiChildRenderObjectWidgetMixin.0":"_DecorationSlot","SlottedMultiChildRenderObjectWidgetMixin.1":"RenderBox"},"_InputDecoratorState":{"State":["InputDecorator"]},"TextMagnifier":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextMagnifierState":{"State":["TextMagnifier"]},"Magnifier":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"TextButton":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextButtonDefaultsM3":{"ButtonStyle":[]},"TextField":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextFieldState":{"State":["TextField"]},"MaterialTextSelectionHandleControls":{"TextSelectionHandleControls":[]},"_TextSelectionHandlePainter":{"Listenable":[]},"_TextSelectionToolbarOverflowable":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TextSelectionToolbar":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextSelectionToolbarOverflowableState":{"State":["_TextSelectionToolbarOverflowable"]},"_TextSelectionToolbarTrailingEdgeAlign":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextSelectionToolbarTrailingEdgeAlignRenderBox":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"_TextSelectionToolbarItemsLayout":{"MultiChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextSelectionToolbarItemsLayoutElement":{"RenderObjectElement":[],"Element":[],"DiagnosticableTree":[],"BuildContext":[]},"_RenderTextSelectionToolbarItemsLayout":{"RenderBox":[],"ContainerRenderObjectMixin":["RenderBox","ToolbarItemsParentData"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[],"ContainerRenderObjectMixin.1":"ToolbarItemsParentData","ContainerRenderObjectMixin.0":"RenderBox"},"_TextSelectionToolbarContainer":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextSelectionToolbarOverflowButton":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"TextSelectionToolbarTextButton":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"PlaceholderSpan":{"InlineSpan":[],"DiagnosticableTree":[]},"ShapeDecoration":{"Decoration":[]},"RenderAnimatedSize":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"RenderEditablePainter":{"Listenable":[]},"RenderEditable":{"RenderBox":[],"ContainerRenderObjectMixin":["RenderBox","TextParentData"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[],"ContainerRenderObjectMixin.1":"TextParentData","ContainerRenderObjectMixin.0":"RenderBox"},"_RenderEditableCustomPaint":{"RenderBox":[],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"_TextHighlightPainter":{"RenderEditablePainter":[],"Listenable":[]},"_CaretPainter":{"RenderEditablePainter":[],"Listenable":[]},"_CompositeRenderEditablePainter":{"RenderEditablePainter":[],"Listenable":[]},"FollowerLayer":{"ContainerLayer0":[],"Layer0":[],"DiagnosticableTree":[]},"RenderLeaderLayer":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"RenderFollowerLayer":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"FilteringTextInputFormatter":{"TextInputFormatter":[]},"FocusableActionDetector":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_FocusableActionDetectorState":{"State":["FocusableActionDetector"]},"AnimatedSize":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_AnimatedSizeState":{"State":["AnimatedSize"]},"_AnimatedSize":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"AppLifecycleListener":{"WidgetsBindingObserver":[]},"CompositedTransformTarget":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"CompositedTransformFollower":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"EditableText":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"EditableTextState":{"State":["EditableText"],"WidgetsBindingObserver":[]},"_ScribbleFocusable":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_ScribblePlaceholder":{"WidgetSpan":[],"InlineSpan":[],"DiagnosticableTree":[]},"_CompositionCallback":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderCompositionCallback":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"TextEditingController":{"ValueNotifier":["TextEditingValue"],"Listenable":[]},"_Editable":{"MultiChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_ScribbleFocusableState":{"State":["_ScribbleFocusable"],"ScribbleClient":[]},"_CodePointBoundary":{"TextBoundary":[]},"_DeleteTextAction":{"ContextAction":["1"],"Action":["1"],"Action.T":"1","ContextAction.T":"1"},"_UpdateTextSelectionAction":{"ContextAction":["1"],"Action":["1"],"Action.T":"1","ContextAction.T":"1"},"_UpdateTextSelectionVerticallyAction":{"ContextAction":["1"],"Action":["1"],"Action.T":"1","ContextAction.T":"1"},"_SelectAllAction":{"ContextAction":["SelectAllTextIntent"],"Action":["SelectAllTextIntent"],"Action.T":"SelectAllTextIntent","ContextAction.T":"SelectAllTextIntent"},"_CopySelectionAction":{"ContextAction":["CopySelectionTextIntent"],"Action":["CopySelectionTextIntent"],"Action.T":"CopySelectionTextIntent","ContextAction.T":"CopySelectionTextIntent"},"_WebClipboardStatusNotifier":{"ValueNotifier":["ClipboardStatus"],"Listenable":[],"WidgetsBindingObserver":[]},"_EditableTextTapOutsideAction":{"ContextAction":["EditableTextTapOutsideIntent"],"Action":["EditableTextTapOutsideIntent"],"Action.T":"EditableTextTapOutsideIntent","ContextAction.T":"EditableTextTapOutsideIntent"},"AnimatedPositioned":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_AnimatedPositionedState":{"State":["AnimatedPositioned"]},"_CaptureAll":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"RawMagnifier":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_NegativeClip":{"Listenable":[]},"_Magnifier":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderMagnification":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"SizeChangedLayoutNotification":{"LayoutChangedNotification":[]},"SizeChangedLayoutNotifier":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderSizeChangedWithCallback":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"SlottedMultiChildRenderObjectWidget":{"SlottedMultiChildRenderObjectWidgetMixin":["1","2"],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"SlottedRenderObjectElement":{"RenderObjectElement":[],"Element":[],"DiagnosticableTree":[],"BuildContext":[]},"TextFieldTapRegion":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"TapRegion":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"RenderTapRegion":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"ExtendSelectionByPageIntent":{"Intent":[]},"ReplaceTextIntent":{"Intent":[]},"UpdateSelectionIntent":{"Intent":[]},"EditableTextTapOutsideIntent":{"Intent":[]},"ToolbarItemsParentData":{"BoxParentData":[],"ContainerParentDataMixin":["RenderBox"],"ParentData":[]},"_SelectionToolbarWrapper":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_SelectionHandleOverlay":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TextSelectionGestureDetector":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_SelectionToolbarWrapperState":{"State":["_SelectionToolbarWrapper"]},"_SelectionHandleOverlayState":{"State":["_SelectionHandleOverlay"]},"_TextSelectionGestureDetectorState":{"State":["TextSelectionGestureDetector"]},"ClipboardStatusNotifier":{"ValueNotifier":["ClipboardStatus"],"Listenable":[],"WidgetsBindingObserver":[]},"UndoHistory":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"UndoHistoryState":{"State":["UndoHistory<1>"]},"UndoHistoryController":{"ValueNotifier":["UndoHistoryValue"],"Listenable":[]},"WidgetSpan":{"InlineSpan":[],"DiagnosticableTree":[]},"WidgetStateBorderSide":{"BorderSide":[],"WidgetStateProperty":["BorderSide?"]},"_WidgetStateBorderSide":{"WidgetStateBorderSide":[],"BorderSide":[],"WidgetStateProperty":["BorderSide?"]},"WidgetStateTextStyle":{"TextStyle":[],"WidgetStateProperty":["TextStyle"]},"_WidgetStateTextStyle":{"TextStyle":[],"WidgetStateProperty":["TextStyle"]},"TextSelectionTheme":{"InheritedTheme":[],"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"_AutofillScope":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  B._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"SlottedMultiChildRenderObjectWidget":2,"_SlottedMultiChildRenderObjectWidget_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin":2,"_UndoHistoryState_State_UndoManagerClient":1}'));
  var type$ = (function rtii() {
    var findType = B.findType;
    return {
      Action_Intent: findType("Action<Intent>"),
      Animation_double: findType("Animation<double>"),
      AppExitResponse: findType("AppExitResponse"),
      BoxConstraints: findType("BoxConstraints"),
      BoxParentData: findType("BoxParentData"),
      CallbackAction_ActivateIntent: findType("CallbackAction<ActivateIntent>"),
      CallbackAction_DismissIntent: findType("CallbackAction<DismissIntent>"),
      CallbackAction_ExtendSelectionByPageIntent: findType("CallbackAction<ExtendSelectionByPageIntent>"),
      CallbackAction_PasteTextIntent: findType("CallbackAction<PasteTextIntent>"),
      CallbackAction_RedoTextIntent: findType("CallbackAction<RedoTextIntent>"),
      CallbackAction_ReplaceTextIntent: findType("CallbackAction<ReplaceTextIntent>"),
      CallbackAction_ScrollIntent: findType("CallbackAction<ScrollIntent>"),
      CallbackAction_ScrollToDocumentBoundaryIntent: findType("CallbackAction<ScrollToDocumentBoundaryIntent>"),
      CallbackAction_TransposeCharactersIntent: findType("CallbackAction<TransposeCharactersIntent>"),
      CallbackAction_UndoTextIntent: findType("CallbackAction<UndoTextIntent>"),
      CallbackAction_UpdateSelectionIntent: findType("CallbackAction<UpdateSelectionIntent>"),
      Color: findType("Color"),
      CupertinoLocalizations: findType("CupertinoLocalizations"),
      CurveTween: findType("CurveTween"),
      DefaultSelectionStyle: findType("DefaultSelectionStyle"),
      Directionality: findType("Directionality"),
      DismissIntent: findType("DismissIntent"),
      EditableTextTapOutsideIntent: findType("EditableTextTapOutsideIntent"),
      Element: findType("Element"),
      ExpandSelectionToDocumentBoundaryIntent: findType("ExpandSelectionToDocumentBoundaryIntent"),
      ExpandSelectionToLineBreakIntent: findType("ExpandSelectionToLineBreakIntent"),
      ExtendSelectionByCharacterIntent: findType("ExtendSelectionByCharacterIntent"),
      ExtendSelectionToDocumentBoundaryIntent: findType("ExtendSelectionToDocumentBoundaryIntent"),
      ExtendSelectionToLineBreakIntent: findType("ExtendSelectionToLineBreakIntent"),
      ExtendSelectionToNextParagraphBoundaryIntent: findType("ExtendSelectionToNextParagraphBoundaryIntent"),
      ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent: findType("ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent"),
      ExtendSelectionToNextWordBoundaryIntent: findType("ExtendSelectionToNextWordBoundaryIntent"),
      ExtendSelectionToNextWordBoundaryOrCaretLocationIntent: findType("ExtendSelectionToNextWordBoundaryOrCaretLocationIntent"),
      Future_void: findType("Future<~>"),
      GestureArenaEntry: findType("GestureArenaEntry"),
      GestureRecognizerFactoryWithHandlers_ForcePressGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<ForcePressGestureRecognizer>"),
      GestureRecognizerFactoryWithHandlers_LongPressGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<LongPressGestureRecognizer>"),
      GestureRecognizerFactoryWithHandlers_PanGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<PanGestureRecognizer>"),
      GestureRecognizerFactoryWithHandlers_TapAndHorizontalDragGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<TapAndHorizontalDragGestureRecognizer>"),
      GestureRecognizerFactoryWithHandlers_TapAndPanGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<TapAndPanGestureRecognizer>"),
      GestureRecognizerFactoryWithHandlers_TapGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<TapGestureRecognizer>"),
      GestureRecognizerFactory_GestureRecognizer: findType("GestureRecognizerFactory<GestureRecognizer>"),
      HitTestEntry_HitTestTarget: findType("HitTestEntry<HitTestTarget>"),
      HitTestTarget: findType("HitTestTarget"),
      IndexedSlot_nullable_Element: findType("IndexedSlot<Element?>"),
      InheritedCupertinoTheme: findType("InheritedCupertinoTheme"),
      InheritedTheme: findType("InheritedTheme"),
      InputBorder: findType("InputBorder"),
      Intent: findType("Intent"),
      JSArray_BoxShadow: findType("JSArray<BoxShadow>"),
      JSArray_ContainerLayer: findType("JSArray<ContainerLayer0>"),
      JSArray_ContextMenuButtonItem: findType("JSArray<ContextMenuButtonItem>"),
      JSArray_DiagnosticsNode: findType("JSArray<DiagnosticsNode>"),
      JSArray_InheritedTheme: findType("JSArray<InheritedTheme>"),
      JSArray_InlineSpan: findType("JSArray<InlineSpan>"),
      JSArray_InlineSpanSemanticsInformation: findType("JSArray<InlineSpanSemanticsInformation>"),
      JSArray_List_SemanticsConfiguration: findType("JSArray<List<SemanticsConfiguration>>"),
      JSArray_Listenable: findType("JSArray<Listenable>"),
      JSArray_OverlayEntry: findType("JSArray<OverlayEntry>"),
      JSArray_ProcessTextAction: findType("JSArray<ProcessTextAction>"),
      JSArray_RenderBox: findType("JSArray<RenderBox>"),
      JSArray_RenderEditablePainter: findType("JSArray<RenderEditablePainter>"),
      JSArray_SelectionRect: findType("JSArray<SelectionRect>"),
      JSArray_SemanticsConfiguration: findType("JSArray<SemanticsConfiguration>"),
      JSArray_SemanticsNode: findType("JSArray<SemanticsNode>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_StringAttribute: findType("JSArray<StringAttribute>"),
      JSArray_SuggestionSpan: findType("JSArray<SuggestionSpan>"),
      JSArray_TextBox: findType("JSArray<TextBox>"),
      JSArray_TextInputFormatter: findType("JSArray<TextInputFormatter>"),
      JSArray_TextSelectionPoint: findType("JSArray<TextSelectionPoint>"),
      JSArray_TextSpan: findType("JSArray<TextSpan>"),
      JSArray_Widget: findType("JSArray<Widget>"),
      JSArray__ScribblePlaceholder: findType("JSArray<_ScribblePlaceholder>"),
      JSArray_double: findType("JSArray<double>"),
      JSArray_nullable_RenderBox: findType("JSArray<RenderBox?>"),
      JSArray_of_void_Function_Action_Intent: findType("JSArray<~(Action<Intent>)>"),
      Key: findType("Key"),
      LabeledGlobalKey_EditableTextState: findType("LabeledGlobalKey<EditableTextState>"),
      LabeledGlobalKey_State_StatefulWidget: findType("LabeledGlobalKey<State<StatefulWidget>>"),
      LeaderLayer: findType("LeaderLayer"),
      List_ProcessTextAction: findType("List<ProcessTextAction>"),
      List_dynamic: findType("List<@>"),
      List_nullable_Object: findType("List<Object?>"),
      LogicalKeyboardKey: findType("LogicalKeyboardKey"),
      MapEntry_Offset_TextPosition: findType("MapEntry<Offset,TextPosition>"),
      MapEntry_int_Offset: findType("MapEntry<int,Offset>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      MaterialLocalizations: findType("MaterialLocalizations"),
      MediaQuery: findType("MediaQuery"),
      MouseCursor: findType("MouseCursor0"),
      NavigatorState: findType("NavigatorState"),
      NotificationListener_ScrollNotification: findType("NotificationListener<ScrollNotification>"),
      Null: findType("Null"),
      ObserverList_of_void_Function_Action_Intent: findType("ObserverList<~(Action<Intent>)>"),
      OutlinedBorder: findType("OutlinedBorder"),
      OverlayState: findType("OverlayState"),
      Paint: findType("Paint"),
      Path: findType("Path"),
      PointerCancelEvent: findType("PointerCancelEvent"),
      PointerDeviceKind: findType("PointerDeviceKind"),
      PointerMoveEvent: findType("PointerMoveEvent"),
      PointerUpEvent: findType("PointerUpEvent"),
      Rect: findType("Rect"),
      RenderBox: findType("RenderBox"),
      RenderEditable: findType("RenderEditable"),
      RenderTapRegion: findType("RenderTapRegion"),
      RenderTapRegionSurface: findType("RenderTapRegionSurface"),
      ReplaceTextIntent: findType("ReplaceTextIntent"),
      RestorableProperty_nullable_Object: findType("RestorableProperty<Object?>"),
      ScrollableState: findType("ScrollableState"),
      SemanticsNode: findType("SemanticsNode"),
      String: findType("String"),
      TextButtonTheme: findType("TextButtonTheme"),
      TextParentData: findType("TextParentData"),
      TextSelectionHandleControls: findType("TextSelectionHandleControls"),
      TextSelectionTheme: findType("TextSelectionTheme"),
      TextStyle: findType("TextStyle"),
      ToolbarItemsParentData: findType("ToolbarItemsParentData"),
      Tween_Offset: findType("Tween<Offset>"),
      Tween_double: findType("Tween<double>"),
      Type: findType("Type"),
      UndoHistory_TextEditingValue: findType("UndoHistory<TextEditingValue>"),
      UpdateSelectionIntent: findType("UpdateSelectionIntent"),
      ValueKey_StandardComponentType: findType("ValueKey<StandardComponentType>"),
      WidgetSpan: findType("WidgetSpan"),
      WidgetState: findType("WidgetState"),
      WidgetStatePropertyAll_Color: findType("WidgetStatePropertyAll<Color>"),
      WidgetStatePropertyAll_EdgeInsetsGeometry: findType("WidgetStatePropertyAll<EdgeInsetsGeometry>"),
      WidgetStatePropertyAll_double: findType("WidgetStatePropertyAll<double>"),
      WidgetStatePropertyAll_nullable_TextStyle: findType("WidgetStatePropertyAll<TextStyle?>"),
      _ActionsScope: findType("_ActionsScope"),
      _AutofillScope: findType("_AutofillScope"),
      _CupertinoTextSelectionToolbarItems: findType("_CupertinoTextSelectionToolbarItems"),
      _CupertinoTextSelectionToolbarItemsSlot: findType("_CupertinoTextSelectionToolbarItemsSlot"),
      _DecorationSlot: findType("_DecorationSlot"),
      _DeleteTextAction_DeleteCharacterIntent: findType("_DeleteTextAction<DeleteCharacterIntent>"),
      _DeleteTextAction_DeleteToLineBreakIntent: findType("_DeleteTextAction<DeleteToLineBreakIntent>"),
      _DeleteTextAction_DeleteToNextWordBoundaryIntent: findType("_DeleteTextAction<DeleteToNextWordBoundaryIntent>"),
      _RenderCupertinoTextSelectionToolbarItems: findType("_RenderCupertinoTextSelectionToolbarItems"),
      _UpdateTextSelectionVerticallyAction_DirectionalCaretMovementIntent: findType("_UpdateTextSelectionVerticallyAction<DirectionalCaretMovementIntent>"),
      _WidgetStatePropertyWith_Color: findType("_WidgetStatePropertyWith<Color>"),
      _WidgetStatePropertyWith_nullable_Color: findType("_WidgetStatePropertyWith<Color?>"),
      _WidgetStatePropertyWith_nullable_MouseCursor: findType("_WidgetStatePropertyWith<MouseCursor0?>"),
      bool: findType("bool"),
      dynamic: findType("@"),
      int: findType("int"),
      nullable_BackdropFilterLayer: findType("BackdropFilterLayer?"),
      nullable_BorderSide: findType("BorderSide?"),
      nullable_ClipboardData: findType("ClipboardData?"),
      nullable_Color: findType("Color?"),
      nullable_FollowerLayer: findType("FollowerLayer?"),
      nullable_InputBorder: findType("InputBorder?"),
      nullable_List_SuggestionSpan: findType("List<SuggestionSpan>?"),
      nullable_Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>?"),
      nullable_Object: findType("Object?"),
      nullable_RenderBox: findType("RenderBox?"),
      nullable_RenderEditable: findType("RenderEditable?"),
      nullable_ScrollableState: findType("ScrollableState?"),
      nullable_ShapeDecoration: findType("ShapeDecoration?"),
      nullable_String: findType("String?"),
      nullable_TextStyle: findType("TextStyle?"),
      nullable_TransformEngineLayer: findType("TransformEngineLayer0?"),
      nullable_TransformLayer: findType("TransformLayer?"),
      nullable_Tween_double: findType("Tween<double>?"),
      nullable_bool: findType("bool?"),
      void: findType("~"),
      void_Function: findType("~()")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    D.TextEditingValue_Yyo = new B.TextEditingValue("", C.TextSelection_kab, C.TextRange_m1_m1);
    D.AutofillConfiguration_JoX = new A.AutofillConfiguration(false, "", C.List_empty, D.TextEditingValue_Yyo, null);
    D.BorderRadius_3vw = new B.BorderRadius(C.Radius_8_8, C.Radius_8_8, C.Radius_8_8, C.Radius_8_8);
    D.Radius_40_40 = new B.Radius(40, 40);
    D.BorderRadius_4BW = new B.BorderRadius(D.Radius_40_40, D.Radius_40_40, D.Radius_40_40, D.Radius_40_40);
    D.Radius_60_50 = new B.Radius(60, 50);
    D.BorderRadius_MP8 = new B.BorderRadius(D.Radius_60_50, D.Radius_60_50, D.Radius_60_50, D.Radius_60_50);
    D.BorderRadius_POr = new B.BorderRadius(C.Radius_4_4, C.Radius_4_4, C.Radius_0_0, C.Radius_0_0);
    D.Radius_22_22 = new B.Radius(22, 22);
    D.BorderRadius_QJL = new B.BorderRadius(D.Radius_22_22, D.Radius_22_22, D.Radius_22_22, D.Radius_22_22);
    D.Radius_7_7 = new B.Radius(7, 7);
    D.BorderRadius_woU = new B.BorderRadius(D.Radius_7_7, D.Radius_7_7, D.Radius_7_7, D.Radius_7_7);
    D.BorderSide_ViT = new B.BorderSide(C.Color_vnR, 1, C.BorderStyle_1, -1);
    D.Border_pk4 = new B.Border(C.BorderSide_Ah5, C.BorderSide_Ah5, C.BorderSide_Ah5, C.BorderSide_Ah5);
    D.Color_ix7 = new B.Color(0.23529411764705882, 0, 0, 0, C.ColorSpace_0);
    D.Offset_0_4 = new B.Offset(0, 4);
    D.BoxShadow_xHB = new B.BoxShadow(0.5, C.BlurStyle_0, D.Color_ix7, D.Offset_0_4, 10);
    D.List_bwX = B._setArrayType(makeConstList([D.BoxShadow_xHB]), type$.JSArray_BoxShadow);
    D.BoxDecoration_Uph = new B.BoxDecoration(null, null, null, D.BorderRadius_3vw, D.List_bwX, null, C.BoxShape_0);
    D.CONSTANT0 = new B.Instantiation1(B.math__max$closure(), B.findType("Instantiation1<double>"));
    D.C_SizeChangedLayoutNotification = new A.SizeChangedLayoutNotification();
    D.ClipboardStatus_0 = new A.ClipboardStatus(0, "pasteable");
    D.ClipboardStatus_1 = new A.ClipboardStatus(1, "unknown");
    D.Color_rYE = new B.Color(0.03137254901960784, 0.6196078431372549, 0.6196078431372549, 0.6196078431372549, C.ColorSpace_0);
    D.ContextMenuButtonType_0 = new A.ContextMenuButtonType(0, "cut");
    D.ContextMenuButtonType_1 = new A.ContextMenuButtonType(1, "copy");
    D.ContextMenuButtonType_2 = new A.ContextMenuButtonType(2, "paste");
    D.ContextMenuButtonType_3 = new A.ContextMenuButtonType(3, "selectAll");
    D.ContextMenuButtonType_4 = new A.ContextMenuButtonType(4, "delete");
    D.ContextMenuButtonType_5 = new A.ContextMenuButtonType(5, "lookUp");
    D.ContextMenuButtonType_6 = new A.ContextMenuButtonType(6, "searchWeb");
    D.ContextMenuButtonType_7 = new A.ContextMenuButtonType(7, "share");
    D.ContextMenuButtonType_8 = new A.ContextMenuButtonType(8, "liveTextInput");
    D.ContextMenuButtonType_9 = new A.ContextMenuButtonType(9, "custom");
    D.CupertinoButtonSize_0 = new A.CupertinoButtonSize(0, "small");
    D.CupertinoButtonSize_1 = new A.CupertinoButtonSize(1, "medium");
    D.CupertinoButtonSize_2 = new A.CupertinoButtonSize(2, "large");
    D.CupertinoDynamicColor_Aap = new B.CupertinoDynamicColor(C.Color_Qf6, null, null, C.Color_Qf6, C.Color_MCJ, C.Color_Qf6, C.Color_MCJ, C.Color_Qf6, C.Color_MCJ, C.Color_Qf6, C.Color_MCJ);
    D.Color_xXa = new B.Color(0.6980392156862745, 1, 1, 1, C.ColorSpace_0);
    D.Color_LqP = new B.Color(0.6980392156862745, 0.18823529411764706, 0.18823529411764706, 0.18823529411764706, C.ColorSpace_0);
    D.CupertinoDynamicColor_JY4 = new B.CupertinoDynamicColor(D.Color_xXa, null, null, D.Color_xXa, D.Color_LqP, D.Color_xXa, D.Color_LqP, D.Color_xXa, D.Color_LqP, D.Color_xXa, D.Color_LqP);
    D.Color_Wp4 = new B.Color(0.06274509803921569, 0, 0, 0, C.ColorSpace_0);
    D.Color_MlC = new B.Color(0.06274509803921569, 1, 1, 1, C.ColorSpace_0);
    D.CupertinoDynamicColor_PU8 = new B.CupertinoDynamicColor(D.Color_Wp4, null, null, D.Color_Wp4, D.Color_MlC, D.Color_Wp4, D.Color_MlC, D.Color_Wp4, D.Color_MlC, D.Color_Wp4, D.Color_MlC);
    D.Color_kNw = new B.Color(0.2980392156862745, 0.23529411764705882, 0.23529411764705882, 0.2627450980392157, C.ColorSpace_0);
    D.Color_I6V = new B.Color(0.2980392156862745, 0.9215686274509803, 0.9215686274509803, 0.9607843137254902, C.ColorSpace_0);
    D.Color_m41 = new B.Color(0.3764705882352941, 0.23529411764705882, 0.23529411764705882, 0.2627450980392157, C.ColorSpace_0);
    D.Color_XFR = new B.Color(0.3764705882352941, 0.9215686274509803, 0.9215686274509803, 0.9607843137254902, C.ColorSpace_0);
    D.CupertinoDynamicColor_RmM = new B.CupertinoDynamicColor(D.Color_kNw, "tertiaryLabel", null, D.Color_kNw, D.Color_I6V, D.Color_m41, D.Color_XFR, D.Color_kNw, D.Color_I6V, D.Color_m41, D.Color_XFR);
    D.Color_35F = new B.Color(1, 0.9647058823529412, 0.9647058823529412, 0.9647058823529412, C.ColorSpace_0);
    D.Color_hos = new B.Color(1, 0.13333333333333333, 0.13333333333333333, 0.13333333333333333, C.ColorSpace_0);
    D.CupertinoDynamicColor_YBl = new B.CupertinoDynamicColor(D.Color_35F, null, null, D.Color_35F, D.Color_hos, D.Color_35F, D.Color_hos, D.Color_35F, D.Color_hos, D.Color_35F, D.Color_hos);
    D.CupertinoDynamicColor_ml5 = new B.CupertinoDynamicColor(C.Color_vnR, null, null, C.Color_vnR, C.Color_wst, C.Color_vnR, C.Color_wst, C.Color_vnR, C.Color_wst, C.Color_vnR, C.Color_wst);
    D.Color_yAD = new B.Color(1, 0.7215686274509804, 0.7215686274509804, 0.7215686274509804, C.ColorSpace_0);
    D.Color_vyR = new B.Color(1, 0.3568627450980392, 0.3568627450980392, 0.3568627450980392, C.ColorSpace_0);
    D.CupertinoDynamicColor_pDp = new B.CupertinoDynamicColor(D.Color_yAD, null, null, D.Color_yAD, D.Color_vyR, D.Color_yAD, D.Color_vyR, D.Color_yAD, D.Color_vyR, D.Color_yAD, D.Color_vyR);
    D.Color_KzF = new B.Color(0.0784313725490196, 0.4549019607843137, 0.4549019607843137, 0.5019607843137255, C.ColorSpace_0);
    D.Color_aqp = new B.Color(0.17647058823529413, 0.4627450980392157, 0.4627450980392157, 0.5019607843137255, C.ColorSpace_0);
    D.Color_Ssh = new B.Color(0.1568627450980392, 0.4549019607843137, 0.4549019607843137, 0.5019607843137255, C.ColorSpace_0);
    D.Color_lWF = new B.Color(0.25882352941176473, 0.4627450980392157, 0.4627450980392157, 0.5019607843137255, C.ColorSpace_0);
    D.CupertinoDynamicColor_zvp = new B.CupertinoDynamicColor(D.Color_KzF, "quaternarySystemFill", null, D.Color_KzF, D.Color_aqp, D.Color_Ssh, D.Color_lWF, D.Color_KzF, D.Color_aqp, D.Color_Ssh, D.Color_lWF);
    D.DeviceGestureSettings_1 = new B.DeviceGestureSettings(1);
    D.Duration_120000 = new B.Duration(120000);
    D.Duration_125000 = new B.Duration(125000);
    D.Duration_140000 = new B.Duration(140000);
    D.Duration_15000 = new B.Duration(15000);
    D.Duration_180000 = new B.Duration(180000);
    D.Duration_45000 = new B.Duration(45000);
    D.Duration_70000 = new B.Duration(70000);
    D.EdgeInsetsDirectional_0_0_0_0 = new B.EdgeInsetsDirectional(0, 0, 0, 0);
    D.EdgeInsetsDirectional_0_4_0_4 = new B.EdgeInsetsDirectional(0, 4, 0, 4);
    D.EdgeInsetsDirectional_0_8_0_8 = new B.EdgeInsetsDirectional(0, 8, 0, 8);
    D.EdgeInsetsDirectional_12_16_12_8 = new B.EdgeInsetsDirectional(12, 16, 12, 8);
    D.EdgeInsetsDirectional_12_20_12_12 = new B.EdgeInsetsDirectional(12, 20, 12, 12);
    D.EdgeInsetsDirectional_12_4_12_4 = new B.EdgeInsetsDirectional(12, 4, 12, 4);
    D.EdgeInsetsDirectional_12_8_12_8 = new B.EdgeInsetsDirectional(12, 8, 12, 8);
    D.EdgeInsets_12_8_12_8 = new B.EdgeInsets(12, 8, 12, 8);
    D.EdgeInsets_16_18_16_18 = new B.EdgeInsets(16, 18, 16, 18);
    D.EdgeInsets_20_0_20_3 = new B.EdgeInsets(20, 0, 20, 3);
    D.EdgeInsets_20_20_20_20 = new B.EdgeInsets(20, 20, 20, 20);
    D.EdgeInsets_4_0_4_0 = new B.EdgeInsets(4, 0, 4, 0);
    D.EdgeInsets_4_4_4_5 = new B.EdgeInsets(4, 4, 4, 5);
    D.EdgeInsets_6_6_6_6 = new B.EdgeInsets(6, 6, 6, 6);
    D.EdgeInsets_8_0_8_0 = new B.EdgeInsets(8, 0, 8, 0);
    D.EdgeInsets_8_2_8_5 = new B.EdgeInsets(8, 2, 8, 5);
    D.EdgeInsets_V1Q = new B.EdgeInsets(0.5, 1, 0.5, 1);
    D.FloatingLabelBehavior_0 = new B.FloatingLabelBehavior(0, "never");
    D.FloatingLabelBehavior_2 = new B.FloatingLabelBehavior(2, "always");
    D.IconData_58372_false = new B.IconData(58372, false);
    D.InlineSpanSemanticsInformation_fFW = new B.InlineSpanSemanticsInformation("\ufffc", null, null, true, true, C.List_empty2);
    D.InputDecoration_LQI = new A.InputDecoration(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, true, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, true, null, null, null);
    D._KeyFrame_0_1 = new A._KeyFrame(0, 1);
    D._KeyFrame_Qpi = new A._KeyFrame(0.5, 1);
    D._KeyFrame_agS = new A._KeyFrame(0.5375, 0.75);
    D._KeyFrame_q8f = new A._KeyFrame(0.575, 0.5);
    D._KeyFrame_UxA = new A._KeyFrame(0.6125, 0.25);
    D._KeyFrame_Khf = new A._KeyFrame(0.65, 0);
    D._KeyFrame_7jJ = new A._KeyFrame(0.85, 0);
    D._KeyFrame_pUM = new A._KeyFrame(0.8875, 0.25);
    D._KeyFrame_ZyM = new A._KeyFrame(0.925, 0.5);
    D._KeyFrame_1Pg = new A._KeyFrame(0.9625, 0.75);
    D._KeyFrame_1_1 = new A._KeyFrame(1, 1);
    D.List_8w6 = B._setArrayType(makeConstList([D._KeyFrame_0_1, D._KeyFrame_Qpi, D._KeyFrame_agS, D._KeyFrame_q8f, D._KeyFrame_UxA, D._KeyFrame_Khf, D._KeyFrame_7jJ, D._KeyFrame_pUM, D._KeyFrame_ZyM, D._KeyFrame_1Pg, D._KeyFrame_1_1]), B.findType("JSArray<_KeyFrame>"));
    D._DecorationSlot_0 = new A._DecorationSlot(0, "icon");
    D._DecorationSlot_1 = new A._DecorationSlot(1, "input");
    D._DecorationSlot_2 = new A._DecorationSlot(2, "label");
    D._DecorationSlot_3 = new A._DecorationSlot(3, "hint");
    D._DecorationSlot_4 = new A._DecorationSlot(4, "prefix");
    D._DecorationSlot_5 = new A._DecorationSlot(5, "suffix");
    D._DecorationSlot_6 = new A._DecorationSlot(6, "prefixIcon");
    D._DecorationSlot_7 = new A._DecorationSlot(7, "suffixIcon");
    D._DecorationSlot_8 = new A._DecorationSlot(8, "helperError");
    D._DecorationSlot_9 = new A._DecorationSlot(9, "counter");
    D._DecorationSlot_10 = new A._DecorationSlot(10, "container");
    D.List_LTx = B._setArrayType(makeConstList([D._DecorationSlot_0, D._DecorationSlot_1, D._DecorationSlot_2, D._DecorationSlot_3, D._DecorationSlot_4, D._DecorationSlot_5, D._DecorationSlot_6, D._DecorationSlot_7, D._DecorationSlot_8, D._DecorationSlot_9, D._DecorationSlot_10]), B.findType("JSArray<_DecorationSlot>"));
    D.BlurStyle_2 = new B.BlurStyle(2, "outer");
    D.Color_NdI = new B.Color(0.09803921568627451, 0, 0, 0, C.ColorSpace_0);
    D.BoxShadow_I4s = new B.BoxShadow(0.2, D.BlurStyle_2, D.Color_NdI, C.Offset_0_0, 11);
    D.List_Qj8 = B._setArrayType(makeConstList([D.BoxShadow_I4s]), type$.JSArray_BoxShadow);
    D.List_empty6 = B._setArrayType(makeConstList([]), type$.JSArray_InheritedTheme);
    D.List_empty5 = B._setArrayType(makeConstList([]), type$.JSArray_TextSelectionPoint);
    D.Offset_0_2 = new B.Offset(0, 2);
    D.BoxShadow_FxI = new B.BoxShadow(0.75, C.BlurStyle_0, D.Color_NdI, D.Offset_0_2, 1.5);
    D.List_jWK = B._setArrayType(makeConstList([D.BoxShadow_FxI]), type$.JSArray_BoxShadow);
    D.MagnifierDecoration_EpI = new A.MagnifierDecoration(1, null, C.RoundedRectangleBorder_Ggx);
    D.MagnifierInfo_JsQ = new A.MagnifierInfo(C.Offset_0_0, C.Rect_0_0_0_0, C.Rect_0_0_0_0, C.Rect_0_0_0_0);
    D.Object_x3N = {"deleteBackward:": 0, "deleteWordBackward:": 1, "deleteToBeginningOfLine:": 2, "deleteForward:": 3, "deleteWordForward:": 4, "deleteToEndOfLine:": 5, "moveLeft:": 6, "moveRight:": 7, "moveForward:": 8, "moveBackward:": 9, "moveUp:": 10, "moveDown:": 11, "moveLeftAndModifySelection:": 12, "moveRightAndModifySelection:": 13, "moveUpAndModifySelection:": 14, "moveDownAndModifySelection:": 15, "moveWordLeft:": 16, "moveWordRight:": 17, "moveToBeginningOfParagraph:": 18, "moveToEndOfParagraph:": 19, "moveWordLeftAndModifySelection:": 20, "moveWordRightAndModifySelection:": 21, "moveParagraphBackwardAndModifySelection:": 22, "moveParagraphForwardAndModifySelection:": 23, "moveToLeftEndOfLine:": 24, "moveToRightEndOfLine:": 25, "moveToBeginningOfDocument:": 26, "moveToEndOfDocument:": 27, "moveToLeftEndOfLineAndModifySelection:": 28, "moveToRightEndOfLineAndModifySelection:": 29, "moveToBeginningOfDocumentAndModifySelection:": 30, "moveToEndOfDocumentAndModifySelection:": 31, "transpose:": 32, "scrollToBeginningOfDocument:": 33, "scrollToEndOfDocument:": 34, "scrollPageUp:": 35, "scrollPageDown:": 36, "pageUpAndModifySelection:": 37, "pageDownAndModifySelection:": 38, "cancelOperation:": 39, "insertTab:": 40, "insertBacktab:": 41};
    D.Map_vzfpu = new B.ConstantStringMap(D.Object_x3N, [C.DeleteCharacterIntent_false, C.DeleteToNextWordBoundaryIntent_false, C.DeleteToLineBreakIntent_false, C.DeleteCharacterIntent_true, C.DeleteToNextWordBoundaryIntent_true, C.DeleteToLineBreakIntent_true, C.ExtendSelectionByCharacterIntent_true_false_false_false, C.ExtendSelectionByCharacterIntent_true_false_false_true, C.ExtendSelectionByCharacterIntent_true_false_false_true, C.ExtendSelectionByCharacterIntent_true_false_false_false, C.ExtendSelectionVerticallyToAdjacentLineIntent_true_false_false_false, C.ExtendSelectionVerticallyToAdjacentLineIntent_true_false_false_true, C.ExtendSelectionByCharacterIntent_false_false_false_false, C.ExtendSelectionByCharacterIntent_false_false_false_true, C.ExtendSelectionVerticallyToAdjacentLineIntent_false_false_false_false, C.ExtendSelectionVerticallyToAdjacentLineIntent_false_false_false_true, C.ExtendSelectionToNextWordBoundaryIntent_true_false_false_false, C.ExtendSelectionToNextWordBoundaryIntent_true_false_false_true, C.ExtendSelectionToLineBreakIntent_true_false_false_false, C.ExtendSelectionToLineBreakIntent_true_false_false_true, C.ExtendSelectionToNextWordBoundaryOrCaretLocationIntent_false_true_false_false, C.ExtendSelectionToNextWordBoundaryOrCaretLocationIntent_false_true_false_true, C.ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent_false_true_false_false, C.ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent_false_true_false_true, C.ExtendSelectionToLineBreakIntent_true_false_false_false, C.ExtendSelectionToLineBreakIntent_true_false_false_true, C.ExtendSelectionToDocumentBoundaryIntent_true_false_false_false, C.ExtendSelectionToDocumentBoundaryIntent_true_false_false_true, C.ExpandSelectionToLineBreakIntent_false_false_false_false, C.ExpandSelectionToLineBreakIntent_false_false_false_true, C.ExpandSelectionToDocumentBoundaryIntent_false_false_false_false, C.ExpandSelectionToDocumentBoundaryIntent_false_false_false_true, C.C_TransposeCharactersIntent, C.ScrollToDocumentBoundaryIntent_false, C.ScrollToDocumentBoundaryIntent_true, C.ScrollIntent_aFe, C.ScrollIntent_Lhi, C.ExtendSelectionVerticallyToAdjacentPageIntent_false_false_false_false, C.ExtendSelectionVerticallyToAdjacentPageIntent_false_false_false_true, C.C_DismissIntent, C.C_NextFocusIntent, C.C_PreviousFocusIntent], B.findType("ConstantStringMap<String,Intent>"));
    D.MaxLengthEnforcement_0 = new A.MaxLengthEnforcement(0, "none");
    D.MaxLengthEnforcement_2 = new A.MaxLengthEnforcement(2, "truncateAfterCompositionEnds");
    D.Offset_0_20 = new B.Offset(0, 20);
    D.Offset_0_26 = new B.Offset(0, 26);
    D.Offset_0_8 = new B.Offset(0, 8);
    D.Offset_11_m4 = new B.Offset(11, -4);
    D.Offset_1_3 = new B.Offset(1, 3);
    D.Offset_22_0 = new B.Offset(22, 0);
    D.Offset_3_0 = new B.Offset(3, 0);
    D.Offset_3_m3 = new B.Offset(3, -3);
    D.Offset_6_6 = new B.Offset(6, 6);
    D.Offset_PXW = new B.Offset(5, 10.5);
    D.Offset_jLQ = new B.Offset(0, -0.25);
    D.Offset_m3_0 = new B.Offset(-3, 0);
    D.Offset_m3_3 = new B.Offset(-3, 3);
    D.Offset_m3_m3 = new B.Offset(-3, -3);
    D.OptionalMethodChannel_13P = new B.OptionalMethodChannel("flutter/scribe", C.C_JSONMethodCodec0);
    D.OptionalMethodChannel_8ec = new B.OptionalMethodChannel("flutter/processtext", C.StandardMethodCodec_StandardMessageCodec);
    D.OptionalMethodChannel_o95 = new B.OptionalMethodChannel("flutter/spellcheck", C.StandardMethodCodec_StandardMessageCodec);
    D.OptionalMethodChannel_sli = new B.OptionalMethodChannel("flutter/undomanager", C.C_JSONMethodCodec0);
    D.Radius_1_1 = new B.Radius(1, 1);
    D.Record2_Size_0_0_0 = new B._Record_2(C.Size_0_0, 0);
    D.Rect_895 = new B.Rect(-1 / 0, -1 / 0, 1 / 0, 1 / 0);
    D.RenderAnimatedSizeState_0 = new A.RenderAnimatedSizeState(0, "start");
    D.RenderAnimatedSizeState_1 = new A.RenderAnimatedSizeState(1, "stable");
    D.RenderAnimatedSizeState_2 = new A.RenderAnimatedSizeState(2, "changed");
    D.RenderAnimatedSizeState_3 = new A.RenderAnimatedSizeState(3, "unstable");
    D.SelectionChangedCause_0 = new B.SelectionChangedCause(0, "tap");
    D.SelectionChangedCause_1 = new B.SelectionChangedCause(1, "doubleTap");
    D.SelectionChangedCause_2 = new B.SelectionChangedCause(2, "longPress");
    D.SelectionChangedCause_3 = new B.SelectionChangedCause(3, "forcePress");
    D.SelectionChangedCause_5 = new B.SelectionChangedCause(5, "toolbar");
    D.SelectionChangedCause_6 = new B.SelectionChangedCause(6, "drag");
    D.SelectionChangedCause_7 = new B.SelectionChangedCause(7, "scribble");
    D.SemanticsTag_mk5 = new B.SemanticsTag("_InputDecoratorState.suffix");
    D.SemanticsTag_sot = new B.SemanticsTag("_InputDecoratorState.prefix");
    D.Set_Pvfa6 = new B.GeneralConstantSet([C.TargetPlatform_0, C.TargetPlatform_1, C.TargetPlatform_2], B.findType("GeneralConstantSet<TargetPlatform>"));
    D.Size_10_10 = new B.Size(10, 10);
    D.Size_22_22 = new B.Size(22, 22);
    D.Size_48_36 = new B.Size(48, 36);
    D.Size_48_48 = new B.Size(48, 48);
    D.Size_RzZ = new B.Size(80, 47.5);
    D.Size_qTB = new B.Size(77.37, 37.9);
    D.SmartDashesType_0 = new A.SmartDashesType(0, "disabled");
    D.SmartDashesType_1 = new A.SmartDashesType(1, "enabled");
    D.SmartQuotesType_0 = new A.SmartQuotesType(0, "disabled");
    D.SmartQuotesType_1 = new A.SmartQuotesType(1, "enabled");
    D.SpellCheckConfiguration_asH = new A.SpellCheckConfiguration(null, null, null, null, false);
    D.StandardComponentType_2 = new B.StandardComponentType(2, "moreButton");
    D.TextAlignVertical_0 = new A.TextAlignVertical(0);
    D.TextAlignVertical_m1 = new A.TextAlignVertical(-1);
    D.TextCapitalization_30 = new A.TextCapitalization0(3, "none");
    D.TextHeightBehavior_TextLeadingDistribution_0 = new B.TextHeightBehavior(C.TextLeadingDistribution_0);
    D.TextInputType_0_null_null = new B.TextInputType(0, null, null);
    D.TextInputType_5_null_null = new B.TextInputType(5, null, null);
    D.TextSelectionToolbarAnchors_Offset_0_0_null = new A.TextSelectionToolbarAnchors(C.Offset_0_0, null);
    D.TextSelection_qBU = new B.TextSelection(0, 0, C.TextAffinity_1, false, 0, 0);
    D.TextStyle_9IC = new B.TextStyle(true, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_1, null, null, null, null, null, null, null, null);
    D.TextStyle_IHC = new B.TextStyle(true, null, null, null, null, null, null, C.FontWeight_3, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.TextStyle_Vot = new B.TextStyle(false, null, null, null, null, null, 15, C.FontWeight_3, null, -0.15, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.TextStyle_dPI = new B.TextStyle(false, null, null, null, null, null, 14, C.FontWeight_3, null, -0.15, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.Offset_ZYX = new B.Offset(0.05, 0);
    D.Offset_fIO = new B.Offset(0.133333, 0.06);
    D.Offset_oQp = new B.Offset(0.166666, 0.4);
    D.Offset_Jb2 = new B.Offset(0.208333, 0.82);
    D.Offset_rON = new B.Offset(0.25, 1);
    D.ThreePointCubic_r2X = new B.ThreePointCubic(D.Offset_ZYX, D.Offset_fIO, D.Offset_oQp, D.Offset_Jb2, D.Offset_rON);
    D.ToolbarOptions_false_false_false_false = new A.ToolbarOptions(false, false, false, false);
    D.ToolbarOptions_false_false_true_true = new A.ToolbarOptions(false, false, true, true);
    D.ToolbarOptions_true_true_true_true = new A.ToolbarOptions(true, true, true, true);
    D.Type_5J0 = B.typeLiteral("ExpandSelectionToLineBreakIntent");
    D.Type_7w3 = B.typeLiteral("ExpandSelectionToDocumentBoundaryIntent");
    D.Type_9Gf = B.typeLiteral("DoNothingAndStopPropagationTextIntent");
    D.Type_CopySelectionTextIntent_GQP = B.typeLiteral("CopySelectionTextIntent");
    D.Type_CupertinoLocalizations_cma = B.typeLiteral("CupertinoLocalizations");
    D.Type_DeleteCharacterIntent_SaE = B.typeLiteral("DeleteCharacterIntent");
    D.Type_DeleteToLineBreakIntent_NS7 = B.typeLiteral("DeleteToLineBreakIntent");
    D.Type_EditableTextTapOutsideIntent_Ih6 = B.typeLiteral("EditableTextTapOutsideIntent");
    D.Type_EditableText_O5i = B.typeLiteral("EditableText");
    D.Type_ExtendSelectionByPageIntent_ndp = B.typeLiteral("ExtendSelectionByPageIntent");
    D.Type_J79 = B.typeLiteral("ExtendSelectionByCharacterIntent");
    D.Type_PasteTextIntent_40q = B.typeLiteral("PasteTextIntent");
    D.Type_Q3J = B.typeLiteral("ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent");
    D.Type_RedoTextIntent_jvf = B.typeLiteral("RedoTextIntent");
    D.Type_ReplaceTextIntent_Vhj = B.typeLiteral("ReplaceTextIntent");
    D.Type_SelectAllTextIntent_7fB = B.typeLiteral("SelectAllTextIntent");
    D.Type_TapAndPanGestureRecognizer_N1Y = B.typeLiteral("TapAndPanGestureRecognizer");
    D.Type_TransposeCharactersIntent_tPt = B.typeLiteral("TransposeCharactersIntent");
    D.Type_Ud8 = B.typeLiteral("ExtendSelectionVerticallyToAdjacentLineIntent");
    D.Type_Ud80 = B.typeLiteral("ExtendSelectionVerticallyToAdjacentPageIntent");
    D.Type_UndoTextIntent_jvf = B.typeLiteral("UndoTextIntent");
    D.Type_UpdateSelectionIntent_6IE = B.typeLiteral("UpdateSelectionIntent");
    D.Type_ar1 = B.typeLiteral("DeleteToNextWordBoundaryIntent");
    D.Type_b1K0 = B.typeLiteral("ExtendSelectionToDocumentBoundaryIntent");
    D.Type_b1K = B.typeLiteral("ExtendSelectionToNextWordBoundaryIntent");
    D.Type_i87 = B.typeLiteral("ScrollToDocumentBoundaryIntent");
    D.Type_srU = B.typeLiteral("ExtendSelectionToNextWordBoundaryOrCaretLocationIntent");
    D.Type_taM = B.typeLiteral("ExtendSelectionToLineBreakIntent");
    D.Type_w20 = B.typeLiteral("ExtendSelectionToNextParagraphBoundaryIntent");
    D.Type_w8t = B.typeLiteral("TapAndHorizontalDragGestureRecognizer");
    D.UnderlineInputBorder_x70 = new A.UnderlineInputBorder(D.BorderRadius_POr, D.BorderSide_ViT);
    D.UndoDirection_0 = new A.UndoDirection(0, "undo");
    D.UndoDirection_1 = new A.UndoDirection(1, "redo");
    D.UndoHistoryValue_false_false = new A.UndoHistoryValue(false, false);
    D.WidgetStatePropertyAll_18 = new B.WidgetStatePropertyAll(18, type$.WidgetStatePropertyAll_double);
    D.Size_64_40 = new B.Size(64, 40);
    D.WidgetStatePropertyAll_Size_64_40 = new B.WidgetStatePropertyAll(D.Size_64_40, B.findType("WidgetStatePropertyAll<Size>"));
    D.WidgetState_7 = new B.WidgetState(7, "error");
    D._CupertinoButtonStyle_0 = new A._CupertinoButtonStyle(0, "plain");
    D._CupertinoTextSelectionToolbarItemsSlot_0 = new A._CupertinoTextSelectionToolbarItemsSlot(0, "backButton");
    D._CupertinoTextSelectionToolbarItemsSlot_1 = new A._CupertinoTextSelectionToolbarItemsSlot(1, "nextButton");
    D._DragState_00 = new A._DragState0(0, "ready");
    D._DragState_10 = new A._DragState0(1, "possible");
    D._DragState_20 = new A._DragState0(2, "accepted");
    D.Size_100_0 = new B.Size(100, 0);
    D._ScribblePlaceholder_UlE = new A._ScribblePlaceholder(D.Size_100_0, C.SizedBox_0_0_null_null, C.PlaceholderAlignment_4, null, null);
    D._ScribblePlaceholder_gl5 = new A._ScribblePlaceholder(C.Size_0_0, C.SizedBox_0_0_null_null, C.PlaceholderAlignment_4, null, null);
    D._TextSelectionToolbarItemPosition_0 = new A._TextSelectionToolbarItemPosition(0, "first");
    D._TextSelectionToolbarItemPosition_1 = new A._TextSelectionToolbarItemPosition(1, "middle");
    D._TextSelectionToolbarItemPosition_2 = new A._TextSelectionToolbarItemPosition(2, "last");
    D._TextSelectionToolbarItemPosition_3 = new A._TextSelectionToolbarItemPosition(3, "only");
    D._WidgetStateMouseCursor_zKm = new B._WidgetStateMouseCursor(A.widget_state_WidgetStateMouseCursor__textable$closure(), "WidgetStateMouseCursor(textable)");
  })();
  (function staticFields() {
    $.TextInputConnection__nextId = 1;
    $.ContextMenuController__shownInstance = null;
    $.ContextMenuController__menuOverlayEntry = null;
    $._ScribbleFocusableState__nextElementIdentifier = 1;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "kCupertinoButtonSizeBorderRadius", "$get$kCupertinoButtonSizeBorderRadius", () => B.LinkedHashMap_LinkedHashMap$_literal([D.CupertinoButtonSize_0, B.BorderRadius$circular(40), D.CupertinoButtonSize_1, B.BorderRadius$circular(40), D.CupertinoButtonSize_2, B.BorderRadius$circular(12)], B.findType("CupertinoButtonSize"), B.findType("BorderRadius")));
    _lazyFinal($, "cupertinoDesktopTextSelectionHandleControls", "$get$cupertinoDesktopTextSelectionHandleControls", () => new A._CupertinoDesktopTextSelectionHandleControls());
    _lazyFinal($, "cupertinoTextSelectionHandleControls", "$get$cupertinoTextSelectionHandleControls", () => new A.CupertinoTextSelectionHandleControls());
    _lazyFinal($, "desktopTextSelectionHandleControls", "$get$desktopTextSelectionHandleControls", () => new A._DesktopTextSelectionHandleControls());
    _lazy($, "TextMagnifier_adaptiveMagnifierConfiguration", "$get$TextMagnifier_adaptiveMagnifierConfiguration", () => new A.TextMagnifierConfiguration(new A.TextMagnifier_adaptiveMagnifierConfiguration_closure(), B.defaultTargetPlatform() === C.TargetPlatform_2));
    _lazyFinal($, "materialTextSelectionHandleControls", "$get$materialTextSelectionHandleControls", () => new A.MaterialTextSelectionHandleControls());
    _lazyFinal($, "BrowserContextMenu__instance", "$get$BrowserContextMenu__instance", () => new A.BrowserContextMenu());
    _lazyFinal($, "FilteringTextInputFormatter_singleLineFormatter", "$get$FilteringTextInputFormatter_singleLineFormatter", () => new A.FilteringTextInputFormatter("\n", false, ""));
    _lazyFinal($, "UndoManager__instance", "$get$UndoManager__instance", () => {
      var t1 = new A.UndoManager();
      t1.__UndoManager__channel_A = D.OptionalMethodChannel_sli;
      t1.get$_undo_manager$_channel().setMethodCallHandler$1(t1.get$_handleUndoManagerInvocation());
      return t1;
    });
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_6", e: "endPart", h: h});
})($__dart_deferred_initializers__, "wn0zFtJtLh3G3L8WgvtqnNWE1zs=");
;